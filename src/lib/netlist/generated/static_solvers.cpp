#include "plib/pdynlib.h"

// armora
static void nl_gcr_1250f340dea396ae_22_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A4 += gt[13];
	m_A7 += go[6];
	m_A6 += go[7];
	m_A6 += go[8];
	m_A5 += go[9];
	m_A5 += go[10];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A9 += go[14];
	m_A9 += go[15];
	m_A8 += go[16];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A15 += gt[22];
	m_A15 += gt[23];
	m_A15 += gt[24];
	m_A16 += go[20];
	m_A16 += go[21];
	m_A13 += go[22];
	m_A13 += go[23];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 -= go[24] * *cnV[24];
	m_A21 += gt[25];
	m_A21 += gt[26];
	m_A21 += gt[27];
	m_A21 += gt[28];
	m_A21 += gt[29];
	m_A20 += go[25];
	m_A20 += go[26];
	m_A18 += go[27];
	m_A17 += go[28];
	double RHS5 = Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 -= go[29] * *cnV[29];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A17;
	m_A21 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A9;
	m_A10 += m_A5 * f2_3;
	m_A11 += m_A6 * f2_3;
	m_A12 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	const double f2_4 = -f2 * m_A13;
	m_A14 += m_A5 * f2_4;
	m_A15 += m_A6 * f2_4;
	m_A16 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A18;
	m_A19 += m_A5 * f2_5;
	m_A20 += m_A6 * f2_5;
	m_A21 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_4 = -f3 * m_A14;
	m_A15 += m_A11 * f3_4;
	m_A16 += m_A12 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A19;
	m_A20 += m_A11 * f3_5;
	m_A21 += m_A12 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A15;
	const double f4_5 = -f4 * m_A20;
	m_A21 += m_A16 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A21;
	double tmp4 = 0.0;
	tmp4 += m_A16 * V[5];
	V[4] = (RHS4 - tmp4) / m_A15;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[4];
	tmp3 += m_A12 * V[5];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// pongf
static void nl_gcr_13e7b5ac1a260dbf_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A9 += gt[11];
	m_A8 += go[9];
	m_A7 += go[10];
	m_A6 += go[11];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A6;
	m_A9 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A5 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tailg
static void nl_gcr_144ed14e6bafdb_119_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A8 += go[6];
	m_A7 += go[7];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A10 += go[8];
	m_A11 += go[9];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	m_A12 += gt[10];
	m_A12 += gt[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A13 += go[10];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 += Idr[12];
	RHS5 += Idr[13];
	RHS5 += Idr[14];
	RHS5 += Idr[15];
	RHS5 += Idr[16];
	RHS5 -= go[11] * *cnV[11];
	RHS5 -= go[12] * *cnV[12];
	RHS5 -= go[13] * *cnV[13];
	RHS5 -= go[14] * *cnV[14];
	RHS5 -= go[15] * *cnV[15];
	RHS5 -= go[16] * *cnV[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A16 += go[17];
	m_A15 += go[18];
	double RHS6 = Idr[17];
	RHS6 += Idr[18];
	m_A17 += gt[19];
	m_A17 += gt[20];
	m_A18 += go[19];
	double RHS7 = Idr[19];
	RHS7 += Idr[20];
	RHS7 -= go[20] * *cnV[20];
	m_A19 += gt[21];
	m_A19 += gt[22];
	m_A19 += gt[23];
	m_A20 += go[21];
	m_A21 += go[22];
	double RHS8 = Idr[21];
	RHS8 += Idr[22];
	RHS8 += Idr[23];
	RHS8 -= go[23] * *cnV[23];
	m_A22 += gt[24];
	m_A22 += gt[25];
	m_A24 += go[24];
	m_A23 += go[25];
	double RHS9 = Idr[24];
	RHS9 += Idr[25];
	m_A25 += gt[26];
	m_A25 += gt[27];
	m_A25 += gt[28];
	m_A27 += go[26];
	m_A26 += go[27];
	double RHS10 = Idr[26];
	RHS10 += Idr[27];
	RHS10 += Idr[28];
	RHS10 -= go[28] * *cnV[28];
	m_A28 += gt[29];
	m_A28 += gt[30];
	m_A28 += gt[31];
	m_A29 += go[29];
	double RHS11 = Idr[29];
	RHS11 += Idr[30];
	RHS11 += Idr[31];
	RHS11 -= go[30] * *cnV[30];
	RHS11 -= go[31] * *cnV[31];
	m_A30 += gt[32];
	m_A30 += gt[33];
	m_A30 += gt[34];
	m_A31 += go[32];
	double RHS12 = Idr[32];
	RHS12 += Idr[33];
	RHS12 += Idr[34];
	RHS12 -= go[33] * *cnV[33];
	RHS12 -= go[34] * *cnV[34];
	m_A32 += gt[35];
	m_A32 += gt[36];
	m_A33 += go[35];
	m_A34 += go[36];
	double RHS13 = Idr[35];
	RHS13 += Idr[36];
	m_A35 += gt[37];
	m_A35 += gt[38];
	m_A35 += gt[39];
	m_A36 += go[37];
	double RHS14 = Idr[37];
	RHS14 += Idr[38];
	RHS14 += Idr[39];
	RHS14 -= go[38] * *cnV[38];
	RHS14 -= go[39] * *cnV[39];
	m_A37 += gt[40];
	m_A37 += gt[41];
	m_A37 += gt[42];
	m_A38 += go[40];
	double RHS15 = Idr[40];
	RHS15 += Idr[41];
	RHS15 += Idr[42];
	RHS15 -= go[41] * *cnV[41];
	RHS15 -= go[42] * *cnV[42];
	m_A39 += gt[43];
	m_A39 += gt[44];
	m_A40 += go[43];
	m_A41 += go[44];
	double RHS16 = Idr[43];
	RHS16 += Idr[44];
	m_A42 += gt[45];
	m_A42 += gt[46];
	m_A42 += gt[47];
	m_A44 += go[45];
	m_A43 += go[46];
	double RHS17 = Idr[45];
	RHS17 += Idr[46];
	RHS17 += Idr[47];
	RHS17 -= go[47] * *cnV[47];
	m_A47 += gt[48];
	m_A47 += gt[49];
	m_A47 += gt[50];
	m_A46 += go[48];
	m_A45 += go[49];
	double RHS18 = Idr[48];
	RHS18 += Idr[49];
	RHS18 += Idr[50];
	RHS18 -= go[50] * *cnV[50];
	m_A51 += gt[51];
	m_A51 += gt[52];
	m_A51 += gt[53];
	m_A50 += go[51];
	m_A49 += go[52];
	double RHS19 = Idr[51];
	RHS19 += Idr[52];
	RHS19 += Idr[53];
	RHS19 -= go[53] * *cnV[53];
	m_A58 += gt[54];
	m_A58 += gt[55];
	m_A58 += gt[56];
	m_A58 += gt[57];
	m_A58 += gt[58];
	m_A54 += go[54];
	m_A56 += go[55];
	m_A55 += go[56];
	m_A53 += go[57];
	double RHS20 = Idr[54];
	RHS20 += Idr[55];
	RHS20 += Idr[56];
	RHS20 += Idr[57];
	RHS20 += Idr[58];
	RHS20 -= go[58] * *cnV[58];
	m_A64 += gt[59];
	m_A64 += gt[60];
	m_A64 += gt[61];
	m_A62 += go[59];
	m_A61 += go[60];
	double RHS21 = Idr[59];
	RHS21 += Idr[60];
	RHS21 += Idr[61];
	RHS21 -= go[61] * *cnV[61];
	m_A69 += gt[62];
	m_A69 += gt[63];
	m_A67 += go[62];
	double RHS22 = Idr[62];
	RHS22 += Idr[63];
	RHS22 -= go[63] * *cnV[63];
	m_A75 += gt[64];
	m_A75 += gt[65];
	m_A75 += gt[66];
	m_A75 += gt[67];
	m_A75 += gt[68];
	m_A77 += go[64];
	m_A71 += go[65];
	m_A76 += go[66];
	double RHS23 = Idr[64];
	RHS23 += Idr[65];
	RHS23 += Idr[66];
	RHS23 += Idr[67];
	RHS23 += Idr[68];
	RHS23 -= go[67] * *cnV[67];
	RHS23 -= go[68] * *cnV[68];
	m_A81 += gt[69];
	m_A81 += gt[70];
	m_A81 += gt[71];
	m_A80 += go[69];
	m_A79 += go[70];
	m_A78 += go[71];
	double RHS24 = Idr[69];
	RHS24 += Idr[70];
	RHS24 += Idr[71];
	m_A84 += gt[72];
	m_A84 += gt[73];
	m_A84 += gt[74];
	m_A84 += gt[75];
	m_A86 += go[72];
	m_A86 += go[73];
	m_A83 += go[74];
	double RHS25 = Idr[72];
	RHS25 += Idr[73];
	RHS25 += Idr[74];
	RHS25 += Idr[75];
	RHS25 -= go[75] * *cnV[75];
	m_A90 += gt[76];
	m_A90 += gt[77];
	m_A90 += gt[78];
	m_A89 += go[76];
	m_A88 += go[77];
	m_A87 += go[78];
	double RHS26 = Idr[76];
	RHS26 += Idr[77];
	RHS26 += Idr[78];
	m_A98 += gt[79];
	m_A98 += gt[80];
	m_A98 += gt[81];
	m_A98 += gt[82];
	m_A98 += gt[83];
	m_A95 += go[79];
	m_A94 += go[80];
	m_A93 += go[81];
	m_A92 += go[82];
	double RHS27 = Idr[79];
	RHS27 += Idr[80];
	RHS27 += Idr[81];
	RHS27 += Idr[82];
	RHS27 += Idr[83];
	RHS27 -= go[83] * *cnV[83];
	m_A103 += gt[84];
	m_A103 += gt[85];
	m_A103 += gt[86];
	m_A100 += go[84];
	m_A101 += go[85];
	double RHS28 = Idr[84];
	RHS28 += Idr[85];
	RHS28 += Idr[86];
	RHS28 -= go[86] * *cnV[86];
	m_A110 += gt[87];
	m_A110 += gt[88];
	m_A106 += go[87];
	m_A107 += go[88];
	double RHS29 = Idr[87];
	RHS29 += Idr[88];
	m_A118 += gt[89];
	m_A118 += gt[90];
	m_A118 += gt[91];
	m_A118 += gt[92];
	m_A118 += gt[93];
	m_A118 += gt[94];
	m_A112 += go[89];
	m_A113 += go[90];
	m_A115 += go[91];
	m_A115 += go[92];
	double RHS30 = Idr[89];
	RHS30 += Idr[90];
	RHS30 += Idr[91];
	RHS30 += Idr[92];
	RHS30 += Idr[93];
	RHS30 += Idr[94];
	RHS30 -= go[93] * *cnV[93];
	RHS30 -= go[94] * *cnV[94];
	const double f0 = 1.0 / m_A0;
	const double f0_18 = -f0 * m_A45;
	m_A47 += m_A1 * f0_18;
	RHS18 += f0_18 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_20 = -f1 * m_A53;
	m_A58 += m_A3 * f1_20;
	RHS20 += f1_20 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_27 = -f2 * m_A92;
	m_A98 += m_A5 * f2_27;
	RHS27 += f2_27 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_20 = -f3 * m_A54;
	m_A58 += m_A7 * f3_20;
	m_A60 += m_A8 * f3_20;
	RHS20 += f3_20 * RHS3;
	const double f3_23 = -f3 * m_A71;
	m_A72 += m_A7 * f3_23;
	m_A75 += m_A8 * f3_23;
	RHS23 += f3_23 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_25 = -f4 * m_A83;
	m_A84 += m_A10 * f4_25;
	m_A85 += m_A11 * f4_25;
	RHS25 += f4_25 * RHS4;
	const double f4_28 = -f4 * m_A100;
	m_A102 += m_A10 * f4_28;
	m_A103 += m_A11 * f4_28;
	RHS28 += f4_28 * RHS4;
	const double f5 = 1.0 / m_A12;
	const double f5_30 = -f5 * m_A112;
	m_A115 += m_A13 * f5_30;
	RHS30 += f5_30 * RHS5;
	const double f6 = 1.0 / m_A14;
	const double f6_18 = -f6 * m_A46;
	m_A47 += m_A15 * f6_18;
	m_A48 += m_A16 * f6_18;
	RHS18 += f6_18 * RHS6;
	const double f6_30 = -f6 * m_A113;
	m_A114 += m_A15 * f6_30;
	m_A118 += m_A16 * f6_30;
	RHS30 += f6_30 * RHS6;
	const double f7 = 1.0 / m_A17;
	const double f7_19 = -f7 * m_A49;
	m_A51 += m_A18 * f7_19;
	RHS19 += f7_19 * RHS7;
	const double f8 = 1.0 / m_A19;
	const double f8_19 = -f8 * m_A50;
	m_A51 += m_A20 * f8_19;
	m_A52 += m_A21 * f8_19;
	RHS19 += f8_19 * RHS8;
	const double f8_20 = -f8 * m_A55;
	m_A57 += m_A20 * f8_20;
	m_A58 += m_A21 * f8_20;
	RHS20 += f8_20 * RHS8;
	const double f9 = 1.0 / m_A22;
	const double f9_20 = -f9 * m_A56;
	m_A58 += m_A23 * f9_20;
	m_A59 += m_A24 * f9_20;
	RHS20 += f9_20 * RHS9;
	const double f9_21 = -f9 * m_A61;
	m_A63 += m_A23 * f9_21;
	m_A64 += m_A24 * f9_21;
	RHS21 += f9_21 * RHS9;
	const double f10 = 1.0 / m_A25;
	const double f10_21 = -f10 * m_A62;
	m_A64 += m_A26 * f10_21;
	m_A65 += m_A27 * f10_21;
	RHS21 += f10_21 * RHS10;
	const double f10_22 = -f10 * m_A67;
	m_A68 += m_A26 * f10_22;
	m_A69 += m_A27 * f10_22;
	RHS22 += f10_22 * RHS10;
	const double f11 = 1.0 / m_A28;
	const double f11_24 = -f11 * m_A78;
	m_A81 += m_A29 * f11_24;
	RHS24 += f11_24 * RHS11;
	const double f12 = 1.0 / m_A30;
	const double f12_24 = -f12 * m_A79;
	m_A81 += m_A31 * f12_24;
	RHS24 += f12_24 * RHS12;
	const double f13 = 1.0 / m_A32;
	const double f13_24 = -f13 * m_A80;
	m_A81 += m_A33 * f13_24;
	m_A82 += m_A34 * f13_24;
	RHS24 += f13_24 * RHS13;
	const double f13_27 = -f13 * m_A93;
	m_A96 += m_A33 * f13_27;
	m_A98 += m_A34 * f13_27;
	RHS27 += f13_27 * RHS13;
	const double f14 = 1.0 / m_A35;
	const double f14_26 = -f14 * m_A87;
	m_A90 += m_A36 * f14_26;
	RHS26 += f14_26 * RHS14;
	const double f15 = 1.0 / m_A37;
	const double f15_26 = -f15 * m_A88;
	m_A90 += m_A38 * f15_26;
	RHS26 += f15_26 * RHS15;
	const double f16 = 1.0 / m_A39;
	const double f16_26 = -f16 * m_A89;
	m_A90 += m_A40 * f16_26;
	m_A91 += m_A41 * f16_26;
	RHS26 += f16_26 * RHS16;
	const double f16_27 = -f16 * m_A94;
	m_A97 += m_A40 * f16_27;
	m_A98 += m_A41 * f16_27;
	RHS27 += f16_27 * RHS16;
	const double f17 = 1.0 / m_A42;
	const double f17_27 = -f17 * m_A95;
	m_A98 += m_A43 * f17_27;
	m_A99 += m_A44 * f17_27;
	RHS27 += f17_27 * RHS17;
	const double f17_29 = -f17 * m_A106;
	m_A108 += m_A43 * f17_29;
	m_A110 += m_A44 * f17_29;
	RHS29 += f17_29 * RHS17;
	const double f18 = 1.0 / m_A47;
	const double f18_30 = -f18 * m_A114;
	m_A118 += m_A48 * f18_30;
	RHS30 += f18_30 * RHS18;
	const double f19 = 1.0 / m_A51;
	const double f19_20 = -f19 * m_A57;
	m_A58 += m_A52 * f19_20;
	RHS20 += f19_20 * RHS19;
	const double f20 = 1.0 / m_A58;
	const double f20_21 = -f20 * m_A63;
	m_A64 += m_A59 * f20_21;
	m_A66 += m_A60 * f20_21;
	RHS21 += f20_21 * RHS20;
	const double f20_23 = -f20 * m_A72;
	m_A73 += m_A59 * f20_23;
	m_A75 += m_A60 * f20_23;
	RHS23 += f20_23 * RHS20;
	const double f21 = 1.0 / m_A64;
	const double f21_22 = -f21 * m_A68;
	m_A69 += m_A65 * f21_22;
	m_A70 += m_A66 * f21_22;
	RHS22 += f21_22 * RHS21;
	const double f21_23 = -f21 * m_A73;
	m_A74 += m_A65 * f21_23;
	m_A75 += m_A66 * f21_23;
	RHS23 += f21_23 * RHS21;
	const double f22 = 1.0 / m_A69;
	const double f22_23 = -f22 * m_A74;
	m_A75 += m_A70 * f22_23;
	RHS23 += f22_23 * RHS22;
	const double f23 = 1.0 / m_A75;
	const double f23_28 = -f23 * m_A101;
	m_A103 += m_A76 * f23_28;
	m_A104 += m_A77 * f23_28;
	RHS28 += f23_28 * RHS23;
	const double f23_29 = -f23 * m_A107;
	m_A109 += m_A76 * f23_29;
	m_A110 += m_A77 * f23_29;
	RHS29 += f23_29 * RHS23;
	const double f24 = 1.0 / m_A81;
	const double f24_27 = -f24 * m_A96;
	m_A98 += m_A82 * f24_27;
	RHS27 += f24_27 * RHS24;
	const double f25 = 1.0 / m_A84;
	const double f25_28 = -f25 * m_A102;
	m_A103 += m_A85 * f25_28;
	m_A105 += m_A86 * f25_28;
	RHS28 += f25_28 * RHS25;
	const double f25_30 = -f25 * m_A115;
	m_A116 += m_A85 * f25_30;
	m_A118 += m_A86 * f25_30;
	RHS30 += f25_30 * RHS25;
	const double f26 = 1.0 / m_A90;
	const double f26_27 = -f26 * m_A97;
	m_A98 += m_A91 * f26_27;
	RHS27 += f26_27 * RHS26;
	const double f27 = 1.0 / m_A98;
	const double f27_29 = -f27 * m_A108;
	m_A110 += m_A99 * f27_29;
	RHS29 += f27_29 * RHS27;
	const double f28 = 1.0 / m_A103;
	const double f28_29 = -f28 * m_A109;
	m_A110 += m_A104 * f28_29;
	m_A111 += m_A105 * f28_29;
	RHS29 += f28_29 * RHS28;
	const double f28_30 = -f28 * m_A116;
	m_A117 += m_A104 * f28_30;
	m_A118 += m_A105 * f28_30;
	RHS30 += f28_30 * RHS28;
	const double f29 = 1.0 / m_A110;
	const double f29_30 = -f29 * m_A117;
	m_A118 += m_A111 * f29_30;
	RHS30 += f29_30 * RHS29;
	V[30] = RHS30 / m_A118;
	double tmp29 = 0.0;
	tmp29 += m_A111 * V[30];
	V[29] = (RHS29 - tmp29) / m_A110;
	double tmp28 = 0.0;
	tmp28 += m_A104 * V[29];
	tmp28 += m_A105 * V[30];
	V[28] = (RHS28 - tmp28) / m_A103;
	double tmp27 = 0.0;
	tmp27 += m_A99 * V[29];
	V[27] = (RHS27 - tmp27) / m_A98;
	double tmp26 = 0.0;
	tmp26 += m_A91 * V[27];
	V[26] = (RHS26 - tmp26) / m_A90;
	double tmp25 = 0.0;
	tmp25 += m_A85 * V[28];
	tmp25 += m_A86 * V[30];
	V[25] = (RHS25 - tmp25) / m_A84;
	double tmp24 = 0.0;
	tmp24 += m_A82 * V[27];
	V[24] = (RHS24 - tmp24) / m_A81;
	double tmp23 = 0.0;
	tmp23 += m_A76 * V[28];
	tmp23 += m_A77 * V[29];
	V[23] = (RHS23 - tmp23) / m_A75;
	double tmp22 = 0.0;
	tmp22 += m_A70 * V[23];
	V[22] = (RHS22 - tmp22) / m_A69;
	double tmp21 = 0.0;
	tmp21 += m_A65 * V[22];
	tmp21 += m_A66 * V[23];
	V[21] = (RHS21 - tmp21) / m_A64;
	double tmp20 = 0.0;
	tmp20 += m_A59 * V[21];
	tmp20 += m_A60 * V[23];
	V[20] = (RHS20 - tmp20) / m_A58;
	double tmp19 = 0.0;
	tmp19 += m_A52 * V[20];
	V[19] = (RHS19 - tmp19) / m_A51;
	double tmp18 = 0.0;
	tmp18 += m_A48 * V[30];
	V[18] = (RHS18 - tmp18) / m_A47;
	double tmp17 = 0.0;
	tmp17 += m_A43 * V[27];
	tmp17 += m_A44 * V[29];
	V[17] = (RHS17 - tmp17) / m_A42;
	double tmp16 = 0.0;
	tmp16 += m_A40 * V[26];
	tmp16 += m_A41 * V[27];
	V[16] = (RHS16 - tmp16) / m_A39;
	double tmp15 = 0.0;
	tmp15 += m_A38 * V[26];
	V[15] = (RHS15 - tmp15) / m_A37;
	double tmp14 = 0.0;
	tmp14 += m_A36 * V[26];
	V[14] = (RHS14 - tmp14) / m_A35;
	double tmp13 = 0.0;
	tmp13 += m_A33 * V[24];
	tmp13 += m_A34 * V[27];
	V[13] = (RHS13 - tmp13) / m_A32;
	double tmp12 = 0.0;
	tmp12 += m_A31 * V[24];
	V[12] = (RHS12 - tmp12) / m_A30;
	double tmp11 = 0.0;
	tmp11 += m_A29 * V[24];
	V[11] = (RHS11 - tmp11) / m_A28;
	double tmp10 = 0.0;
	tmp10 += m_A26 * V[21];
	tmp10 += m_A27 * V[22];
	V[10] = (RHS10 - tmp10) / m_A25;
	double tmp9 = 0.0;
	tmp9 += m_A23 * V[20];
	tmp9 += m_A24 * V[21];
	V[9] = (RHS9 - tmp9) / m_A22;
	double tmp8 = 0.0;
	tmp8 += m_A20 * V[19];
	tmp8 += m_A21 * V[20];
	V[8] = (RHS8 - tmp8) / m_A19;
	double tmp7 = 0.0;
	tmp7 += m_A18 * V[19];
	V[7] = (RHS7 - tmp7) / m_A17;
	double tmp6 = 0.0;
	tmp6 += m_A15 * V[18];
	tmp6 += m_A16 * V[30];
	V[6] = (RHS6 - tmp6) / m_A14;
	double tmp5 = 0.0;
	tmp5 += m_A13 * V[25];
	V[5] = (RHS5 - tmp5) / m_A12;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[25];
	tmp4 += m_A11 * V[28];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[20];
	tmp3 += m_A8 * V[23];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[27];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[20];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[18];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// spacewar
static void nl_gcr_15e8f6fb021de0f9_28_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[5] * *cnV[5];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A8 += go[11];
	m_A9 += go[12];
	m_A7 += go[13];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	m_A12 += gt[16];
	m_A12 += gt[17];
	m_A10 += go[16];
	m_A11 += go[17];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	m_A16 += gt[18];
	m_A16 += gt[19];
	m_A16 += gt[20];
	m_A15 += go[18];
	m_A17 += go[19];
	double RHS5 = Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 -= go[20] * *cnV[20];
	m_A20 += gt[21];
	m_A20 += gt[22];
	m_A20 += gt[23];
	m_A18 += go[21];
	double RHS6 = Idr[21];
	RHS6 += Idr[22];
	RHS6 += Idr[23];
	RHS6 -= go[22] * *cnV[22];
	RHS6 -= go[23] * *cnV[23];
	m_A27 += gt[24];
	m_A27 += gt[25];
	m_A27 += gt[26];
	m_A27 += gt[27];
	m_A27 += gt[28];
	m_A22 += go[24];
	m_A23 += go[25];
	m_A25 += go[26];
	double RHS7 = Idr[24];
	RHS7 += Idr[25];
	RHS7 += Idr[26];
	RHS7 += Idr[27];
	RHS7 += Idr[28];
	RHS7 -= go[27] * *cnV[27];
	RHS7 -= go[28] * *cnV[28];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A15;
	m_A16 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_7 = -f2 * m_A22;
	m_A25 += m_A5 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_4 = -f3 * m_A11;
	m_A12 += m_A7 * f3_4;
	m_A13 += m_A8 * f3_4;
	m_A14 += m_A9 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_6 = -f3 * m_A18;
	m_A19 += m_A7 * f3_6;
	m_A20 += m_A8 * f3_6;
	m_A21 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f3_7 = -f3 * m_A23;
	m_A24 += m_A7 * f3_7;
	m_A26 += m_A8 * f3_7;
	m_A27 += m_A9 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_6 = -f4 * m_A19;
	m_A20 += m_A13 * f4_6;
	m_A21 += m_A14 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f4_7 = -f4 * m_A24;
	m_A26 += m_A13 * f4_7;
	m_A27 += m_A14 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f5 = 1.0 / m_A16;
	const double f5_7 = -f5 * m_A25;
	m_A27 += m_A17 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A20;
	const double f6_7 = -f6 * m_A26;
	m_A27 += m_A21 * f6_7;
	RHS7 += f6_7 * RHS6;
	V[7] = RHS7 / m_A27;
	double tmp6 = 0.0;
	tmp6 += m_A21 * V[7];
	V[6] = (RHS6 - tmp6) / m_A20;
	double tmp5 = 0.0;
	tmp5 += m_A17 * V[7];
	V[5] = (RHS5 - tmp5) / m_A16;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[6];
	tmp4 += m_A14 * V[7];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[4];
	tmp3 += m_A8 * V[6];
	tmp3 += m_A9 * V[7];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[5];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// armora
static void nl_gcr_1692de755a535408_9_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A2 += go[0];
	m_A1 += go[1];
	m_A1 += go[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	m_A4 += gt[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A5 += go[3];
	m_A5 += go[4];
	m_A3 += go[5];
	m_A3 += go[6];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	m_A8 += gt[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A7 += go[7];
	m_A7 += go[8];
	m_A6 += go[9];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	const double f0 = 1.0 / m_A0;
	const double f0_1 = -f0 * m_A3;
	m_A4 += m_A1 * f0_1;
	m_A5 += m_A2 * f0_1;
	RHS1 += f0_1 * RHS0;
	const double f0_2 = -f0 * m_A6;
	m_A7 += m_A1 * f0_2;
	m_A8 += m_A2 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A4;
	const double f1_2 = -f1 * m_A7;
	m_A8 += m_A5 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A8;
	double tmp1 = 0.0;
	tmp1 += m_A5 * V[2];
	V[1] = (RHS1 - tmp1) / m_A4;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[1];
	tmp0 += m_A2 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// dpatrol
static void nl_gcr_18f4d9160b51d613_20_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A6 += go[5];
	m_A5 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	m_A8 += gt[10];
	m_A8 += gt[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A10 += go[10];
	m_A9 += go[11];
	m_A7 += go[12];
	double RHS3 = Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A11 += go[17];
	m_A12 += go[18];
	m_A13 += go[19];
	double RHS4 = Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 -= go[20] * *cnV[20];
	m_A19 += gt[21];
	m_A19 += gt[22];
	m_A19 += gt[23];
	m_A16 += go[21];
	m_A17 += go[22];
	double RHS5 = Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[23] * *cnV[23];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A7;
	m_A8 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A11;
	m_A14 += m_A3 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A12;
	m_A14 += m_A5 * f2_4;
	m_A15 += m_A6 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A16;
	m_A18 += m_A5 * f2_5;
	m_A19 += m_A6 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_4 = -f3 * m_A13;
	m_A14 += m_A9 * f3_4;
	m_A15 += m_A10 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A17;
	m_A18 += m_A9 * f3_5;
	m_A19 += m_A10 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A14;
	const double f4_5 = -f4 * m_A18;
	m_A19 += m_A15 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A19;
	double tmp4 = 0.0;
	tmp4 += m_A15 * V[5];
	V[4] = (RHS4 - tmp4) / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[4];
	tmp3 += m_A10 * V[5];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	tmp2 += m_A6 * V[5];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starhawk
static void nl_gcr_1f1086787c94f97c_40_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A7 += go[10];
	m_A9 += go[11];
	m_A8 += go[12];
	double RHS3 = Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A11 += go[16];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 -= go[17] * *cnV[17];
	RHS4 -= go[18] * *cnV[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A12 += gt[21];
	m_A12 += gt[22];
	m_A12 += gt[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A13 += go[19];
	double RHS5 = Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	RHS5 -= go[23] * *cnV[23];
	RHS5 -= go[24] * *cnV[24];
	RHS5 -= go[25] * *cnV[25];
	m_A15 += gt[26];
	m_A15 += gt[27];
	m_A16 += go[26];
	m_A14 += go[27];
	double RHS6 = Idr[26];
	RHS6 += Idr[27];
	m_A20 += gt[28];
	m_A20 += gt[29];
	m_A18 += go[28];
	m_A17 += go[29];
	double RHS7 = Idr[28];
	RHS7 += Idr[29];
	m_A22 += gt[30];
	m_A22 += gt[31];
	m_A23 += go[30];
	m_A24 += go[31];
	double RHS8 = Idr[30];
	RHS8 += Idr[31];
	m_A27 += gt[32];
	m_A27 += gt[33];
	m_A27 += gt[34];
	m_A27 += gt[35];
	m_A28 += go[32];
	m_A26 += go[33];
	m_A25 += go[34];
	double RHS9 = Idr[32];
	RHS9 += Idr[33];
	RHS9 += Idr[34];
	RHS9 += Idr[35];
	RHS9 -= go[35] * *cnV[35];
	m_A31 += gt[36];
	m_A31 += gt[37];
	m_A31 += gt[38];
	m_A30 += go[36];
	m_A29 += go[37];
	double RHS10 = Idr[36];
	RHS10 += Idr[37];
	RHS10 += Idr[38];
	RHS10 -= go[38] * *cnV[38];
	m_A39 += gt[39];
	m_A39 += gt[40];
	m_A39 += gt[41];
	m_A39 += gt[42];
	m_A36 += go[39];
	m_A37 += go[40];
	m_A33 += go[41];
	double RHS11 = Idr[39];
	RHS11 += Idr[40];
	RHS11 += Idr[41];
	RHS11 += Idr[42];
	RHS11 -= go[42] * *cnV[42];
	const double f0 = 1.0 / m_A0;
	const double f0_7 = -f0 * m_A17;
	m_A20 += m_A1 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_6 = -f1 * m_A14;
	m_A15 += m_A3 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_9 = -f2 * m_A25;
	m_A27 += m_A5 * f2_9;
	RHS9 += f2_9 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_7 = -f3 * m_A18;
	m_A19 += m_A7 * f3_7;
	m_A20 += m_A8 * f3_7;
	m_A21 += m_A9 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f3_11 = -f3 * m_A33;
	m_A34 += m_A7 * f3_11;
	m_A35 += m_A8 * f3_11;
	m_A39 += m_A9 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_10 = -f4 * m_A29;
	m_A31 += m_A11 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A12;
	const double f5_7 = -f5 * m_A19;
	m_A21 += m_A13 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_11 = -f5 * m_A34;
	m_A39 += m_A13 * f5_11;
	RHS11 += f5_11 * RHS5;
	const double f6 = 1.0 / m_A15;
	const double f6_9 = -f6 * m_A26;
	m_A27 += m_A16 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f7 = 1.0 / m_A20;
	const double f7_11 = -f7 * m_A35;
	m_A39 += m_A21 * f7_11;
	RHS11 += f7_11 * RHS7;
	const double f8 = 1.0 / m_A22;
	const double f8_10 = -f8 * m_A30;
	m_A31 += m_A23 * f8_10;
	m_A32 += m_A24 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f8_11 = -f8 * m_A36;
	m_A38 += m_A23 * f8_11;
	m_A39 += m_A24 * f8_11;
	RHS11 += f8_11 * RHS8;
	const double f9 = 1.0 / m_A27;
	const double f9_11 = -f9 * m_A37;
	m_A39 += m_A28 * f9_11;
	RHS11 += f9_11 * RHS9;
	const double f10 = 1.0 / m_A31;
	const double f10_11 = -f10 * m_A38;
	m_A39 += m_A32 * f10_11;
	RHS11 += f10_11 * RHS10;
	V[11] = RHS11 / m_A39;
	double tmp10 = 0.0;
	tmp10 += m_A32 * V[11];
	V[10] = (RHS10 - tmp10) / m_A31;
	double tmp9 = 0.0;
	tmp9 += m_A28 * V[11];
	V[9] = (RHS9 - tmp9) / m_A27;
	double tmp8 = 0.0;
	tmp8 += m_A23 * V[10];
	tmp8 += m_A24 * V[11];
	V[8] = (RHS8 - tmp8) / m_A22;
	double tmp7 = 0.0;
	tmp7 += m_A21 * V[11];
	V[7] = (RHS7 - tmp7) / m_A20;
	double tmp6 = 0.0;
	tmp6 += m_A16 * V[9];
	V[6] = (RHS6 - tmp6) / m_A15;
	double tmp5 = 0.0;
	tmp5 += m_A13 * V[11];
	V[5] = (RHS5 - tmp5) / m_A12;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[10];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[5];
	tmp3 += m_A8 * V[7];
	tmp3 += m_A9 * V[11];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[9];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// zac1b11142
static void nl_gcr_1fad5cda2646cf42_30_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A3 += go[7];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[10];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A7 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A9 += go[15];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	m_A11 += gt[18];
	m_A11 += gt[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A12 += go[18];
	m_A10 += go[19];
	double RHS5 = Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A14 += gt[24];
	m_A14 += gt[25];
	m_A14 += gt[26];
	m_A14 += gt[27];
	m_A14 += gt[28];
	m_A13 += go[22];
	m_A16 += go[23];
	m_A16 += go[24];
	m_A16 += go[25];
	double RHS6 = Idr[22];
	RHS6 += Idr[23];
	RHS6 += Idr[24];
	RHS6 += Idr[25];
	RHS6 += Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 -= go[26] * *cnV[26];
	RHS6 -= go[27] * *cnV[27];
	RHS6 -= go[28] * *cnV[28];
	m_A19 += gt[29];
	m_A19 += gt[30];
	m_A18 += go[29];
	m_A17 += go[30];
	double RHS7 = Idr[29];
	RHS7 += Idr[30];
	m_A21 += gt[31];
	m_A21 += gt[32];
	m_A21 += gt[33];
	m_A21 += gt[34];
	m_A22 += go[31];
	m_A20 += go[32];
	double RHS8 = Idr[31];
	RHS8 += Idr[32];
	RHS8 += Idr[33];
	RHS8 += Idr[34];
	RHS8 -= go[33] * *cnV[33];
	RHS8 -= go[34] * *cnV[34];
	m_A29 += gt[35];
	m_A29 += gt[36];
	m_A29 += gt[37];
	m_A29 += gt[38];
	m_A29 += gt[39];
	m_A29 += gt[40];
	m_A29 += gt[41];
	m_A26 += go[35];
	m_A26 += go[36];
	m_A26 += go[37];
	m_A27 += go[38];
	m_A25 += go[39];
	m_A24 += go[40];
	m_A23 += go[41];
	double RHS9 = Idr[35];
	RHS9 += Idr[36];
	RHS9 += Idr[37];
	RHS9 += Idr[38];
	RHS9 += Idr[39];
	RHS9 += Idr[40];
	RHS9 += Idr[41];
	const double f0 = 1.0 / m_A0;
	const double f0_6 = -f0 * m_A13;
	m_A15 += m_A1 * f0_6;
	RHS6 += f0_6 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A10;
	m_A11 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_7 = -f2 * m_A17;
	m_A19 += m_A5 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f2_9 = -f2 * m_A23;
	m_A27 += m_A5 * f2_9;
	RHS9 += f2_9 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_8 = -f3 * m_A20;
	m_A22 += m_A7 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f3_9 = -f3 * m_A24;
	m_A29 += m_A7 * f3_9;
	RHS9 += f3_9 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_9 = -f4 * m_A25;
	m_A29 += m_A9 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_7 = -f5 * m_A18;
	m_A19 += m_A12 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A14;
	const double f6_9 = -f6 * m_A26;
	m_A28 += m_A15 * f6_9;
	m_A29 += m_A16 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f7 = 1.0 / m_A19;
	const double f7_9 = -f7 * m_A27;
	RHS9 += f7_9 * RHS7;
	const double f8 = 1.0 / m_A21;
	const double f8_9 = -f8 * m_A28;
	m_A29 += m_A22 * f8_9;
	RHS9 += f8_9 * RHS8;
	V[9] = RHS9 / m_A29;
	double tmp8 = 0.0;
	tmp8 += m_A22 * V[9];
	V[8] = (RHS8 - tmp8) / m_A21;
	double tmp7 = 0.0;
	V[7] = (RHS7 - tmp7) / m_A19;
	double tmp6 = 0.0;
	tmp6 += m_A15 * V[8];
	tmp6 += m_A16 * V[9];
	V[6] = (RHS6 - tmp6) / m_A14;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[7];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[9];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[9];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[7];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[8];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// 280zzzap
static void nl_gcr_24643c159711f292_95_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A5 += go[10];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A6 += gt[17];
	m_A6 += gt[18];
	m_A6 += gt[19];
	m_A7 += go[13];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A9 += go[20];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[21] * *cnV[21];
	m_A10 += gt[22];
	m_A10 += gt[23];
	m_A11 += go[22];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[23] * *cnV[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A12 += gt[26];
	m_A12 += gt[27];
	m_A13 += go[24];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	RHS6 += Idr[26];
	RHS6 += Idr[27];
	RHS6 -= go[25] * *cnV[25];
	RHS6 -= go[26] * *cnV[26];
	RHS6 -= go[27] * *cnV[27];
	m_A14 += gt[28];
	m_A14 += gt[29];
	m_A14 += gt[30];
	m_A14 += gt[31];
	m_A15 += go[28];
	double RHS7 = Idr[28];
	RHS7 += Idr[29];
	RHS7 += Idr[30];
	RHS7 += Idr[31];
	RHS7 -= go[29] * *cnV[29];
	RHS7 -= go[30] * *cnV[30];
	RHS7 -= go[31] * *cnV[31];
	m_A16 += gt[32];
	m_A16 += gt[33];
	m_A17 += go[32];
	double RHS8 = Idr[32];
	RHS8 += Idr[33];
	RHS8 -= go[33] * *cnV[33];
	m_A18 += gt[34];
	m_A18 += gt[35];
	m_A18 += gt[36];
	m_A18 += gt[37];
	m_A19 += go[34];
	double RHS9 = Idr[34];
	RHS9 += Idr[35];
	RHS9 += Idr[36];
	RHS9 += Idr[37];
	RHS9 -= go[35] * *cnV[35];
	RHS9 -= go[36] * *cnV[36];
	RHS9 -= go[37] * *cnV[37];
	m_A20 += gt[38];
	m_A20 += gt[39];
	m_A22 += go[38];
	m_A21 += go[39];
	double RHS10 = Idr[38];
	RHS10 += Idr[39];
	m_A23 += gt[40];
	m_A23 += gt[41];
	m_A23 += gt[42];
	m_A23 += gt[43];
	m_A24 += go[40];
	double RHS11 = Idr[40];
	RHS11 += Idr[41];
	RHS11 += Idr[42];
	RHS11 += Idr[43];
	RHS11 -= go[41] * *cnV[41];
	RHS11 -= go[42] * *cnV[42];
	RHS11 -= go[43] * *cnV[43];
	m_A25 += gt[44];
	m_A25 += gt[45];
	m_A25 += gt[46];
	m_A27 += go[44];
	m_A28 += go[45];
	m_A26 += go[46];
	double RHS12 = Idr[44];
	RHS12 += Idr[45];
	RHS12 += Idr[46];
	m_A29 += gt[47];
	m_A29 += gt[48];
	m_A31 += go[47];
	m_A30 += go[48];
	double RHS13 = Idr[47];
	RHS13 += Idr[48];
	m_A37 += gt[49];
	m_A37 += gt[50];
	m_A37 += gt[51];
	m_A37 += gt[52];
	m_A37 += gt[53];
	m_A37 += gt[54];
	m_A36 += go[49];
	m_A35 += go[50];
	m_A34 += go[51];
	m_A33 += go[52];
	m_A32 += go[53];
	double RHS14 = Idr[49];
	RHS14 += Idr[50];
	RHS14 += Idr[51];
	RHS14 += Idr[52];
	RHS14 += Idr[53];
	RHS14 += Idr[54];
	RHS14 -= go[54] * *cnV[54];
	m_A39 += gt[55];
	m_A39 += gt[56];
	m_A39 += gt[57];
	m_A39 += gt[58];
	m_A38 += go[55];
	m_A40 += go[56];
	double RHS15 = Idr[55];
	RHS15 += Idr[56];
	RHS15 += Idr[57];
	RHS15 += Idr[58];
	RHS15 -= go[57] * *cnV[57];
	RHS15 -= go[58] * *cnV[58];
	m_A42 += gt[59];
	m_A42 += gt[60];
	m_A42 += gt[61];
	m_A42 += gt[62];
	m_A41 += go[59];
	m_A43 += go[60];
	double RHS16 = Idr[59];
	RHS16 += Idr[60];
	RHS16 += Idr[61];
	RHS16 += Idr[62];
	RHS16 -= go[61] * *cnV[61];
	RHS16 -= go[62] * *cnV[62];
	m_A45 += gt[63];
	m_A45 += gt[64];
	m_A45 += gt[65];
	m_A46 += go[63];
	m_A44 += go[64];
	double RHS17 = Idr[63];
	RHS17 += Idr[64];
	RHS17 += Idr[65];
	RHS17 -= go[65] * *cnV[65];
	m_A52 += gt[66];
	m_A52 += gt[67];
	m_A52 += gt[68];
	m_A52 += gt[69];
	m_A52 += gt[70];
	m_A52 += gt[71];
	m_A49 += go[66];
	m_A50 += go[67];
	m_A51 += go[68];
	m_A47 += go[69];
	m_A48 += go[70];
	double RHS18 = Idr[66];
	RHS18 += Idr[67];
	RHS18 += Idr[68];
	RHS18 += Idr[69];
	RHS18 += Idr[70];
	RHS18 += Idr[71];
	RHS18 -= go[71] * *cnV[71];
	m_A59 += gt[72];
	m_A59 += gt[73];
	m_A57 += go[72];
	m_A62 += go[73];
	double RHS19 = Idr[72];
	RHS19 += Idr[73];
	m_A66 += gt[74];
	m_A66 += gt[75];
	m_A66 += gt[76];
	m_A66 += gt[77];
	m_A66 += gt[78];
	m_A66 += gt[79];
	m_A63 += go[74];
	m_A64 += go[75];
	m_A68 += go[76];
	m_A67 += go[77];
	double RHS20 = Idr[74];
	RHS20 += Idr[75];
	RHS20 += Idr[76];
	RHS20 += Idr[77];
	RHS20 += Idr[78];
	RHS20 += Idr[79];
	RHS20 -= go[78] * *cnV[78];
	RHS20 -= go[79] * *cnV[79];
	m_A73 += gt[80];
	m_A73 += gt[81];
	m_A73 += gt[82];
	m_A73 += gt[83];
	m_A72 += go[80];
	m_A71 += go[81];
	m_A69 += go[82];
	m_A70 += go[83];
	double RHS21 = Idr[80];
	RHS21 += Idr[81];
	RHS21 += Idr[82];
	RHS21 += Idr[83];
	m_A80 += gt[84];
	m_A80 += gt[85];
	m_A80 += gt[86];
	m_A80 += gt[87];
	m_A80 += gt[88];
	m_A80 += gt[89];
	m_A80 += gt[90];
	m_A80 += gt[91];
	m_A80 += gt[92];
	m_A80 += gt[93];
	m_A80 += gt[94];
	m_A75 += go[84];
	m_A82 += go[85];
	m_A76 += go[86];
	double RHS22 = Idr[84];
	RHS22 += Idr[85];
	RHS22 += Idr[86];
	RHS22 += Idr[87];
	RHS22 += Idr[88];
	RHS22 += Idr[89];
	RHS22 += Idr[90];
	RHS22 += Idr[91];
	RHS22 += Idr[92];
	RHS22 += Idr[93];
	RHS22 += Idr[94];
	RHS22 -= go[87] * *cnV[87];
	RHS22 -= go[88] * *cnV[88];
	RHS22 -= go[89] * *cnV[89];
	RHS22 -= go[90] * *cnV[90];
	RHS22 -= go[91] * *cnV[91];
	RHS22 -= go[92] * *cnV[92];
	RHS22 -= go[93] * *cnV[93];
	RHS22 -= go[94] * *cnV[94];
	m_A88 += gt[95];
	m_A88 += gt[96];
	m_A88 += gt[97];
	m_A88 += gt[98];
	m_A88 += gt[99];
	m_A83 += go[95];
	m_A85 += go[96];
	m_A84 += go[97];
	m_A86 += go[98];
	double RHS23 = Idr[95];
	RHS23 += Idr[96];
	RHS23 += Idr[97];
	RHS23 += Idr[98];
	RHS23 += Idr[99];
	RHS23 -= go[99] * *cnV[99];
	m_A94 += gt[100];
	m_A94 += gt[101];
	m_A94 += gt[102];
	m_A91 += go[100];
	m_A89 += go[101];
	m_A92 += go[102];
	double RHS24 = Idr[100];
	RHS24 += Idr[101];
	RHS24 += Idr[102];
	const double f0 = 1.0 / m_A0;
	const double f0_15 = -f0 * m_A38;
	m_A40 += m_A1 * f0_15;
	RHS15 += f0_15 * RHS0;
	const double f0_21 = -f0 * m_A69;
	m_A73 += m_A1 * f0_21;
	RHS21 += f0_21 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_20 = -f1 * m_A63;
	m_A65 += m_A3 * f1_20;
	RHS20 += f1_20 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_16 = -f2 * m_A41;
	m_A43 += m_A5 * f2_16;
	RHS16 += f2_16 * RHS2;
	const double f2_18 = -f2 * m_A47;
	m_A52 += m_A5 * f2_18;
	RHS18 += f2_18 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_22 = -f3 * m_A75;
	m_A77 += m_A7 * f3_22;
	RHS22 += f3_22 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_14 = -f4 * m_A32;
	m_A37 += m_A9 * f4_14;
	RHS14 += f4_14 * RHS4;
	const double f4_21 = -f4 * m_A70;
	m_A71 += m_A9 * f4_21;
	RHS21 += f4_21 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_17 = -f5 * m_A44;
	m_A45 += m_A11 * f5_17;
	RHS17 += f5_17 * RHS5;
	const double f5_18 = -f5 * m_A48;
	m_A51 += m_A11 * f5_18;
	RHS18 += f5_18 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_14 = -f6 * m_A33;
	m_A37 += m_A13 * f6_14;
	RHS14 += f6_14 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_14 = -f7 * m_A34;
	m_A37 += m_A15 * f7_14;
	RHS14 += f7_14 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_23 = -f8 * m_A83;
	m_A88 += m_A17 * f8_23;
	RHS23 += f8_23 * RHS8;
	const double f9 = 1.0 / m_A18;
	const double f9_14 = -f9 * m_A35;
	m_A37 += m_A19 * f9_14;
	RHS14 += f9_14 * RHS9;
	const double f10 = 1.0 / m_A20;
	const double f10_20 = -f10 * m_A64;
	m_A66 += m_A21 * f10_20;
	m_A68 += m_A22 * f10_20;
	RHS20 += f10_20 * RHS10;
	const double f10_23 = -f10 * m_A84;
	m_A86 += m_A21 * f10_23;
	m_A88 += m_A22 * f10_23;
	RHS23 += f10_23 * RHS10;
	const double f11 = 1.0 / m_A23;
	const double f11_14 = -f11 * m_A36;
	m_A37 += m_A24 * f11_14;
	RHS14 += f11_14 * RHS11;
	const double f12 = 1.0 / m_A25;
	const double f12_18 = -f12 * m_A49;
	m_A52 += m_A26 * f12_18;
	m_A53 += m_A27 * f12_18;
	m_A56 += m_A28 * f12_18;
	RHS18 += f12_18 * RHS12;
	const double f12_19 = -f12 * m_A57;
	m_A58 += m_A26 * f12_19;
	m_A59 += m_A27 * f12_19;
	m_A62 += m_A28 * f12_19;
	RHS19 += f12_19 * RHS12;
	const double f12_24 = -f12 * m_A89;
	m_A90 += m_A26 * f12_24;
	m_A91 += m_A27 * f12_24;
	m_A94 += m_A28 * f12_24;
	RHS24 += f12_24 * RHS12;
	const double f13 = 1.0 / m_A29;
	const double f13_18 = -f13 * m_A50;
	m_A52 += m_A30 * f13_18;
	m_A54 += m_A31 * f13_18;
	RHS18 += f13_18 * RHS13;
	const double f13_22 = -f13 * m_A76;
	m_A78 += m_A30 * f13_22;
	m_A80 += m_A31 * f13_22;
	RHS22 += f13_22 * RHS13;
	const double f14 = 1.0 / m_A37;
	const double f14_21 = -f14 * m_A71;
	RHS21 += f14_21 * RHS14;
	const double f15 = 1.0 / m_A39;
	const double f15_20 = -f15 * m_A65;
	m_A67 += m_A40 * f15_20;
	RHS20 += f15_20 * RHS15;
	const double f16 = 1.0 / m_A42;
	const double f16_22 = -f16 * m_A77;
	m_A78 += m_A43 * f16_22;
	RHS22 += f16_22 * RHS16;
	const double f17 = 1.0 / m_A45;
	const double f17_18 = -f17 * m_A51;
	m_A55 += m_A46 * f17_18;
	RHS18 += f17_18 * RHS17;
	const double f17_23 = -f17 * m_A85;
	m_A88 += m_A46 * f17_23;
	RHS23 += f17_23 * RHS17;
	const double f18 = 1.0 / m_A52;
	const double f18_19 = -f18 * m_A58;
	m_A59 += m_A53 * f18_19;
	m_A60 += m_A54 * f18_19;
	m_A61 += m_A55 * f18_19;
	m_A62 += m_A56 * f18_19;
	RHS19 += f18_19 * RHS18;
	const double f18_22 = -f18 * m_A78;
	m_A79 += m_A53 * f18_22;
	m_A80 += m_A54 * f18_22;
	m_A81 += m_A55 * f18_22;
	m_A82 += m_A56 * f18_22;
	RHS22 += f18_22 * RHS18;
	const double f18_24 = -f18 * m_A90;
	m_A91 += m_A53 * f18_24;
	m_A92 += m_A54 * f18_24;
	m_A93 += m_A55 * f18_24;
	m_A94 += m_A56 * f18_24;
	RHS24 += f18_24 * RHS18;
	const double f19 = 1.0 / m_A59;
	const double f19_22 = -f19 * m_A79;
	m_A80 += m_A60 * f19_22;
	m_A81 += m_A61 * f19_22;
	m_A82 += m_A62 * f19_22;
	RHS22 += f19_22 * RHS19;
	const double f19_24 = -f19 * m_A91;
	m_A92 += m_A60 * f19_24;
	m_A93 += m_A61 * f19_24;
	m_A94 += m_A62 * f19_24;
	RHS24 += f19_24 * RHS19;
	const double f20 = 1.0 / m_A66;
	const double f20_21 = -f20 * m_A72;
	m_A73 += m_A67 * f20_21;
	m_A74 += m_A68 * f20_21;
	RHS21 += f20_21 * RHS20;
	const double f20_23 = -f20 * m_A86;
	m_A87 += m_A67 * f20_23;
	m_A88 += m_A68 * f20_23;
	RHS23 += f20_23 * RHS20;
	const double f21 = 1.0 / m_A73;
	const double f21_23 = -f21 * m_A87;
	m_A88 += m_A74 * f21_23;
	RHS23 += f21_23 * RHS21;
	const double f22 = 1.0 / m_A80;
	const double f22_24 = -f22 * m_A92;
	m_A93 += m_A81 * f22_24;
	m_A94 += m_A82 * f22_24;
	RHS24 += f22_24 * RHS22;
	const double f23 = 1.0 / m_A88;
	const double f23_24 = -f23 * m_A93;
	RHS24 += f23_24 * RHS23;
	V[24] = RHS24 / m_A94;
	double tmp23 = 0.0;
	V[23] = (RHS23 - tmp23) / m_A88;
	double tmp22 = 0.0;
	tmp22 += m_A81 * V[23];
	tmp22 += m_A82 * V[24];
	V[22] = (RHS22 - tmp22) / m_A80;
	double tmp21 = 0.0;
	tmp21 += m_A74 * V[23];
	V[21] = (RHS21 - tmp21) / m_A73;
	double tmp20 = 0.0;
	tmp20 += m_A67 * V[21];
	tmp20 += m_A68 * V[23];
	V[20] = (RHS20 - tmp20) / m_A66;
	double tmp19 = 0.0;
	tmp19 += m_A60 * V[22];
	tmp19 += m_A61 * V[23];
	tmp19 += m_A62 * V[24];
	V[19] = (RHS19 - tmp19) / m_A59;
	double tmp18 = 0.0;
	tmp18 += m_A53 * V[19];
	tmp18 += m_A54 * V[22];
	tmp18 += m_A55 * V[23];
	tmp18 += m_A56 * V[24];
	V[18] = (RHS18 - tmp18) / m_A52;
	double tmp17 = 0.0;
	tmp17 += m_A46 * V[23];
	V[17] = (RHS17 - tmp17) / m_A45;
	double tmp16 = 0.0;
	tmp16 += m_A43 * V[18];
	V[16] = (RHS16 - tmp16) / m_A42;
	double tmp15 = 0.0;
	tmp15 += m_A40 * V[21];
	V[15] = (RHS15 - tmp15) / m_A39;
	double tmp14 = 0.0;
	V[14] = (RHS14 - tmp14) / m_A37;
	double tmp13 = 0.0;
	tmp13 += m_A30 * V[18];
	tmp13 += m_A31 * V[22];
	V[13] = (RHS13 - tmp13) / m_A29;
	double tmp12 = 0.0;
	tmp12 += m_A26 * V[18];
	tmp12 += m_A27 * V[19];
	tmp12 += m_A28 * V[24];
	V[12] = (RHS12 - tmp12) / m_A25;
	double tmp11 = 0.0;
	tmp11 += m_A24 * V[14];
	V[11] = (RHS11 - tmp11) / m_A23;
	double tmp10 = 0.0;
	tmp10 += m_A21 * V[20];
	tmp10 += m_A22 * V[23];
	V[10] = (RHS10 - tmp10) / m_A20;
	double tmp9 = 0.0;
	tmp9 += m_A19 * V[14];
	V[9] = (RHS9 - tmp9) / m_A18;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[23];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[14];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[14];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[17];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[14];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[16];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[18];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[15];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[21];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// zac1b11142
static void nl_gcr_287a160e7c36b5b0_96_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A5 += go[9];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[10] * *cnV[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A6 += gt[17];
	m_A7 += go[11];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	RHS3 -= go[17] * *cnV[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A8 += gt[22];
	m_A8 += gt[23];
	m_A8 += gt[24];
	m_A9 += go[18];
	double RHS4 = Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	RHS4 -= go[22] * *cnV[22];
	RHS4 -= go[23] * *cnV[23];
	RHS4 -= go[24] * *cnV[24];
	m_A10 += gt[25];
	m_A10 += gt[26];
	m_A10 += gt[27];
	m_A10 += gt[28];
	m_A10 += gt[29];
	m_A11 += go[25];
	m_A12 += go[26];
	double RHS5 = Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 -= go[27] * *cnV[27];
	RHS5 -= go[28] * *cnV[28];
	RHS5 -= go[29] * *cnV[29];
	m_A13 += gt[30];
	m_A13 += gt[31];
	m_A13 += gt[32];
	m_A14 += go[30];
	double RHS6 = Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 -= go[31] * *cnV[31];
	RHS6 -= go[32] * *cnV[32];
	m_A15 += gt[33];
	m_A15 += gt[34];
	m_A16 += go[33];
	double RHS7 = Idr[33];
	RHS7 += Idr[34];
	RHS7 -= go[34] * *cnV[34];
	m_A17 += gt[35];
	m_A17 += gt[36];
	m_A17 += gt[37];
	m_A18 += go[35];
	double RHS8 = Idr[35];
	RHS8 += Idr[36];
	RHS8 += Idr[37];
	RHS8 -= go[36] * *cnV[36];
	RHS8 -= go[37] * *cnV[37];
	m_A20 += gt[38];
	m_A20 += gt[39];
	m_A19 += go[38];
	double RHS9 = Idr[38];
	RHS9 += Idr[39];
	RHS9 -= go[39] * *cnV[39];
	m_A21 += gt[40];
	m_A21 += gt[41];
	m_A21 += gt[42];
	m_A22 += go[40];
	double RHS10 = Idr[40];
	RHS10 += Idr[41];
	RHS10 += Idr[42];
	RHS10 -= go[41] * *cnV[41];
	RHS10 -= go[42] * *cnV[42];
	m_A23 += gt[43];
	m_A23 += gt[44];
	m_A23 += gt[45];
	m_A24 += go[43];
	m_A25 += go[44];
	double RHS11 = Idr[43];
	RHS11 += Idr[44];
	RHS11 += Idr[45];
	RHS11 -= go[45] * *cnV[45];
	m_A26 += gt[46];
	m_A26 += gt[47];
	m_A26 += gt[48];
	m_A27 += go[46];
	double RHS12 = Idr[46];
	RHS12 += Idr[47];
	RHS12 += Idr[48];
	RHS12 -= go[47] * *cnV[47];
	RHS12 -= go[48] * *cnV[48];
	m_A29 += gt[49];
	m_A29 += gt[50];
	m_A28 += go[49];
	double RHS13 = Idr[49];
	RHS13 += Idr[50];
	RHS13 -= go[50] * *cnV[50];
	m_A31 += gt[51];
	m_A31 += gt[52];
	m_A31 += gt[53];
	m_A31 += gt[54];
	m_A31 += gt[55];
	m_A30 += go[51];
	m_A33 += go[52];
	double RHS14 = Idr[51];
	RHS14 += Idr[52];
	RHS14 += Idr[53];
	RHS14 += Idr[54];
	RHS14 += Idr[55];
	RHS14 -= go[53] * *cnV[53];
	RHS14 -= go[54] * *cnV[54];
	RHS14 -= go[55] * *cnV[55];
	m_A35 += gt[56];
	m_A35 += gt[57];
	m_A35 += gt[58];
	m_A37 += go[56];
	m_A34 += go[57];
	double RHS15 = Idr[56];
	RHS15 += Idr[57];
	RHS15 += Idr[58];
	RHS15 -= go[58] * *cnV[58];
	m_A39 += gt[59];
	m_A39 += gt[60];
	m_A39 += gt[61];
	m_A39 += gt[62];
	m_A39 += gt[63];
	m_A38 += go[59];
	m_A41 += go[60];
	double RHS16 = Idr[59];
	RHS16 += Idr[60];
	RHS16 += Idr[61];
	RHS16 += Idr[62];
	RHS16 += Idr[63];
	RHS16 -= go[61] * *cnV[61];
	RHS16 -= go[62] * *cnV[62];
	RHS16 -= go[63] * *cnV[63];
	m_A44 += gt[64];
	m_A44 += gt[65];
	m_A43 += go[64];
	m_A42 += go[65];
	double RHS17 = Idr[64];
	RHS17 += Idr[65];
	m_A47 += gt[66];
	m_A47 += gt[67];
	m_A47 += gt[68];
	m_A48 += go[66];
	m_A45 += go[67];
	double RHS18 = Idr[66];
	RHS18 += Idr[67];
	RHS18 += Idr[68];
	RHS18 -= go[68] * *cnV[68];
	m_A51 += gt[69];
	m_A51 += gt[70];
	m_A51 += gt[71];
	m_A51 += gt[72];
	m_A52 += go[69];
	m_A50 += go[70];
	double RHS19 = Idr[69];
	RHS19 += Idr[70];
	RHS19 += Idr[71];
	RHS19 += Idr[72];
	RHS19 -= go[71] * *cnV[71];
	RHS19 -= go[72] * *cnV[72];
	m_A54 += gt[73];
	m_A54 += gt[74];
	m_A56 += go[73];
	m_A53 += go[74];
	double RHS20 = Idr[73];
	RHS20 += Idr[74];
	m_A58 += gt[75];
	m_A58 += gt[76];
	m_A58 += gt[77];
	m_A58 += gt[78];
	m_A59 += go[75];
	m_A57 += go[76];
	double RHS21 = Idr[75];
	RHS21 += Idr[76];
	RHS21 += Idr[77];
	RHS21 += Idr[78];
	RHS21 -= go[77] * *cnV[77];
	RHS21 -= go[78] * *cnV[78];
	m_A64 += gt[79];
	m_A64 += gt[80];
	m_A64 += gt[81];
	m_A64 += gt[82];
	m_A64 += gt[83];
	m_A64 += gt[84];
	m_A60 += go[79];
	m_A61 += go[80];
	m_A66 += go[81];
	m_A66 += go[82];
	double RHS22 = Idr[79];
	RHS22 += Idr[80];
	RHS22 += Idr[81];
	RHS22 += Idr[82];
	RHS22 += Idr[83];
	RHS22 += Idr[84];
	RHS22 -= go[83] * *cnV[83];
	RHS22 -= go[84] * *cnV[84];
	m_A73 += gt[85];
	m_A73 += gt[86];
	m_A73 += gt[87];
	m_A73 += gt[88];
	m_A73 += gt[89];
	m_A69 += go[85];
	m_A70 += go[86];
	m_A71 += go[87];
	m_A68 += go[88];
	m_A67 += go[89];
	double RHS23 = Idr[85];
	RHS23 += Idr[86];
	RHS23 += Idr[87];
	RHS23 += Idr[88];
	RHS23 += Idr[89];
	m_A76 += gt[90];
	m_A76 += gt[91];
	m_A76 += gt[92];
	m_A76 += gt[93];
	m_A77 += go[90];
	m_A75 += go[91];
	double RHS24 = Idr[90];
	RHS24 += Idr[91];
	RHS24 += Idr[92];
	RHS24 += Idr[93];
	RHS24 -= go[92] * *cnV[92];
	RHS24 -= go[93] * *cnV[93];
	m_A85 += gt[94];
	m_A85 += gt[95];
	m_A85 += gt[96];
	m_A85 += gt[97];
	m_A85 += gt[98];
	m_A81 += go[94];
	m_A80 += go[95];
	m_A82 += go[96];
	m_A79 += go[97];
	m_A78 += go[98];
	double RHS25 = Idr[94];
	RHS25 += Idr[95];
	RHS25 += Idr[96];
	RHS25 += Idr[97];
	RHS25 += Idr[98];
	m_A95 += gt[99];
	m_A95 += gt[100];
	m_A95 += gt[101];
	m_A95 += gt[102];
	m_A95 += gt[103];
	m_A95 += gt[104];
	m_A95 += gt[105];
	m_A95 += gt[106];
	m_A89 += go[99];
	m_A92 += go[100];
	m_A92 += go[101];
	m_A90 += go[102];
	m_A88 += go[103];
	m_A87 += go[104];
	double RHS26 = Idr[99];
	RHS26 += Idr[100];
	RHS26 += Idr[101];
	RHS26 += Idr[102];
	RHS26 += Idr[103];
	RHS26 += Idr[104];
	RHS26 += Idr[105];
	RHS26 += Idr[106];
	RHS26 -= go[105] * *cnV[105];
	RHS26 -= go[106] * *cnV[106];
	const double f0 = 1.0 / m_A0;
	const double f0_9 = -f0 * m_A19;
	m_A20 += m_A1 * f0_9;
	RHS9 += f0_9 * RHS0;
	const double f0_23 = -f0 * m_A67;
	m_A69 += m_A1 * f0_23;
	RHS23 += f0_23 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_16 = -f1 * m_A38;
	m_A40 += m_A3 * f1_16;
	RHS16 += f1_16 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_13 = -f2 * m_A28;
	m_A29 += m_A5 * f2_13;
	RHS13 += f2_13 * RHS2;
	const double f2_26 = -f2 * m_A87;
	m_A89 += m_A5 * f2_26;
	RHS26 += f2_26 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_22 = -f3 * m_A60;
	m_A63 += m_A7 * f3_22;
	RHS22 += f3_22 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_14 = -f4 * m_A30;
	m_A32 += m_A9 * f4_14;
	RHS14 += f4_14 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_15 = -f5 * m_A34;
	m_A35 += m_A11 * f5_15;
	m_A36 += m_A12 * f5_15;
	RHS15 += f5_15 * RHS5;
	const double f5_18 = -f5 * m_A45;
	m_A46 += m_A11 * f5_18;
	m_A47 += m_A12 * f5_18;
	RHS18 += f5_18 * RHS5;
	const double f6 = 1.0 / m_A13;
	const double f6_19 = -f6 * m_A50;
	m_A52 += m_A14 * f6_19;
	RHS19 += f6_19 * RHS6;
	const double f6_23 = -f6 * m_A68;
	m_A73 += m_A14 * f6_23;
	RHS23 += f6_23 * RHS6;
	const double f7 = 1.0 / m_A15;
	const double f7_17 = -f7 * m_A42;
	m_A44 += m_A16 * f7_17;
	RHS17 += f7_17 * RHS7;
	const double f7_25 = -f7 * m_A78;
	m_A81 += m_A16 * f7_25;
	RHS25 += f7_25 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_17 = -f8 * m_A43;
	m_A44 += m_A18 * f8_17;
	RHS17 += f8_17 * RHS8;
	const double f9 = 1.0 / m_A20;
	const double f9_23 = -f9 * m_A69;
	RHS23 += f9_23 * RHS9;
	const double f10 = 1.0 / m_A21;
	const double f10_21 = -f10 * m_A57;
	m_A59 += m_A22 * f10_21;
	RHS21 += f10_21 * RHS10;
	const double f10_26 = -f10 * m_A88;
	m_A95 += m_A22 * f10_26;
	RHS26 += f10_26 * RHS10;
	const double f11 = 1.0 / m_A23;
	const double f11_20 = -f11 * m_A53;
	m_A54 += m_A24 * f11_20;
	m_A55 += m_A25 * f11_20;
	RHS20 += f11_20 * RHS11;
	const double f11_22 = -f11 * m_A61;
	m_A62 += m_A24 * f11_22;
	m_A64 += m_A25 * f11_22;
	RHS22 += f11_22 * RHS11;
	const double f12 = 1.0 / m_A26;
	const double f12_24 = -f12 * m_A75;
	m_A77 += m_A27 * f12_24;
	RHS24 += f12_24 * RHS12;
	const double f12_25 = -f12 * m_A79;
	m_A85 += m_A27 * f12_25;
	RHS25 += f12_25 * RHS12;
	const double f13 = 1.0 / m_A29;
	const double f13_26 = -f13 * m_A89;
	RHS26 += f13_26 * RHS13;
	const double f14 = 1.0 / m_A31;
	const double f14_25 = -f14 * m_A80;
	m_A84 += m_A32 * f14_25;
	m_A85 += m_A33 * f14_25;
	RHS25 += f14_25 * RHS14;
	const double f15 = 1.0 / m_A35;
	const double f15_18 = -f15 * m_A46;
	m_A47 += m_A36 * f15_18;
	m_A49 += m_A37 * f15_18;
	RHS18 += f15_18 * RHS15;
	const double f15_26 = -f15 * m_A90;
	m_A91 += m_A36 * f15_26;
	m_A95 += m_A37 * f15_26;
	RHS26 += f15_26 * RHS15;
	const double f16 = 1.0 / m_A39;
	const double f16_23 = -f16 * m_A70;
	m_A72 += m_A40 * f16_23;
	m_A73 += m_A41 * f16_23;
	RHS23 += f16_23 * RHS16;
	const double f17 = 1.0 / m_A44;
	const double f17_25 = -f17 * m_A81;
	RHS25 += f17_25 * RHS17;
	const double f18 = 1.0 / m_A47;
	const double f18_23 = -f18 * m_A71;
	m_A73 += m_A48 * f18_23;
	m_A74 += m_A49 * f18_23;
	RHS23 += f18_23 * RHS18;
	const double f18_26 = -f18 * m_A91;
	m_A93 += m_A48 * f18_26;
	m_A95 += m_A49 * f18_26;
	RHS26 += f18_26 * RHS18;
	const double f19 = 1.0 / m_A51;
	const double f19_23 = -f19 * m_A72;
	m_A73 += m_A52 * f19_23;
	RHS23 += f19_23 * RHS19;
	const double f20 = 1.0 / m_A54;
	const double f20_22 = -f20 * m_A62;
	m_A64 += m_A55 * f20_22;
	m_A65 += m_A56 * f20_22;
	RHS22 += f20_22 * RHS20;
	const double f20_25 = -f20 * m_A82;
	m_A83 += m_A55 * f20_25;
	m_A85 += m_A56 * f20_25;
	RHS25 += f20_25 * RHS20;
	const double f21 = 1.0 / m_A58;
	const double f21_22 = -f21 * m_A63;
	m_A66 += m_A59 * f21_22;
	RHS22 += f21_22 * RHS21;
	const double f22 = 1.0 / m_A64;
	const double f22_25 = -f22 * m_A83;
	m_A85 += m_A65 * f22_25;
	m_A86 += m_A66 * f22_25;
	RHS25 += f22_25 * RHS22;
	const double f22_26 = -f22 * m_A92;
	m_A94 += m_A65 * f22_26;
	m_A95 += m_A66 * f22_26;
	RHS26 += f22_26 * RHS22;
	const double f23 = 1.0 / m_A73;
	const double f23_26 = -f23 * m_A93;
	m_A95 += m_A74 * f23_26;
	RHS26 += f23_26 * RHS23;
	const double f24 = 1.0 / m_A76;
	const double f24_25 = -f24 * m_A84;
	m_A85 += m_A77 * f24_25;
	RHS25 += f24_25 * RHS24;
	const double f25 = 1.0 / m_A85;
	const double f25_26 = -f25 * m_A94;
	m_A95 += m_A86 * f25_26;
	RHS26 += f25_26 * RHS25;
	V[26] = RHS26 / m_A95;
	double tmp25 = 0.0;
	tmp25 += m_A86 * V[26];
	V[25] = (RHS25 - tmp25) / m_A85;
	double tmp24 = 0.0;
	tmp24 += m_A77 * V[25];
	V[24] = (RHS24 - tmp24) / m_A76;
	double tmp23 = 0.0;
	tmp23 += m_A74 * V[26];
	V[23] = (RHS23 - tmp23) / m_A73;
	double tmp22 = 0.0;
	tmp22 += m_A65 * V[25];
	tmp22 += m_A66 * V[26];
	V[22] = (RHS22 - tmp22) / m_A64;
	double tmp21 = 0.0;
	tmp21 += m_A59 * V[26];
	V[21] = (RHS21 - tmp21) / m_A58;
	double tmp20 = 0.0;
	tmp20 += m_A55 * V[22];
	tmp20 += m_A56 * V[25];
	V[20] = (RHS20 - tmp20) / m_A54;
	double tmp19 = 0.0;
	tmp19 += m_A52 * V[23];
	V[19] = (RHS19 - tmp19) / m_A51;
	double tmp18 = 0.0;
	tmp18 += m_A48 * V[23];
	tmp18 += m_A49 * V[26];
	V[18] = (RHS18 - tmp18) / m_A47;
	double tmp17 = 0.0;
	V[17] = (RHS17 - tmp17) / m_A44;
	double tmp16 = 0.0;
	tmp16 += m_A40 * V[19];
	tmp16 += m_A41 * V[23];
	V[16] = (RHS16 - tmp16) / m_A39;
	double tmp15 = 0.0;
	tmp15 += m_A36 * V[18];
	tmp15 += m_A37 * V[26];
	V[15] = (RHS15 - tmp15) / m_A35;
	double tmp14 = 0.0;
	tmp14 += m_A32 * V[24];
	tmp14 += m_A33 * V[25];
	V[14] = (RHS14 - tmp14) / m_A31;
	double tmp13 = 0.0;
	V[13] = (RHS13 - tmp13) / m_A29;
	double tmp12 = 0.0;
	tmp12 += m_A27 * V[25];
	V[12] = (RHS12 - tmp12) / m_A26;
	double tmp11 = 0.0;
	tmp11 += m_A24 * V[20];
	tmp11 += m_A25 * V[22];
	V[11] = (RHS11 - tmp11) / m_A23;
	double tmp10 = 0.0;
	tmp10 += m_A22 * V[26];
	V[10] = (RHS10 - tmp10) / m_A21;
	double tmp9 = 0.0;
	V[9] = (RHS9 - tmp9) / m_A20;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[17];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A16 * V[17];
	V[7] = (RHS7 - tmp7) / m_A15;
	double tmp6 = 0.0;
	tmp6 += m_A14 * V[23];
	V[6] = (RHS6 - tmp6) / m_A13;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[15];
	tmp5 += m_A12 * V[18];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[24];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[21];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[13];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[19];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[9];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// kidniki
static void nl_gcr_294dde1e0ecca6d0_37_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A2 += go[0];
	m_A2 += go[1];
	m_A1 += go[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[3] * *cnV[3];
	m_A3 += gt[4];
	m_A3 += gt[5];
	m_A3 += gt[6];
	m_A5 += go[4];
	m_A4 += go[5];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A7 += go[7];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	m_A8 += gt[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A11 += go[11];
	m_A9 += go[12];
	m_A10 += go[13];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[14] * *cnV[14];
	m_A14 += gt[15];
	m_A14 += gt[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A13 += go[15];
	m_A16 += go[16];
	m_A16 += go[17];
	m_A16 += go[18];
	m_A12 += go[19];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	m_A20 += gt[22];
	m_A20 += gt[23];
	m_A20 += gt[24];
	m_A17 += go[22];
	m_A18 += go[23];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 -= go[24] * *cnV[24];
	m_A24 += gt[25];
	m_A24 += gt[26];
	m_A24 += gt[27];
	m_A25 += go[25];
	m_A23 += go[26];
	double RHS6 = Idr[25];
	RHS6 += Idr[26];
	RHS6 += Idr[27];
	RHS6 -= go[27] * *cnV[27];
	m_A30 += gt[28];
	m_A30 += gt[29];
	m_A30 += gt[30];
	m_A30 += gt[31];
	m_A30 += gt[32];
	m_A30 += gt[33];
	m_A27 += go[28];
	m_A28 += go[29];
	m_A28 += go[30];
	m_A28 += go[31];
	m_A26 += go[32];
	m_A26 += go[33];
	double RHS7 = Idr[28];
	RHS7 += Idr[29];
	RHS7 += Idr[30];
	RHS7 += Idr[31];
	RHS7 += Idr[32];
	RHS7 += Idr[33];
	m_A36 += gt[34];
	m_A36 += gt[35];
	m_A34 += go[34];
	m_A32 += go[35];
	double RHS8 = Idr[34];
	RHS8 += Idr[35];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A12;
	m_A14 += m_A1 * f0_4;
	m_A16 += m_A2 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f0_7 = -f0 * m_A26;
	m_A28 += m_A1 * f0_7;
	m_A30 += m_A2 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_4 = -f1 * m_A13;
	m_A14 += m_A4 * f1_4;
	m_A15 += m_A5 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f1_5 = -f1 * m_A17;
	m_A19 += m_A4 * f1_5;
	m_A20 += m_A5 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_6 = -f2 * m_A23;
	m_A24 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_5 = -f3 * m_A18;
	m_A20 += m_A9 * f3_5;
	m_A21 += m_A10 * f3_5;
	m_A22 += m_A11 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f3_7 = -f3 * m_A27;
	m_A29 += m_A9 * f3_7;
	m_A30 += m_A10 * f3_7;
	m_A31 += m_A11 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f3_8 = -f3 * m_A32;
	m_A33 += m_A9 * f3_8;
	m_A35 += m_A10 * f3_8;
	m_A36 += m_A11 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A14;
	const double f4_5 = -f4 * m_A19;
	m_A20 += m_A15 * f4_5;
	m_A21 += m_A16 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f4_7 = -f4 * m_A28;
	m_A29 += m_A15 * f4_7;
	m_A30 += m_A16 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f5 = 1.0 / m_A20;
	const double f5_7 = -f5 * m_A29;
	m_A30 += m_A21 * f5_7;
	m_A31 += m_A22 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_8 = -f5 * m_A33;
	m_A35 += m_A21 * f5_8;
	m_A36 += m_A22 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A24;
	const double f6_8 = -f6 * m_A34;
	m_A36 += m_A25 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A30;
	const double f7_8 = -f7 * m_A35;
	m_A36 += m_A31 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A36;
	double tmp7 = 0.0;
	tmp7 += m_A31 * V[8];
	V[7] = (RHS7 - tmp7) / m_A30;
	double tmp6 = 0.0;
	tmp6 += m_A25 * V[8];
	V[6] = (RHS6 - tmp6) / m_A24;
	double tmp5 = 0.0;
	tmp5 += m_A21 * V[7];
	tmp5 += m_A22 * V[8];
	V[5] = (RHS5 - tmp5) / m_A20;
	double tmp4 = 0.0;
	tmp4 += m_A15 * V[5];
	tmp4 += m_A16 * V[7];
	V[4] = (RHS4 - tmp4) / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[5];
	tmp3 += m_A10 * V[7];
	tmp3 += m_A11 * V[8];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[6];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[4];
	tmp1 += m_A5 * V[5];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	tmp0 += m_A2 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_295cf2e2f3d489bf_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A4 += go[2];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A7 += go[6];
	m_A7 += go[7];
	m_A5 += go[8];
	m_A5 += go[9];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[10] * *cnV[10];
	m_A11 += gt[11];
	m_A11 += gt[12];
	m_A11 += gt[13];
	m_A11 += gt[14];
	m_A11 += gt[15];
	m_A10 += go[11];
	m_A10 += go[12];
	m_A9 += go[13];
	m_A8 += go[14];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[15] * *cnV[15];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A11 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	m_A7 += m_A4 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_2f84bc98d737730b_22_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A3 += go[6];
	double RHS1 = Idr[6];
	RHS1 += Idr[7];
	RHS1 -= go[7] * *cnV[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A4 += gt[13];
	m_A4 += gt[14];
	m_A4 += gt[15];
	m_A7 += go[8];
	m_A6 += go[9];
	m_A6 += go[10];
	m_A5 += go[11];
	m_A5 += go[12];
	double RHS2 = Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 += Idr[15];
	RHS2 -= go[13] * *cnV[13];
	RHS2 -= go[14] * *cnV[14];
	RHS2 -= go[15] * *cnV[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A10 += gt[20];
	m_A8 += go[16];
	m_A9 += go[17];
	m_A9 += go[18];
	double RHS3 = Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 += Idr[20];
	RHS3 -= go[19] * *cnV[19];
	RHS3 -= go[20] * *cnV[20];
	m_A15 += gt[21];
	m_A15 += gt[22];
	m_A15 += gt[23];
	m_A15 += gt[24];
	m_A15 += gt[25];
	m_A16 += go[21];
	m_A16 += go[22];
	m_A13 += go[23];
	m_A13 += go[24];
	double RHS4 = Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 += Idr[25];
	RHS4 -= go[25] * *cnV[25];
	m_A21 += gt[26];
	m_A21 += gt[27];
	m_A21 += gt[28];
	m_A21 += gt[29];
	m_A21 += gt[30];
	m_A20 += go[26];
	m_A20 += go[27];
	m_A18 += go[28];
	m_A17 += go[29];
	double RHS5 = Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 += Idr[30];
	RHS5 -= go[30] * *cnV[30];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A17;
	m_A21 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A9;
	m_A10 += m_A5 * f2_3;
	m_A11 += m_A6 * f2_3;
	m_A12 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	const double f2_4 = -f2 * m_A13;
	m_A14 += m_A5 * f2_4;
	m_A15 += m_A6 * f2_4;
	m_A16 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A18;
	m_A19 += m_A5 * f2_5;
	m_A20 += m_A6 * f2_5;
	m_A21 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_4 = -f3 * m_A14;
	m_A15 += m_A11 * f3_4;
	m_A16 += m_A12 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A19;
	m_A20 += m_A11 * f3_5;
	m_A21 += m_A12 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A15;
	const double f4_5 = -f4 * m_A20;
	m_A21 += m_A16 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A21;
	double tmp4 = 0.0;
	tmp4 += m_A16 * V[5];
	V[4] = (RHS4 - tmp4) / m_A15;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[4];
	tmp3 += m_A12 * V[5];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// solarq
static void nl_gcr_34e910fc1896999f_76_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A2 += gt[11];
	m_A5 += go[4];
	m_A4 += go[5];
	m_A4 += go[6];
	m_A3 += go[7];
	m_A3 += go[8];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A7 += go[12];
	double RHS2 = Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 += Idr[15];
	RHS2 -= go[13] * *cnV[13];
	RHS2 -= go[14] * *cnV[14];
	RHS2 -= go[15] * *cnV[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A8 += gt[22];
	m_A8 += gt[23];
	m_A11 += go[16];
	m_A10 += go[17];
	m_A10 += go[18];
	m_A9 += go[19];
	m_A9 += go[20];
	double RHS3 = Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 += Idr[20];
	RHS3 += Idr[21];
	RHS3 += Idr[22];
	RHS3 += Idr[23];
	RHS3 -= go[21] * *cnV[21];
	RHS3 -= go[22] * *cnV[22];
	RHS3 -= go[23] * *cnV[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A12 += gt[26];
	m_A13 += go[24];
	m_A14 += go[25];
	double RHS4 = Idr[24];
	RHS4 += Idr[25];
	RHS4 += Idr[26];
	RHS4 -= go[26] * *cnV[26];
	m_A15 += gt[27];
	m_A15 += gt[28];
	m_A15 += gt[29];
	m_A15 += gt[30];
	m_A16 += go[27];
	double RHS5 = Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 += Idr[30];
	RHS5 -= go[28] * *cnV[28];
	RHS5 -= go[29] * *cnV[29];
	RHS5 -= go[30] * *cnV[30];
	m_A17 += gt[31];
	m_A17 += gt[32];
	m_A17 += gt[33];
	m_A17 += gt[34];
	m_A17 += gt[35];
	m_A17 += gt[36];
	m_A17 += gt[37];
	m_A17 += gt[38];
	m_A20 += go[31];
	m_A19 += go[32];
	m_A19 += go[33];
	m_A18 += go[34];
	m_A18 += go[35];
	double RHS6 = Idr[31];
	RHS6 += Idr[32];
	RHS6 += Idr[33];
	RHS6 += Idr[34];
	RHS6 += Idr[35];
	RHS6 += Idr[36];
	RHS6 += Idr[37];
	RHS6 += Idr[38];
	RHS6 -= go[36] * *cnV[36];
	RHS6 -= go[37] * *cnV[37];
	RHS6 -= go[38] * *cnV[38];
	m_A21 += gt[39];
	m_A21 += gt[40];
	m_A21 += gt[41];
	m_A23 += go[39];
	m_A22 += go[40];
	double RHS7 = Idr[39];
	RHS7 += Idr[40];
	RHS7 += Idr[41];
	RHS7 -= go[41] * *cnV[41];
	m_A26 += gt[42];
	m_A26 += gt[43];
	m_A26 += gt[44];
	m_A26 += gt[45];
	m_A26 += gt[46];
	m_A26 += gt[47];
	m_A25 += go[42];
	m_A25 += go[43];
	m_A24 += go[44];
	double RHS8 = Idr[42];
	RHS8 += Idr[43];
	RHS8 += Idr[44];
	RHS8 += Idr[45];
	RHS8 += Idr[46];
	RHS8 += Idr[47];
	RHS8 -= go[45] * *cnV[45];
	RHS8 -= go[46] * *cnV[46];
	RHS8 -= go[47] * *cnV[47];
	m_A31 += gt[48];
	m_A31 += gt[49];
	m_A31 += gt[50];
	m_A31 += gt[51];
	m_A31 += gt[52];
	m_A32 += go[48];
	m_A32 += go[49];
	m_A29 += go[50];
	m_A29 += go[51];
	double RHS9 = Idr[48];
	RHS9 += Idr[49];
	RHS9 += Idr[50];
	RHS9 += Idr[51];
	RHS9 += Idr[52];
	RHS9 -= go[52] * *cnV[52];
	m_A35 += gt[53];
	m_A35 += gt[54];
	m_A35 += gt[55];
	m_A35 += gt[56];
	m_A35 += gt[57];
	m_A35 += gt[58];
	m_A34 += go[53];
	m_A34 += go[54];
	m_A33 += go[55];
	double RHS10 = Idr[53];
	RHS10 += Idr[54];
	RHS10 += Idr[55];
	RHS10 += Idr[56];
	RHS10 += Idr[57];
	RHS10 += Idr[58];
	RHS10 -= go[56] * *cnV[56];
	RHS10 -= go[57] * *cnV[57];
	RHS10 -= go[58] * *cnV[58];
	m_A40 += gt[59];
	m_A40 += gt[60];
	m_A40 += gt[61];
	m_A40 += gt[62];
	m_A40 += gt[63];
	m_A40 += gt[64];
	m_A39 += go[59];
	m_A39 += go[60];
	m_A38 += go[61];
	double RHS11 = Idr[59];
	RHS11 += Idr[60];
	RHS11 += Idr[61];
	RHS11 += Idr[62];
	RHS11 += Idr[63];
	RHS11 += Idr[64];
	RHS11 -= go[62] * *cnV[62];
	RHS11 -= go[63] * *cnV[63];
	RHS11 -= go[64] * *cnV[64];
	m_A45 += gt[65];
	m_A45 += gt[66];
	m_A45 += gt[67];
	m_A45 += gt[68];
	m_A45 += gt[69];
	m_A46 += go[65];
	m_A46 += go[66];
	m_A43 += go[67];
	m_A43 += go[68];
	double RHS12 = Idr[65];
	RHS12 += Idr[66];
	RHS12 += Idr[67];
	RHS12 += Idr[68];
	RHS12 += Idr[69];
	RHS12 -= go[69] * *cnV[69];
	m_A49 += gt[70];
	m_A49 += gt[71];
	m_A49 += gt[72];
	m_A49 += gt[73];
	m_A49 += gt[74];
	m_A50 += go[70];
	m_A50 += go[71];
	m_A47 += go[72];
	m_A47 += go[73];
	double RHS13 = Idr[70];
	RHS13 += Idr[71];
	RHS13 += Idr[72];
	RHS13 += Idr[73];
	RHS13 += Idr[74];
	RHS13 -= go[74] * *cnV[74];
	m_A55 += gt[75];
	m_A55 += gt[76];
	m_A55 += gt[77];
	m_A55 += gt[78];
	m_A52 += go[75];
	m_A54 += go[76];
	m_A54 += go[77];
	m_A51 += go[78];
	double RHS14 = Idr[75];
	RHS14 += Idr[76];
	RHS14 += Idr[77];
	RHS14 += Idr[78];
	m_A60 += gt[79];
	m_A60 += gt[80];
	m_A60 += gt[81];
	m_A60 += gt[82];
	m_A58 += go[79];
	m_A57 += go[80];
	m_A62 += go[81];
	double RHS15 = Idr[79];
	RHS15 += Idr[80];
	RHS15 += Idr[81];
	RHS15 += Idr[82];
	RHS15 -= go[82] * *cnV[82];
	m_A68 += gt[83];
	m_A68 += gt[84];
	m_A68 += gt[85];
	m_A68 += gt[86];
	m_A64 += go[83];
	m_A66 += go[84];
	m_A66 += go[85];
	m_A63 += go[86];
	double RHS16 = Idr[83];
	RHS16 += Idr[84];
	RHS16 += Idr[85];
	RHS16 += Idr[86];
	m_A75 += gt[87];
	m_A75 += gt[88];
	m_A75 += gt[89];
	m_A75 += gt[90];
	m_A75 += gt[91];
	m_A72 += go[87];
	m_A72 += go[88];
	m_A70 += go[89];
	m_A73 += go[90];
	double RHS17 = Idr[87];
	RHS17 += Idr[88];
	RHS17 += Idr[89];
	RHS17 += Idr[90];
	RHS17 += Idr[91];
	RHS17 -= go[91] * *cnV[91];
	const double f0 = 1.0 / m_A0;
	const double f0_8 = -f0 * m_A24;
	m_A26 += m_A1 * f0_8;
	RHS8 += f0_8 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_8 = -f1 * m_A25;
	m_A26 += m_A3 * f1_8;
	m_A27 += m_A4 * f1_8;
	m_A28 += m_A5 * f1_8;
	RHS8 += f1_8 * RHS1;
	const double f1_9 = -f1 * m_A29;
	m_A30 += m_A3 * f1_9;
	m_A31 += m_A4 * f1_9;
	m_A32 += m_A5 * f1_9;
	RHS9 += f1_9 * RHS1;
	const double f1_17 = -f1 * m_A70;
	m_A71 += m_A3 * f1_17;
	m_A72 += m_A4 * f1_17;
	m_A75 += m_A5 * f1_17;
	RHS17 += f1_17 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_10 = -f2 * m_A33;
	m_A35 += m_A7 * f2_10;
	RHS10 += f2_10 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_10 = -f3 * m_A34;
	m_A35 += m_A9 * f3_10;
	m_A36 += m_A10 * f3_10;
	m_A37 += m_A11 * f3_10;
	RHS10 += f3_10 * RHS3;
	const double f3_12 = -f3 * m_A43;
	m_A44 += m_A9 * f3_12;
	m_A45 += m_A10 * f3_12;
	m_A46 += m_A11 * f3_12;
	RHS12 += f3_12 * RHS3;
	const double f3_14 = -f3 * m_A51;
	m_A53 += m_A9 * f3_14;
	m_A54 += m_A10 * f3_14;
	m_A55 += m_A11 * f3_14;
	RHS14 += f3_14 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_14 = -f4 * m_A52;
	m_A55 += m_A13 * f4_14;
	m_A56 += m_A14 * f4_14;
	RHS14 += f4_14 * RHS4;
	const double f4_15 = -f4 * m_A57;
	m_A59 += m_A13 * f4_15;
	m_A60 += m_A14 * f4_15;
	RHS15 += f4_15 * RHS4;
	const double f5 = 1.0 / m_A15;
	const double f5_11 = -f5 * m_A38;
	m_A40 += m_A16 * f5_11;
	RHS11 += f5_11 * RHS5;
	const double f6 = 1.0 / m_A17;
	const double f6_11 = -f6 * m_A39;
	m_A40 += m_A18 * f6_11;
	m_A41 += m_A19 * f6_11;
	m_A42 += m_A20 * f6_11;
	RHS11 += f6_11 * RHS6;
	const double f6_13 = -f6 * m_A47;
	m_A48 += m_A18 * f6_13;
	m_A49 += m_A19 * f6_13;
	m_A50 += m_A20 * f6_13;
	RHS13 += f6_13 * RHS6;
	const double f6_16 = -f6 * m_A63;
	m_A65 += m_A18 * f6_16;
	m_A66 += m_A19 * f6_16;
	m_A68 += m_A20 * f6_16;
	RHS16 += f6_16 * RHS6;
	const double f7 = 1.0 / m_A21;
	const double f7_15 = -f7 * m_A58;
	m_A60 += m_A22 * f7_15;
	m_A61 += m_A23 * f7_15;
	RHS15 += f7_15 * RHS7;
	const double f7_16 = -f7 * m_A64;
	m_A67 += m_A22 * f7_16;
	m_A68 += m_A23 * f7_16;
	RHS16 += f7_16 * RHS7;
	const double f8 = 1.0 / m_A26;
	const double f8_9 = -f8 * m_A30;
	m_A31 += m_A27 * f8_9;
	m_A32 += m_A28 * f8_9;
	RHS9 += f8_9 * RHS8;
	const double f8_17 = -f8 * m_A71;
	m_A72 += m_A27 * f8_17;
	m_A75 += m_A28 * f8_17;
	RHS17 += f8_17 * RHS8;
	const double f9 = 1.0 / m_A31;
	const double f9_17 = -f9 * m_A72;
	m_A75 += m_A32 * f9_17;
	RHS17 += f9_17 * RHS9;
	const double f10 = 1.0 / m_A35;
	const double f10_12 = -f10 * m_A44;
	m_A45 += m_A36 * f10_12;
	m_A46 += m_A37 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f10_14 = -f10 * m_A53;
	m_A54 += m_A36 * f10_14;
	m_A55 += m_A37 * f10_14;
	RHS14 += f10_14 * RHS10;
	const double f11 = 1.0 / m_A40;
	const double f11_13 = -f11 * m_A48;
	m_A49 += m_A41 * f11_13;
	m_A50 += m_A42 * f11_13;
	RHS13 += f11_13 * RHS11;
	const double f11_16 = -f11 * m_A65;
	m_A66 += m_A41 * f11_16;
	m_A68 += m_A42 * f11_16;
	RHS16 += f11_16 * RHS11;
	const double f12 = 1.0 / m_A45;
	const double f12_14 = -f12 * m_A54;
	m_A55 += m_A46 * f12_14;
	RHS14 += f12_14 * RHS12;
	const double f13 = 1.0 / m_A49;
	const double f13_16 = -f13 * m_A66;
	m_A68 += m_A50 * f13_16;
	RHS16 += f13_16 * RHS13;
	const double f14 = 1.0 / m_A55;
	const double f14_15 = -f14 * m_A59;
	m_A60 += m_A56 * f14_15;
	RHS15 += f14_15 * RHS14;
	const double f15 = 1.0 / m_A60;
	const double f15_16 = -f15 * m_A67;
	m_A68 += m_A61 * f15_16;
	m_A69 += m_A62 * f15_16;
	RHS16 += f15_16 * RHS15;
	const double f15_17 = -f15 * m_A73;
	m_A74 += m_A61 * f15_17;
	m_A75 += m_A62 * f15_17;
	RHS17 += f15_17 * RHS15;
	const double f16 = 1.0 / m_A68;
	const double f16_17 = -f16 * m_A74;
	m_A75 += m_A69 * f16_17;
	RHS17 += f16_17 * RHS16;
	V[17] = RHS17 / m_A75;
	double tmp16 = 0.0;
	tmp16 += m_A69 * V[17];
	V[16] = (RHS16 - tmp16) / m_A68;
	double tmp15 = 0.0;
	tmp15 += m_A61 * V[16];
	tmp15 += m_A62 * V[17];
	V[15] = (RHS15 - tmp15) / m_A60;
	double tmp14 = 0.0;
	tmp14 += m_A56 * V[15];
	V[14] = (RHS14 - tmp14) / m_A55;
	double tmp13 = 0.0;
	tmp13 += m_A50 * V[16];
	V[13] = (RHS13 - tmp13) / m_A49;
	double tmp12 = 0.0;
	tmp12 += m_A46 * V[14];
	V[12] = (RHS12 - tmp12) / m_A45;
	double tmp11 = 0.0;
	tmp11 += m_A41 * V[13];
	tmp11 += m_A42 * V[16];
	V[11] = (RHS11 - tmp11) / m_A40;
	double tmp10 = 0.0;
	tmp10 += m_A36 * V[12];
	tmp10 += m_A37 * V[14];
	V[10] = (RHS10 - tmp10) / m_A35;
	double tmp9 = 0.0;
	tmp9 += m_A32 * V[17];
	V[9] = (RHS9 - tmp9) / m_A31;
	double tmp8 = 0.0;
	tmp8 += m_A27 * V[9];
	tmp8 += m_A28 * V[17];
	V[8] = (RHS8 - tmp8) / m_A26;
	double tmp7 = 0.0;
	tmp7 += m_A22 * V[15];
	tmp7 += m_A23 * V[16];
	V[7] = (RHS7 - tmp7) / m_A21;
	double tmp6 = 0.0;
	tmp6 += m_A18 * V[11];
	tmp6 += m_A19 * V[13];
	tmp6 += m_A20 * V[16];
	V[6] = (RHS6 - tmp6) / m_A17;
	double tmp5 = 0.0;
	tmp5 += m_A16 * V[11];
	V[5] = (RHS5 - tmp5) / m_A15;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[14];
	tmp4 += m_A14 * V[15];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[10];
	tmp3 += m_A10 * V[12];
	tmp3 += m_A11 * V[14];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[10];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[8];
	tmp1 += m_A4 * V[9];
	tmp1 += m_A5 * V[17];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[8];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// warrior
static void nl_gcr_42a31ce5c187b308_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A4 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	m_A7 += gt[5];
	m_A7 += gt[6];
	m_A7 += gt[7];
	m_A6 += go[5];
	m_A5 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[7] * *cnV[7];
	m_A11 += gt[8];
	m_A9 += go[8];
	double RHS3 = Idr[8];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A5;
	m_A7 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A6;
	m_A7 += m_A3 * f1_2;
	m_A8 += m_A4 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A7;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A8 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A8 * V[3];
	V[2] = (RHS2 - tmp2) / m_A7;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// 280zzzap
static void nl_gcr_42c57d523cac30d0_122_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	double m_A119(0.0);
	double m_A120(0.0);
	double m_A121(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 -= go[5] * *cnV[5];
	RHS2 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A7 += go[7];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[8] * *cnV[8];
	RHS3 -= go[9] * *cnV[9];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A9 += go[14];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 -= go[15] * *cnV[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A12 += go[16];
	m_A13 += go[17];
	m_A11 += go[18];
	double RHS5 = Idr[16];
	RHS5 += Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 -= go[19] * *cnV[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A14 += gt[24];
	m_A14 += gt[25];
	m_A14 += gt[26];
	m_A15 += go[20];
	double RHS6 = Idr[20];
	RHS6 += Idr[21];
	RHS6 += Idr[22];
	RHS6 += Idr[23];
	RHS6 += Idr[24];
	RHS6 += Idr[25];
	RHS6 += Idr[26];
	RHS6 -= go[21] * *cnV[21];
	RHS6 -= go[22] * *cnV[22];
	RHS6 -= go[23] * *cnV[23];
	RHS6 -= go[24] * *cnV[24];
	RHS6 -= go[25] * *cnV[25];
	RHS6 -= go[26] * *cnV[26];
	m_A16 += gt[27];
	m_A16 += gt[28];
	m_A18 += go[27];
	m_A17 += go[28];
	double RHS7 = Idr[27];
	RHS7 += Idr[28];
	m_A19 += gt[29];
	m_A19 += gt[30];
	m_A19 += gt[31];
	m_A20 += go[29];
	double RHS8 = Idr[29];
	RHS8 += Idr[30];
	RHS8 += Idr[31];
	RHS8 -= go[30] * *cnV[30];
	RHS8 -= go[31] * *cnV[31];
	m_A21 += gt[32];
	m_A21 += gt[33];
	m_A22 += go[32];
	double RHS9 = Idr[32];
	RHS9 += Idr[33];
	RHS9 -= go[33] * *cnV[33];
	m_A23 += gt[34];
	m_A23 += gt[35];
	m_A23 += gt[36];
	m_A24 += go[34];
	m_A25 += go[35];
	m_A25 += go[36];
	double RHS10 = Idr[34];
	RHS10 += Idr[35];
	RHS10 += Idr[36];
	m_A26 += gt[37];
	m_A26 += gt[38];
	m_A26 += gt[39];
	m_A26 += gt[40];
	m_A26 += gt[41];
	m_A26 += gt[42];
	m_A26 += gt[43];
	m_A27 += go[37];
	double RHS11 = Idr[37];
	RHS11 += Idr[38];
	RHS11 += Idr[39];
	RHS11 += Idr[40];
	RHS11 += Idr[41];
	RHS11 += Idr[42];
	RHS11 += Idr[43];
	RHS11 -= go[38] * *cnV[38];
	RHS11 -= go[39] * *cnV[39];
	RHS11 -= go[40] * *cnV[40];
	RHS11 -= go[41] * *cnV[41];
	RHS11 -= go[42] * *cnV[42];
	RHS11 -= go[43] * *cnV[43];
	m_A28 += gt[44];
	m_A28 += gt[45];
	m_A28 += gt[46];
	m_A29 += go[44];
	double RHS12 = Idr[44];
	RHS12 += Idr[45];
	RHS12 += Idr[46];
	RHS12 -= go[45] * *cnV[45];
	RHS12 -= go[46] * *cnV[46];
	m_A30 += gt[47];
	m_A30 += gt[48];
	m_A30 += gt[49];
	m_A30 += gt[50];
	m_A32 += go[47];
	m_A31 += go[48];
	m_A33 += go[49];
	double RHS13 = Idr[47];
	RHS13 += Idr[48];
	RHS13 += Idr[49];
	RHS13 += Idr[50];
	RHS13 -= go[50] * *cnV[50];
	m_A35 += gt[51];
	m_A35 += gt[52];
	m_A34 += go[51];
	double RHS14 = Idr[51];
	RHS14 += Idr[52];
	RHS14 -= go[52] * *cnV[52];
	m_A37 += gt[53];
	m_A37 += gt[54];
	m_A37 += gt[55];
	m_A37 += gt[56];
	m_A36 += go[53];
	m_A38 += go[54];
	double RHS15 = Idr[53];
	RHS15 += Idr[54];
	RHS15 += Idr[55];
	RHS15 += Idr[56];
	RHS15 -= go[55] * *cnV[55];
	RHS15 -= go[56] * *cnV[56];
	m_A40 += gt[57];
	m_A40 += gt[58];
	m_A39 += go[57];
	double RHS16 = Idr[57];
	RHS16 += Idr[58];
	RHS16 -= go[58] * *cnV[58];
	m_A43 += gt[59];
	m_A43 += gt[60];
	m_A41 += go[59];
	m_A42 += go[60];
	double RHS17 = Idr[59];
	RHS17 += Idr[60];
	m_A47 += gt[61];
	m_A47 += gt[62];
	m_A47 += gt[63];
	m_A47 += gt[64];
	m_A47 += gt[65];
	m_A46 += go[61];
	m_A49 += go[62];
	m_A50 += go[63];
	double RHS18 = Idr[61];
	RHS18 += Idr[62];
	RHS18 += Idr[63];
	RHS18 += Idr[64];
	RHS18 += Idr[65];
	RHS18 -= go[64] * *cnV[64];
	RHS18 -= go[65] * *cnV[65];
	m_A52 += gt[66];
	m_A52 += gt[67];
	m_A51 += go[66];
	double RHS19 = Idr[66];
	RHS19 += Idr[67];
	RHS19 -= go[67] * *cnV[67];
	m_A55 += gt[68];
	m_A55 += gt[69];
	m_A54 += go[68];
	m_A53 += go[69];
	double RHS20 = Idr[68];
	RHS20 += Idr[69];
	m_A60 += gt[70];
	m_A60 += gt[71];
	m_A60 += gt[72];
	m_A60 += gt[73];
	m_A59 += go[70];
	m_A61 += go[71];
	double RHS21 = Idr[70];
	RHS21 += Idr[71];
	RHS21 += Idr[72];
	RHS21 += Idr[73];
	RHS21 -= go[72] * *cnV[72];
	RHS21 -= go[73] * *cnV[73];
	m_A69 += gt[74];
	m_A69 += gt[75];
	m_A69 += gt[76];
	m_A69 += gt[77];
	m_A69 += gt[78];
	m_A69 += gt[79];
	m_A69 += gt[80];
	m_A69 += gt[81];
	m_A69 += gt[82];
	m_A62 += go[74];
	m_A65 += go[75];
	m_A65 += go[76];
	m_A64 += go[77];
	m_A63 += go[78];
	m_A71 += go[79];
	double RHS22 = Idr[74];
	RHS22 += Idr[75];
	RHS22 += Idr[76];
	RHS22 += Idr[77];
	RHS22 += Idr[78];
	RHS22 += Idr[79];
	RHS22 += Idr[80];
	RHS22 += Idr[81];
	RHS22 += Idr[82];
	RHS22 -= go[80] * *cnV[80];
	RHS22 -= go[81] * *cnV[81];
	RHS22 -= go[82] * *cnV[82];
	m_A75 += gt[83];
	m_A75 += gt[84];
	m_A75 += gt[85];
	m_A75 += gt[86];
	m_A74 += go[83];
	m_A76 += go[84];
	double RHS23 = Idr[83];
	RHS23 += Idr[84];
	RHS23 += Idr[85];
	RHS23 += Idr[86];
	RHS23 -= go[85] * *cnV[85];
	RHS23 -= go[86] * *cnV[86];
	m_A82 += gt[87];
	m_A82 += gt[88];
	m_A82 += gt[89];
	m_A82 += gt[90];
	m_A82 += gt[91];
	m_A82 += gt[92];
	m_A77 += go[87];
	m_A78 += go[88];
	m_A84 += go[89];
	double RHS24 = Idr[87];
	RHS24 += Idr[88];
	RHS24 += Idr[89];
	RHS24 += Idr[90];
	RHS24 += Idr[91];
	RHS24 += Idr[92];
	RHS24 -= go[90] * *cnV[90];
	RHS24 -= go[91] * *cnV[91];
	RHS24 -= go[92] * *cnV[92];
	m_A93 += gt[93];
	m_A93 += gt[94];
	m_A93 += gt[95];
	m_A93 += gt[96];
	m_A93 += gt[97];
	m_A91 += go[93];
	m_A89 += go[94];
	m_A88 += go[95];
	m_A87 += go[96];
	m_A86 += go[97];
	double RHS25 = Idr[93];
	RHS25 += Idr[94];
	RHS25 += Idr[95];
	RHS25 += Idr[96];
	RHS25 += Idr[97];
	m_A104 += gt[98];
	m_A104 += gt[99];
	m_A104 += gt[100];
	m_A104 += gt[101];
	m_A104 += gt[102];
	m_A102 += go[98];
	m_A99 += go[99];
	m_A98 += go[100];
	m_A97 += go[101];
	m_A96 += go[102];
	double RHS26 = Idr[98];
	RHS26 += Idr[99];
	RHS26 += Idr[100];
	RHS26 += Idr[101];
	RHS26 += Idr[102];
	m_A113 += gt[103];
	m_A113 += gt[104];
	m_A113 += gt[105];
	m_A113 += gt[106];
	m_A107 += go[103];
	m_A106 += go[104];
	m_A114 += go[105];
	double RHS27 = Idr[103];
	RHS27 += Idr[104];
	RHS27 += Idr[105];
	RHS27 += Idr[106];
	RHS27 -= go[106] * *cnV[106];
	m_A121 += gt[107];
	m_A121 += gt[108];
	m_A121 += gt[109];
	m_A121 += gt[110];
	m_A121 += gt[111];
	m_A118 += go[107];
	m_A117 += go[108];
	m_A120 += go[109];
	m_A116 += go[110];
	m_A115 += go[111];
	double RHS28 = Idr[107];
	RHS28 += Idr[108];
	RHS28 += Idr[109];
	RHS28 += Idr[110];
	RHS28 += Idr[111];
	const double f0 = 1.0 / m_A0;
	const double f0_17 = -f0 * m_A41;
	m_A43 += m_A1 * f0_17;
	RHS17 += f0_17 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_14 = -f1 * m_A34;
	m_A35 += m_A3 * f1_14;
	RHS14 += f1_14 * RHS1;
	const double f1_25 = -f1 * m_A86;
	m_A89 += m_A3 * f1_25;
	RHS25 += f1_25 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_15 = -f2 * m_A36;
	m_A38 += m_A5 * f2_15;
	RHS15 += f2_15 * RHS2;
	const double f2_25 = -f2 * m_A87;
	m_A93 += m_A5 * f2_25;
	RHS25 += f2_25 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_22 = -f3 * m_A62;
	m_A66 += m_A7 * f3_22;
	RHS22 += f3_22 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_16 = -f4 * m_A39;
	m_A40 += m_A9 * f4_16;
	RHS16 += f4_16 * RHS4;
	const double f4_28 = -f4 * m_A115;
	m_A117 += m_A9 * f4_28;
	RHS28 += f4_28 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_17 = -f5 * m_A42;
	m_A43 += m_A11 * f5_17;
	m_A44 += m_A12 * f5_17;
	m_A45 += m_A13 * f5_17;
	RHS17 += f5_17 * RHS5;
	const double f5_22 = -f5 * m_A63;
	m_A67 += m_A11 * f5_22;
	m_A69 += m_A12 * f5_22;
	m_A71 += m_A13 * f5_22;
	RHS22 += f5_22 * RHS5;
	const double f5_25 = -f5 * m_A88;
	m_A90 += m_A11 * f5_25;
	m_A91 += m_A12 * f5_25;
	m_A93 += m_A13 * f5_25;
	RHS25 += f5_25 * RHS5;
	const double f6 = 1.0 / m_A14;
	const double f6_18 = -f6 * m_A46;
	m_A48 += m_A15 * f6_18;
	RHS18 += f6_18 * RHS6;
	const double f7 = 1.0 / m_A16;
	const double f7_22 = -f7 * m_A64;
	m_A69 += m_A17 * f7_22;
	m_A73 += m_A18 * f7_22;
	RHS22 += f7_22 * RHS7;
	const double f7_27 = -f7 * m_A106;
	m_A109 += m_A17 * f7_27;
	m_A113 += m_A18 * f7_27;
	RHS27 += f7_27 * RHS7;
	const double f8 = 1.0 / m_A19;
	const double f8_21 = -f8 * m_A59;
	m_A61 += m_A20 * f8_21;
	RHS21 += f8_21 * RHS8;
	const double f8_28 = -f8 * m_A116;
	m_A121 += m_A20 * f8_28;
	RHS28 += f8_28 * RHS8;
	const double f9 = 1.0 / m_A21;
	const double f9_19 = -f9 * m_A51;
	m_A52 += m_A22 * f9_19;
	RHS19 += f9_19 * RHS9;
	const double f9_26 = -f9 * m_A96;
	m_A99 += m_A22 * f9_26;
	RHS26 += f9_26 * RHS9;
	const double f10 = 1.0 / m_A23;
	const double f10_20 = -f10 * m_A53;
	m_A55 += m_A24 * f10_20;
	m_A56 += m_A25 * f10_20;
	RHS20 += f10_20 * RHS10;
	const double f10_22 = -f10 * m_A65;
	m_A68 += m_A24 * f10_22;
	m_A69 += m_A25 * f10_22;
	RHS22 += f10_22 * RHS10;
	const double f11 = 1.0 / m_A26;
	const double f11_24 = -f11 * m_A77;
	m_A81 += m_A27 * f11_24;
	RHS24 += f11_24 * RHS11;
	const double f12 = 1.0 / m_A28;
	const double f12_23 = -f12 * m_A74;
	m_A76 += m_A29 * f12_23;
	RHS23 += f12_23 * RHS12;
	const double f12_26 = -f12 * m_A97;
	m_A104 += m_A29 * f12_26;
	RHS26 += f12_26 * RHS12;
	const double f13 = 1.0 / m_A30;
	const double f13_20 = -f13 * m_A54;
	m_A55 += m_A31 * f13_20;
	m_A57 += m_A32 * f13_20;
	m_A58 += m_A33 * f13_20;
	RHS20 += f13_20 * RHS13;
	const double f13_24 = -f13 * m_A78;
	m_A79 += m_A31 * f13_24;
	m_A82 += m_A32 * f13_24;
	m_A84 += m_A33 * f13_24;
	RHS24 += f13_24 * RHS13;
	const double f13_26 = -f13 * m_A98;
	m_A100 += m_A31 * f13_26;
	m_A102 += m_A32 * f13_26;
	m_A104 += m_A33 * f13_26;
	RHS26 += f13_26 * RHS13;
	const double f14 = 1.0 / m_A35;
	const double f14_25 = -f14 * m_A89;
	RHS25 += f14_25 * RHS14;
	const double f15 = 1.0 / m_A37;
	const double f15_22 = -f15 * m_A66;
	m_A71 += m_A38 * f15_22;
	RHS22 += f15_22 * RHS15;
	const double f16 = 1.0 / m_A40;
	const double f16_28 = -f16 * m_A117;
	RHS28 += f16_28 * RHS16;
	const double f17 = 1.0 / m_A43;
	const double f17_22 = -f17 * m_A67;
	m_A69 += m_A44 * f17_22;
	m_A71 += m_A45 * f17_22;
	RHS22 += f17_22 * RHS17;
	const double f17_25 = -f17 * m_A90;
	m_A91 += m_A44 * f17_25;
	m_A93 += m_A45 * f17_25;
	RHS25 += f17_25 * RHS17;
	const double f18 = 1.0 / m_A47;
	const double f18_27 = -f18 * m_A107;
	m_A108 += m_A48 * f18_27;
	m_A113 += m_A49 * f18_27;
	m_A114 += m_A50 * f18_27;
	RHS27 += f18_27 * RHS18;
	const double f18_28 = -f18 * m_A118;
	m_A119 += m_A48 * f18_28;
	m_A120 += m_A49 * f18_28;
	m_A121 += m_A50 * f18_28;
	RHS28 += f18_28 * RHS18;
	const double f19 = 1.0 / m_A52;
	const double f19_26 = -f19 * m_A99;
	RHS26 += f19_26 * RHS19;
	const double f20 = 1.0 / m_A55;
	const double f20_22 = -f20 * m_A68;
	m_A69 += m_A56 * f20_22;
	m_A70 += m_A57 * f20_22;
	m_A72 += m_A58 * f20_22;
	RHS22 += f20_22 * RHS20;
	const double f20_24 = -f20 * m_A79;
	m_A80 += m_A56 * f20_24;
	m_A82 += m_A57 * f20_24;
	m_A84 += m_A58 * f20_24;
	RHS24 += f20_24 * RHS20;
	const double f20_26 = -f20 * m_A100;
	m_A101 += m_A56 * f20_26;
	m_A102 += m_A57 * f20_26;
	m_A104 += m_A58 * f20_26;
	RHS26 += f20_26 * RHS20;
	const double f21 = 1.0 / m_A60;
	const double f21_27 = -f21 * m_A108;
	m_A114 += m_A61 * f21_27;
	RHS27 += f21_27 * RHS21;
	const double f21_28 = -f21 * m_A119;
	m_A121 += m_A61 * f21_28;
	RHS28 += f21_28 * RHS21;
	const double f22 = 1.0 / m_A69;
	const double f22_24 = -f22 * m_A80;
	m_A82 += m_A70 * f22_24;
	m_A83 += m_A71 * f22_24;
	m_A84 += m_A72 * f22_24;
	m_A85 += m_A73 * f22_24;
	RHS24 += f22_24 * RHS22;
	const double f22_25 = -f22 * m_A91;
	m_A92 += m_A70 * f22_25;
	m_A93 += m_A71 * f22_25;
	m_A94 += m_A72 * f22_25;
	m_A95 += m_A73 * f22_25;
	RHS25 += f22_25 * RHS22;
	const double f22_26 = -f22 * m_A101;
	m_A102 += m_A70 * f22_26;
	m_A103 += m_A71 * f22_26;
	m_A104 += m_A72 * f22_26;
	m_A105 += m_A73 * f22_26;
	RHS26 += f22_26 * RHS22;
	const double f22_27 = -f22 * m_A109;
	m_A110 += m_A70 * f22_27;
	m_A111 += m_A71 * f22_27;
	m_A112 += m_A72 * f22_27;
	m_A113 += m_A73 * f22_27;
	RHS27 += f22_27 * RHS22;
	const double f23 = 1.0 / m_A75;
	const double f23_24 = -f23 * m_A81;
	m_A84 += m_A76 * f23_24;
	RHS24 += f23_24 * RHS23;
	const double f24 = 1.0 / m_A82;
	const double f24_25 = -f24 * m_A92;
	m_A93 += m_A83 * f24_25;
	m_A94 += m_A84 * f24_25;
	m_A95 += m_A85 * f24_25;
	RHS25 += f24_25 * RHS24;
	const double f24_26 = -f24 * m_A102;
	m_A103 += m_A83 * f24_26;
	m_A104 += m_A84 * f24_26;
	m_A105 += m_A85 * f24_26;
	RHS26 += f24_26 * RHS24;
	const double f24_27 = -f24 * m_A110;
	m_A111 += m_A83 * f24_27;
	m_A112 += m_A84 * f24_27;
	m_A113 += m_A85 * f24_27;
	RHS27 += f24_27 * RHS24;
	const double f25 = 1.0 / m_A93;
	const double f25_26 = -f25 * m_A103;
	m_A104 += m_A94 * f25_26;
	m_A105 += m_A95 * f25_26;
	RHS26 += f25_26 * RHS25;
	const double f25_27 = -f25 * m_A111;
	m_A112 += m_A94 * f25_27;
	m_A113 += m_A95 * f25_27;
	RHS27 += f25_27 * RHS25;
	const double f26 = 1.0 / m_A104;
	const double f26_27 = -f26 * m_A112;
	m_A113 += m_A105 * f26_27;
	RHS27 += f26_27 * RHS26;
	const double f27 = 1.0 / m_A113;
	const double f27_28 = -f27 * m_A120;
	m_A121 += m_A114 * f27_28;
	RHS28 += f27_28 * RHS27;
	V[28] = RHS28 / m_A121;
	double tmp27 = 0.0;
	tmp27 += m_A114 * V[28];
	V[27] = (RHS27 - tmp27) / m_A113;
	double tmp26 = 0.0;
	tmp26 += m_A105 * V[27];
	V[26] = (RHS26 - tmp26) / m_A104;
	double tmp25 = 0.0;
	tmp25 += m_A94 * V[26];
	tmp25 += m_A95 * V[27];
	V[25] = (RHS25 - tmp25) / m_A93;
	double tmp24 = 0.0;
	tmp24 += m_A83 * V[25];
	tmp24 += m_A84 * V[26];
	tmp24 += m_A85 * V[27];
	V[24] = (RHS24 - tmp24) / m_A82;
	double tmp23 = 0.0;
	tmp23 += m_A76 * V[26];
	V[23] = (RHS23 - tmp23) / m_A75;
	double tmp22 = 0.0;
	tmp22 += m_A70 * V[24];
	tmp22 += m_A71 * V[25];
	tmp22 += m_A72 * V[26];
	tmp22 += m_A73 * V[27];
	V[22] = (RHS22 - tmp22) / m_A69;
	double tmp21 = 0.0;
	tmp21 += m_A61 * V[28];
	V[21] = (RHS21 - tmp21) / m_A60;
	double tmp20 = 0.0;
	tmp20 += m_A56 * V[22];
	tmp20 += m_A57 * V[24];
	tmp20 += m_A58 * V[26];
	V[20] = (RHS20 - tmp20) / m_A55;
	double tmp19 = 0.0;
	V[19] = (RHS19 - tmp19) / m_A52;
	double tmp18 = 0.0;
	tmp18 += m_A48 * V[21];
	tmp18 += m_A49 * V[27];
	tmp18 += m_A50 * V[28];
	V[18] = (RHS18 - tmp18) / m_A47;
	double tmp17 = 0.0;
	tmp17 += m_A44 * V[22];
	tmp17 += m_A45 * V[25];
	V[17] = (RHS17 - tmp17) / m_A43;
	double tmp16 = 0.0;
	V[16] = (RHS16 - tmp16) / m_A40;
	double tmp15 = 0.0;
	tmp15 += m_A38 * V[25];
	V[15] = (RHS15 - tmp15) / m_A37;
	double tmp14 = 0.0;
	V[14] = (RHS14 - tmp14) / m_A35;
	double tmp13 = 0.0;
	tmp13 += m_A31 * V[20];
	tmp13 += m_A32 * V[24];
	tmp13 += m_A33 * V[26];
	V[13] = (RHS13 - tmp13) / m_A30;
	double tmp12 = 0.0;
	tmp12 += m_A29 * V[26];
	V[12] = (RHS12 - tmp12) / m_A28;
	double tmp11 = 0.0;
	tmp11 += m_A27 * V[23];
	V[11] = (RHS11 - tmp11) / m_A26;
	double tmp10 = 0.0;
	tmp10 += m_A24 * V[20];
	tmp10 += m_A25 * V[22];
	V[10] = (RHS10 - tmp10) / m_A23;
	double tmp9 = 0.0;
	tmp9 += m_A22 * V[19];
	V[9] = (RHS9 - tmp9) / m_A21;
	double tmp8 = 0.0;
	tmp8 += m_A20 * V[28];
	V[8] = (RHS8 - tmp8) / m_A19;
	double tmp7 = 0.0;
	tmp7 += m_A17 * V[22];
	tmp7 += m_A18 * V[27];
	V[7] = (RHS7 - tmp7) / m_A16;
	double tmp6 = 0.0;
	tmp6 += m_A15 * V[21];
	V[6] = (RHS6 - tmp6) / m_A14;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[17];
	tmp5 += m_A12 * V[22];
	tmp5 += m_A13 * V[25];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[16];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[15];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[25];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[14];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[17];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_43188bf576854ae0_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A5 += gt[4];
	m_A5 += gt[5];
	m_A5 += gt[6];
	m_A6 += go[4];
	m_A4 += go[5];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 -= go[6] * *cnV[6];
	m_A9 += gt[7];
	m_A9 += gt[8];
	m_A7 += go[7];
	m_A8 += go[8];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A5 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A6 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[3];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// kidniki
static void nl_gcr_43f7ff9bc651cc7a_198_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	double m_A119(0.0);
	double m_A120(0.0);
	double m_A121(0.0);
	double m_A122(0.0);
	double m_A123(0.0);
	double m_A124(0.0);
	double m_A125(0.0);
	double m_A126(0.0);
	double m_A127(0.0);
	double m_A128(0.0);
	double m_A129(0.0);
	double m_A130(0.0);
	double m_A131(0.0);
	double m_A132(0.0);
	double m_A133(0.0);
	double m_A134(0.0);
	double m_A135(0.0);
	double m_A136(0.0);
	double m_A137(0.0);
	double m_A138(0.0);
	double m_A139(0.0);
	double m_A140(0.0);
	double m_A141(0.0);
	double m_A142(0.0);
	double m_A143(0.0);
	double m_A144(0.0);
	double m_A145(0.0);
	double m_A146(0.0);
	double m_A147(0.0);
	double m_A148(0.0);
	double m_A149(0.0);
	double m_A150(0.0);
	double m_A151(0.0);
	double m_A152(0.0);
	double m_A153(0.0);
	double m_A154(0.0);
	double m_A155(0.0);
	double m_A156(0.0);
	double m_A157(0.0);
	double m_A158(0.0);
	double m_A159(0.0);
	double m_A160(0.0);
	double m_A161(0.0);
	double m_A162(0.0);
	double m_A163(0.0);
	double m_A164(0.0);
	double m_A165(0.0);
	double m_A166(0.0);
	double m_A167(0.0);
	double m_A168(0.0);
	double m_A169(0.0);
	double m_A170(0.0);
	double m_A171(0.0);
	double m_A172(0.0);
	double m_A173(0.0);
	double m_A174(0.0);
	double m_A175(0.0);
	double m_A176(0.0);
	double m_A177(0.0);
	double m_A178(0.0);
	double m_A179(0.0);
	double m_A180(0.0);
	double m_A181(0.0);
	double m_A182(0.0);
	double m_A183(0.0);
	double m_A184(0.0);
	double m_A185(0.0);
	double m_A186(0.0);
	double m_A187(0.0);
	double m_A188(0.0);
	double m_A189(0.0);
	double m_A190(0.0);
	double m_A191(0.0);
	double m_A192(0.0);
	double m_A193(0.0);
	double m_A194(0.0);
	double m_A195(0.0);
	double m_A196(0.0);
	double m_A197(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A6 += go[4];
	m_A5 += go[5];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 -= go[6] * *cnV[6];
	m_A7 += gt[7];
	m_A7 += gt[8];
	m_A7 += gt[9];
	m_A7 += gt[10];
	m_A7 += gt[11];
	m_A7 += gt[12];
	m_A7 += gt[13];
	m_A8 += go[7];
	m_A9 += go[8];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[9] * *cnV[9];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A12 += go[14];
	m_A11 += go[15];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	m_A13 += gt[16];
	m_A13 += gt[17];
	m_A14 += go[16];
	double RHS5 = Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[17] * *cnV[17];
	m_A15 += gt[18];
	m_A15 += gt[19];
	m_A15 += gt[20];
	m_A16 += go[18];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 -= go[19] * *cnV[19];
	RHS6 -= go[20] * *cnV[20];
	m_A17 += gt[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A17 += gt[24];
	m_A17 += gt[25];
	m_A17 += gt[26];
	m_A17 += gt[27];
	m_A19 += go[21];
	m_A18 += go[22];
	double RHS7 = Idr[21];
	RHS7 += Idr[22];
	RHS7 += Idr[23];
	RHS7 += Idr[24];
	RHS7 += Idr[25];
	RHS7 += Idr[26];
	RHS7 += Idr[27];
	RHS7 -= go[23] * *cnV[23];
	RHS7 -= go[24] * *cnV[24];
	RHS7 -= go[25] * *cnV[25];
	RHS7 -= go[26] * *cnV[26];
	RHS7 -= go[27] * *cnV[27];
	m_A20 += gt[28];
	m_A20 += gt[29];
	m_A21 += go[28];
	m_A22 += go[29];
	double RHS8 = Idr[28];
	RHS8 += Idr[29];
	m_A23 += gt[30];
	m_A23 += gt[31];
	m_A23 += gt[32];
	m_A24 += go[30];
	m_A25 += go[31];
	double RHS9 = Idr[30];
	RHS9 += Idr[31];
	RHS9 += Idr[32];
	RHS9 -= go[32] * *cnV[32];
	m_A26 += gt[33];
	m_A26 += gt[34];
	m_A27 += go[33];
	double RHS10 = Idr[33];
	RHS10 += Idr[34];
	RHS10 -= go[34] * *cnV[34];
	m_A28 += gt[35];
	m_A28 += gt[36];
	m_A28 += gt[37];
	m_A28 += gt[38];
	m_A30 += go[35];
	m_A29 += go[36];
	m_A29 += go[37];
	double RHS11 = Idr[35];
	RHS11 += Idr[36];
	RHS11 += Idr[37];
	RHS11 += Idr[38];
	RHS11 -= go[38] * *cnV[38];
	m_A31 += gt[39];
	m_A31 += gt[40];
	m_A33 += go[39];
	m_A32 += go[40];
	double RHS12 = Idr[39];
	RHS12 += Idr[40];
	m_A34 += gt[41];
	m_A34 += gt[42];
	m_A34 += gt[43];
	m_A36 += go[41];
	m_A35 += go[42];
	double RHS13 = Idr[41];
	RHS13 += Idr[42];
	RHS13 += Idr[43];
	RHS13 -= go[43] * *cnV[43];
	m_A37 += gt[44];
	m_A37 += gt[45];
	m_A37 += gt[46];
	m_A38 += go[44];
	m_A39 += go[45];
	double RHS14 = Idr[44];
	RHS14 += Idr[45];
	RHS14 += Idr[46];
	RHS14 -= go[46] * *cnV[46];
	m_A40 += gt[47];
	m_A40 += gt[48];
	m_A40 += gt[49];
	m_A40 += gt[50];
	m_A40 += gt[51];
	m_A42 += go[47];
	m_A41 += go[48];
	m_A41 += go[49];
	double RHS15 = Idr[47];
	RHS15 += Idr[48];
	RHS15 += Idr[49];
	RHS15 += Idr[50];
	RHS15 += Idr[51];
	RHS15 -= go[50] * *cnV[50];
	RHS15 -= go[51] * *cnV[51];
	m_A43 += gt[52];
	m_A43 += gt[53];
	m_A43 += gt[54];
	m_A43 += gt[55];
	m_A44 += go[52];
	double RHS16 = Idr[52];
	RHS16 += Idr[53];
	RHS16 += Idr[54];
	RHS16 += Idr[55];
	RHS16 -= go[53] * *cnV[53];
	RHS16 -= go[54] * *cnV[54];
	RHS16 -= go[55] * *cnV[55];
	m_A45 += gt[56];
	m_A45 += gt[57];
	m_A45 += gt[58];
	m_A45 += gt[59];
	m_A46 += go[56];
	double RHS17 = Idr[56];
	RHS17 += Idr[57];
	RHS17 += Idr[58];
	RHS17 += Idr[59];
	RHS17 -= go[57] * *cnV[57];
	RHS17 -= go[58] * *cnV[58];
	RHS17 -= go[59] * *cnV[59];
	m_A47 += gt[60];
	m_A47 += gt[61];
	m_A47 += gt[62];
	m_A47 += gt[63];
	m_A47 += gt[64];
	m_A49 += go[60];
	m_A49 += go[61];
	m_A48 += go[62];
	double RHS18 = Idr[60];
	RHS18 += Idr[61];
	RHS18 += Idr[62];
	RHS18 += Idr[63];
	RHS18 += Idr[64];
	RHS18 -= go[63] * *cnV[63];
	RHS18 -= go[64] * *cnV[64];
	m_A50 += gt[65];
	m_A50 += gt[66];
	m_A50 += gt[67];
	m_A50 += gt[68];
	m_A50 += gt[69];
	m_A53 += go[65];
	m_A52 += go[66];
	m_A51 += go[67];
	m_A51 += go[68];
	double RHS19 = Idr[65];
	RHS19 += Idr[66];
	RHS19 += Idr[67];
	RHS19 += Idr[68];
	RHS19 += Idr[69];
	RHS19 -= go[69] * *cnV[69];
	m_A54 += gt[70];
	m_A54 += gt[71];
	m_A54 += gt[72];
	m_A54 += gt[73];
	m_A57 += go[70];
	m_A56 += go[71];
	m_A55 += go[72];
	double RHS20 = Idr[70];
	RHS20 += Idr[71];
	RHS20 += Idr[72];
	RHS20 += Idr[73];
	RHS20 -= go[73] * *cnV[73];
	m_A58 += gt[74];
	m_A58 += gt[75];
	m_A58 += gt[76];
	m_A59 += go[74];
	m_A60 += go[75];
	double RHS21 = Idr[74];
	RHS21 += Idr[75];
	RHS21 += Idr[76];
	RHS21 -= go[76] * *cnV[76];
	m_A61 += gt[77];
	m_A61 += gt[78];
	m_A62 += go[77];
	m_A63 += go[78];
	double RHS22 = Idr[77];
	RHS22 += Idr[78];
	m_A64 += gt[79];
	m_A64 += gt[80];
	m_A65 += go[79];
	m_A66 += go[80];
	double RHS23 = Idr[79];
	RHS23 += Idr[80];
	m_A69 += gt[81];
	m_A69 += gt[82];
	m_A69 += gt[83];
	m_A69 += gt[84];
	m_A68 += go[81];
	m_A68 += go[82];
	m_A67 += go[83];
	double RHS24 = Idr[81];
	RHS24 += Idr[82];
	RHS24 += Idr[83];
	RHS24 += Idr[84];
	RHS24 -= go[84] * *cnV[84];
	m_A75 += gt[85];
	m_A75 += gt[86];
	m_A75 += gt[87];
	m_A73 += go[85];
	m_A72 += go[86];
	double RHS25 = Idr[85];
	RHS25 += Idr[86];
	RHS25 += Idr[87];
	RHS25 -= go[87] * *cnV[87];
	m_A79 += gt[88];
	m_A79 += gt[89];
	m_A79 += gt[90];
	m_A78 += go[88];
	m_A77 += go[89];
	double RHS26 = Idr[88];
	RHS26 += Idr[89];
	RHS26 += Idr[90];
	RHS26 -= go[90] * *cnV[90];
	m_A83 += gt[91];
	m_A83 += gt[92];
	m_A83 += gt[93];
	m_A83 += gt[94];
	m_A83 += gt[95];
	m_A83 += gt[96];
	m_A82 += go[91];
	m_A82 += go[92];
	m_A81 += go[93];
	double RHS27 = Idr[91];
	RHS27 += Idr[92];
	RHS27 += Idr[93];
	RHS27 += Idr[94];
	RHS27 += Idr[95];
	RHS27 += Idr[96];
	RHS27 -= go[94] * *cnV[94];
	RHS27 -= go[95] * *cnV[95];
	RHS27 -= go[96] * *cnV[96];
	m_A93 += gt[97];
	m_A93 += gt[98];
	m_A93 += gt[99];
	m_A87 += go[97];
	m_A89 += go[98];
	m_A88 += go[99];
	double RHS28 = Idr[97];
	RHS28 += Idr[98];
	RHS28 += Idr[99];
	m_A102 += gt[100];
	m_A102 += gt[101];
	m_A102 += gt[102];
	m_A99 += go[100];
	m_A98 += go[101];
	m_A97 += go[102];
	double RHS29 = Idr[100];
	RHS29 += Idr[101];
	RHS29 += Idr[102];
	m_A110 += gt[103];
	m_A110 += gt[104];
	m_A110 += gt[105];
	m_A110 += gt[106];
	m_A107 += go[103];
	m_A106 += go[104];
	m_A106 += go[105];
	double RHS30 = Idr[103];
	RHS30 += Idr[104];
	RHS30 += Idr[105];
	RHS30 += Idr[106];
	RHS30 -= go[106] * *cnV[106];
	m_A116 += gt[107];
	m_A116 += gt[108];
	m_A116 += gt[109];
	m_A116 += gt[110];
	m_A116 += gt[111];
	m_A116 += gt[112];
	m_A114 += go[107];
	m_A115 += go[108];
	m_A115 += go[109];
	m_A117 += go[110];
	m_A117 += go[111];
	m_A113 += go[112];
	double RHS31 = Idr[107];
	RHS31 += Idr[108];
	RHS31 += Idr[109];
	RHS31 += Idr[110];
	RHS31 += Idr[111];
	RHS31 += Idr[112];
	m_A120 += gt[113];
	m_A120 += gt[114];
	m_A119 += go[113];
	double RHS32 = Idr[113];
	RHS32 += Idr[114];
	RHS32 -= go[114] * *cnV[114];
	m_A123 += gt[115];
	m_A123 += gt[116];
	m_A122 += go[115];
	m_A124 += go[116];
	double RHS33 = Idr[115];
	RHS33 += Idr[116];
	m_A126 += gt[117];
	m_A126 += gt[118];
	m_A126 += gt[119];
	m_A126 += gt[120];
	m_A126 += gt[121];
	m_A126 += gt[122];
	m_A126 += gt[123];
	m_A125 += go[117];
	m_A127 += go[118];
	double RHS34 = Idr[117];
	RHS34 += Idr[118];
	RHS34 += Idr[119];
	RHS34 += Idr[120];
	RHS34 += Idr[121];
	RHS34 += Idr[122];
	RHS34 += Idr[123];
	RHS34 -= go[119] * *cnV[119];
	RHS34 -= go[120] * *cnV[120];
	RHS34 -= go[121] * *cnV[121];
	RHS34 -= go[122] * *cnV[122];
	RHS34 -= go[123] * *cnV[123];
	m_A129 += gt[124];
	m_A129 += gt[125];
	m_A128 += go[124];
	double RHS35 = Idr[124];
	RHS35 += Idr[125];
	RHS35 -= go[125] * *cnV[125];
	m_A133 += gt[126];
	m_A133 += gt[127];
	m_A133 += gt[128];
	m_A133 += gt[129];
	m_A133 += gt[130];
	m_A133 += gt[131];
	m_A132 += go[126];
	m_A135 += go[127];
	m_A131 += go[128];
	double RHS36 = Idr[126];
	RHS36 += Idr[127];
	RHS36 += Idr[128];
	RHS36 += Idr[129];
	RHS36 += Idr[130];
	RHS36 += Idr[131];
	RHS36 -= go[129] * *cnV[129];
	RHS36 -= go[130] * *cnV[130];
	RHS36 -= go[131] * *cnV[131];
	m_A139 += gt[132];
	m_A139 += gt[133];
	m_A139 += gt[134];
	m_A139 += gt[135];
	m_A139 += gt[136];
	m_A139 += gt[137];
	m_A136 += go[132];
	m_A137 += go[133];
	m_A141 += go[134];
	m_A138 += go[135];
	double RHS37 = Idr[132];
	RHS37 += Idr[133];
	RHS37 += Idr[134];
	RHS37 += Idr[135];
	RHS37 += Idr[136];
	RHS37 += Idr[137];
	RHS37 -= go[136] * *cnV[136];
	RHS37 -= go[137] * *cnV[137];
	m_A149 += gt[138];
	m_A149 += gt[139];
	m_A149 += gt[140];
	m_A149 += gt[141];
	m_A149 += gt[142];
	m_A149 += gt[143];
	m_A145 += go[138];
	m_A144 += go[139];
	m_A142 += go[140];
	m_A143 += go[141];
	m_A152 += go[142];
	double RHS38 = Idr[138];
	RHS38 += Idr[139];
	RHS38 += Idr[140];
	RHS38 += Idr[141];
	RHS38 += Idr[142];
	RHS38 += Idr[143];
	RHS38 -= go[143] * *cnV[143];
	m_A157 += gt[144];
	m_A157 += gt[145];
	m_A157 += gt[146];
	m_A157 += gt[147];
	m_A157 += gt[148];
	m_A154 += go[144];
	m_A153 += go[145];
	m_A155 += go[146];
	m_A155 += go[147];
	double RHS39 = Idr[144];
	RHS39 += Idr[145];
	RHS39 += Idr[146];
	RHS39 += Idr[147];
	RHS39 += Idr[148];
	RHS39 -= go[148] * *cnV[148];
	m_A164 += gt[149];
	m_A164 += gt[150];
	m_A164 += gt[151];
	m_A164 += gt[152];
	m_A164 += gt[153];
	m_A162 += go[149];
	m_A165 += go[150];
	m_A165 += go[151];
	m_A161 += go[152];
	m_A163 += go[153];
	double RHS40 = Idr[149];
	RHS40 += Idr[150];
	RHS40 += Idr[151];
	RHS40 += Idr[152];
	RHS40 += Idr[153];
	m_A174 += gt[154];
	m_A174 += gt[155];
	m_A174 += gt[156];
	m_A167 += go[154];
	m_A166 += go[155];
	m_A171 += go[156];
	double RHS41 = Idr[154];
	RHS41 += Idr[155];
	RHS41 += Idr[156];
	m_A182 += gt[157];
	m_A182 += gt[158];
	m_A182 += gt[159];
	m_A177 += go[157];
	m_A178 += go[158];
	m_A179 += go[159];
	double RHS42 = Idr[157];
	RHS42 += Idr[158];
	RHS42 += Idr[159];
	m_A197 += gt[160];
	m_A197 += gt[161];
	m_A197 += gt[162];
	m_A197 += gt[163];
	m_A197 += gt[164];
	m_A197 += gt[165];
	m_A197 += gt[166];
	m_A197 += gt[167];
	m_A192 += go[160];
	m_A185 += go[161];
	m_A186 += go[162];
	m_A184 += go[163];
	m_A194 += go[164];
	m_A194 += go[165];
	double RHS43 = Idr[160];
	RHS43 += Idr[161];
	RHS43 += Idr[162];
	RHS43 += Idr[163];
	RHS43 += Idr[164];
	RHS43 += Idr[165];
	RHS43 += Idr[166];
	RHS43 += Idr[167];
	RHS43 -= go[166] * *cnV[166];
	RHS43 -= go[167] * *cnV[167];
	const double f0 = 1.0 / m_A0;
	const double f0_33 = -f0 * m_A122;
	m_A123 += m_A1 * f0_33;
	RHS33 += f0_33 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_34 = -f1 * m_A125;
	m_A127 += m_A3 * f1_34;
	RHS34 += f1_34 * RHS1;
	const double f1_40 = -f1 * m_A161;
	m_A164 += m_A3 * f1_40;
	RHS40 += f1_40 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_40 = -f2 * m_A162;
	m_A164 += m_A5 * f2_40;
	m_A165 += m_A6 * f2_40;
	RHS40 += f2_40 * RHS2;
	const double f2_43 = -f2 * m_A184;
	m_A194 += m_A5 * f2_43;
	m_A197 += m_A6 * f2_43;
	RHS43 += f2_43 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_37 = -f3 * m_A136;
	m_A138 += m_A8 * f3_37;
	m_A139 += m_A9 * f3_37;
	RHS37 += f3_37 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_37 = -f4 * m_A137;
	m_A139 += m_A11 * f4_37;
	m_A140 += m_A12 * f4_37;
	RHS37 += f4_37 * RHS4;
	const double f4_38 = -f4 * m_A142;
	m_A148 += m_A11 * f4_38;
	m_A149 += m_A12 * f4_38;
	RHS38 += f4_38 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_42 = -f5 * m_A177;
	m_A182 += m_A14 * f5_42;
	RHS42 += f5_42 * RHS5;
	const double f6 = 1.0 / m_A15;
	const double f6_36 = -f6 * m_A131;
	m_A133 += m_A16 * f6_36;
	RHS36 += f6_36 * RHS6;
	const double f7 = 1.0 / m_A17;
	const double f7_36 = -f7 * m_A132;
	m_A134 += m_A18 * f7_36;
	m_A135 += m_A19 * f7_36;
	RHS36 += f7_36 * RHS7;
	const double f8 = 1.0 / m_A20;
	const double f8_27 = -f8 * m_A81;
	m_A83 += m_A21 * f8_27;
	m_A86 += m_A22 * f8_27;
	RHS27 += f8_27 * RHS8;
	const double f8_43 = -f8 * m_A185;
	m_A187 += m_A21 * f8_43;
	m_A197 += m_A22 * f8_43;
	RHS43 += f8_43 * RHS8;
	const double f9 = 1.0 / m_A23;
	const double f9_31 = -f9 * m_A113;
	m_A116 += m_A24 * f9_31;
	m_A118 += m_A25 * f9_31;
	RHS31 += f9_31 * RHS9;
	const double f9_43 = -f9 * m_A186;
	m_A191 += m_A24 * f9_43;
	m_A197 += m_A25 * f9_43;
	RHS43 += f9_43 * RHS9;
	const double f10 = 1.0 / m_A26;
	const double f10_31 = -f10 * m_A114;
	m_A116 += m_A27 * f10_31;
	RHS31 += f10_31 * RHS10;
	const double f11 = 1.0 / m_A28;
	const double f11_31 = -f11 * m_A115;
	m_A116 += m_A29 * f11_31;
	m_A117 += m_A30 * f11_31;
	RHS31 += f11_31 * RHS11;
	const double f11_39 = -f11 * m_A153;
	m_A155 += m_A29 * f11_39;
	m_A157 += m_A30 * f11_39;
	RHS39 += f11_39 * RHS11;
	const double f12 = 1.0 / m_A31;
	const double f12_38 = -f12 * m_A143;
	m_A149 += m_A32 * f12_38;
	m_A150 += m_A33 * f12_38;
	RHS38 += f12_38 * RHS12;
	const double f12_39 = -f12 * m_A154;
	m_A156 += m_A32 * f12_39;
	m_A157 += m_A33 * f12_39;
	RHS39 += f12_39 * RHS12;
	const double f13 = 1.0 / m_A34;
	const double f13_37 = -f13 * m_A138;
	m_A139 += m_A35 * f13_37;
	m_A141 += m_A36 * f13_37;
	RHS37 += f13_37 * RHS13;
	const double f13_41 = -f13 * m_A166;
	m_A171 += m_A35 * f13_41;
	m_A174 += m_A36 * f13_41;
	RHS41 += f13_41 * RHS13;
	const double f14 = 1.0 / m_A37;
	const double f14_24 = -f14 * m_A67;
	m_A69 += m_A38 * f14_24;
	m_A71 += m_A39 * f14_24;
	RHS24 += f14_24 * RHS14;
	const double f14_28 = -f14 * m_A87;
	m_A90 += m_A38 * f14_28;
	m_A93 += m_A39 * f14_28;
	RHS28 += f14_28 * RHS14;
	const double f15 = 1.0 / m_A40;
	const double f15_24 = -f15 * m_A68;
	m_A69 += m_A41 * f15_24;
	m_A70 += m_A42 * f15_24;
	RHS24 += f15_24 * RHS15;
	const double f15_25 = -f15 * m_A72;
	m_A74 += m_A41 * f15_25;
	m_A75 += m_A42 * f15_25;
	RHS25 += f15_25 * RHS15;
	const double f16 = 1.0 / m_A43;
	const double f16_25 = -f16 * m_A73;
	m_A75 += m_A44 * f16_25;
	RHS25 += f16_25 * RHS16;
	const double f17 = 1.0 / m_A45;
	const double f17_26 = -f17 * m_A77;
	m_A79 += m_A46 * f17_26;
	RHS26 += f17_26 * RHS17;
	const double f18 = 1.0 / m_A47;
	const double f18_26 = -f18 * m_A78;
	m_A79 += m_A48 * f18_26;
	m_A80 += m_A49 * f18_26;
	RHS26 += f18_26 * RHS18;
	const double f18_30 = -f18 * m_A106;
	m_A108 += m_A48 * f18_30;
	m_A110 += m_A49 * f18_30;
	RHS30 += f18_30 * RHS18;
	const double f19 = 1.0 / m_A50;
	const double f19_27 = -f19 * m_A82;
	m_A83 += m_A51 * f19_27;
	m_A84 += m_A52 * f19_27;
	m_A85 += m_A53 * f19_27;
	RHS27 += f19_27 * RHS19;
	const double f19_28 = -f19 * m_A88;
	m_A92 += m_A51 * f19_28;
	m_A93 += m_A52 * f19_28;
	m_A94 += m_A53 * f19_28;
	RHS28 += f19_28 * RHS19;
	const double f19_29 = -f19 * m_A97;
	m_A100 += m_A51 * f19_29;
	m_A101 += m_A52 * f19_29;
	m_A102 += m_A53 * f19_29;
	RHS29 += f19_29 * RHS19;
	const double f20 = 1.0 / m_A54;
	const double f20_28 = -f20 * m_A89;
	m_A93 += m_A55 * f20_28;
	m_A94 += m_A56 * f20_28;
	m_A95 += m_A57 * f20_28;
	RHS28 += f20_28 * RHS20;
	const double f20_29 = -f20 * m_A98;
	m_A101 += m_A55 * f20_29;
	m_A102 += m_A56 * f20_29;
	m_A104 += m_A57 * f20_29;
	RHS29 += f20_29 * RHS20;
	const double f20_41 = -f20 * m_A167;
	m_A168 += m_A55 * f20_41;
	m_A169 += m_A56 * f20_41;
	m_A174 += m_A57 * f20_41;
	RHS41 += f20_41 * RHS20;
	const double f21 = 1.0 / m_A58;
	const double f21_29 = -f21 * m_A99;
	m_A102 += m_A59 * f21_29;
	m_A103 += m_A60 * f21_29;
	RHS29 += f21_29 * RHS21;
	const double f21_30 = -f21 * m_A107;
	m_A109 += m_A59 * f21_30;
	m_A110 += m_A60 * f21_30;
	RHS30 += f21_30 * RHS21;
	const double f22 = 1.0 / m_A61;
	const double f22_32 = -f22 * m_A119;
	m_A120 += m_A62 * f22_32;
	m_A121 += m_A63 * f22_32;
	RHS32 += f22_32 * RHS22;
	const double f22_38 = -f22 * m_A144;
	m_A146 += m_A62 * f22_38;
	m_A149 += m_A63 * f22_38;
	RHS38 += f22_38 * RHS22;
	const double f23 = 1.0 / m_A64;
	const double f23_35 = -f23 * m_A128;
	m_A129 += m_A65 * f23_35;
	m_A130 += m_A66 * f23_35;
	RHS35 += f23_35 * RHS23;
	const double f23_38 = -f23 * m_A145;
	m_A147 += m_A65 * f23_38;
	m_A149 += m_A66 * f23_38;
	RHS38 += f23_38 * RHS23;
	const double f24 = 1.0 / m_A69;
	const double f24_25 = -f24 * m_A74;
	m_A75 += m_A70 * f24_25;
	m_A76 += m_A71 * f24_25;
	RHS25 += f24_25 * RHS24;
	const double f24_28 = -f24 * m_A90;
	m_A91 += m_A70 * f24_28;
	m_A93 += m_A71 * f24_28;
	RHS28 += f24_28 * RHS24;
	const double f25 = 1.0 / m_A75;
	const double f25_28 = -f25 * m_A91;
	m_A93 += m_A76 * f25_28;
	RHS28 += f25_28 * RHS25;
	const double f26 = 1.0 / m_A79;
	const double f26_30 = -f26 * m_A108;
	m_A110 += m_A80 * f26_30;
	RHS30 += f26_30 * RHS26;
	const double f27 = 1.0 / m_A83;
	const double f27_28 = -f27 * m_A92;
	m_A93 += m_A84 * f27_28;
	m_A94 += m_A85 * f27_28;
	m_A96 += m_A86 * f27_28;
	RHS28 += f27_28 * RHS27;
	const double f27_29 = -f27 * m_A100;
	m_A101 += m_A84 * f27_29;
	m_A102 += m_A85 * f27_29;
	m_A105 += m_A86 * f27_29;
	RHS29 += f27_29 * RHS27;
	const double f27_43 = -f27 * m_A187;
	m_A188 += m_A84 * f27_43;
	m_A189 += m_A85 * f27_43;
	m_A197 += m_A86 * f27_43;
	RHS43 += f27_43 * RHS27;
	const double f28 = 1.0 / m_A93;
	const double f28_29 = -f28 * m_A101;
	m_A102 += m_A94 * f28_29;
	m_A104 += m_A95 * f28_29;
	m_A105 += m_A96 * f28_29;
	RHS29 += f28_29 * RHS28;
	const double f28_41 = -f28 * m_A168;
	m_A169 += m_A94 * f28_41;
	m_A174 += m_A95 * f28_41;
	m_A176 += m_A96 * f28_41;
	RHS41 += f28_41 * RHS28;
	const double f28_43 = -f28 * m_A188;
	m_A189 += m_A94 * f28_43;
	m_A195 += m_A95 * f28_43;
	m_A197 += m_A96 * f28_43;
	RHS43 += f28_43 * RHS28;
	const double f29 = 1.0 / m_A102;
	const double f29_30 = -f29 * m_A109;
	m_A110 += m_A103 * f29_30;
	m_A111 += m_A104 * f29_30;
	m_A112 += m_A105 * f29_30;
	RHS30 += f29_30 * RHS29;
	const double f29_41 = -f29 * m_A169;
	m_A170 += m_A103 * f29_41;
	m_A174 += m_A104 * f29_41;
	m_A176 += m_A105 * f29_41;
	RHS41 += f29_41 * RHS29;
	const double f29_43 = -f29 * m_A189;
	m_A190 += m_A103 * f29_43;
	m_A195 += m_A104 * f29_43;
	m_A197 += m_A105 * f29_43;
	RHS43 += f29_43 * RHS29;
	const double f30 = 1.0 / m_A110;
	const double f30_41 = -f30 * m_A170;
	m_A174 += m_A111 * f30_41;
	m_A176 += m_A112 * f30_41;
	RHS41 += f30_41 * RHS30;
	const double f30_43 = -f30 * m_A190;
	m_A195 += m_A111 * f30_43;
	m_A197 += m_A112 * f30_43;
	RHS43 += f30_43 * RHS30;
	const double f31 = 1.0 / m_A116;
	const double f31_39 = -f31 * m_A155;
	m_A157 += m_A117 * f31_39;
	m_A160 += m_A118 * f31_39;
	RHS39 += f31_39 * RHS31;
	const double f31_43 = -f31 * m_A191;
	m_A193 += m_A117 * f31_43;
	m_A197 += m_A118 * f31_43;
	RHS43 += f31_43 * RHS31;
	const double f32 = 1.0 / m_A120;
	const double f32_38 = -f32 * m_A146;
	m_A149 += m_A121 * f32_38;
	RHS38 += f32_38 * RHS32;
	const double f33 = 1.0 / m_A123;
	const double f33_40 = -f33 * m_A163;
	m_A164 += m_A124 * f33_40;
	RHS40 += f33_40 * RHS33;
	const double f34 = 1.0 / m_A126;
	const double f34_43 = -f34 * m_A192;
	m_A194 += m_A127 * f34_43;
	RHS43 += f34_43 * RHS34;
	const double f35 = 1.0 / m_A129;
	const double f35_38 = -f35 * m_A147;
	m_A149 += m_A130 * f35_38;
	RHS38 += f35_38 * RHS35;
	const double f36 = 1.0 / m_A133;
	const double f36_42 = -f36 * m_A178;
	m_A179 += m_A134 * f36_42;
	m_A182 += m_A135 * f36_42;
	RHS42 += f36_42 * RHS36;
	const double f37 = 1.0 / m_A139;
	const double f37_38 = -f37 * m_A148;
	m_A149 += m_A140 * f37_38;
	m_A151 += m_A141 * f37_38;
	RHS38 += f37_38 * RHS37;
	const double f37_41 = -f37 * m_A171;
	m_A172 += m_A140 * f37_41;
	m_A174 += m_A141 * f37_41;
	RHS41 += f37_41 * RHS37;
	const double f38 = 1.0 / m_A149;
	const double f38_39 = -f38 * m_A156;
	m_A157 += m_A150 * f38_39;
	m_A158 += m_A151 * f38_39;
	m_A159 += m_A152 * f38_39;
	RHS39 += f38_39 * RHS38;
	const double f38_41 = -f38 * m_A172;
	m_A173 += m_A150 * f38_41;
	m_A174 += m_A151 * f38_41;
	m_A175 += m_A152 * f38_41;
	RHS41 += f38_41 * RHS38;
	const double f38_42 = -f38 * m_A179;
	m_A180 += m_A150 * f38_42;
	m_A181 += m_A151 * f38_42;
	m_A182 += m_A152 * f38_42;
	RHS42 += f38_42 * RHS38;
	const double f39 = 1.0 / m_A157;
	const double f39_41 = -f39 * m_A173;
	m_A174 += m_A158 * f39_41;
	m_A175 += m_A159 * f39_41;
	m_A176 += m_A160 * f39_41;
	RHS41 += f39_41 * RHS39;
	const double f39_42 = -f39 * m_A180;
	m_A181 += m_A158 * f39_42;
	m_A182 += m_A159 * f39_42;
	m_A183 += m_A160 * f39_42;
	RHS42 += f39_42 * RHS39;
	const double f39_43 = -f39 * m_A193;
	m_A195 += m_A158 * f39_43;
	m_A196 += m_A159 * f39_43;
	m_A197 += m_A160 * f39_43;
	RHS43 += f39_43 * RHS39;
	const double f40 = 1.0 / m_A164;
	const double f40_43 = -f40 * m_A194;
	m_A197 += m_A165 * f40_43;
	RHS43 += f40_43 * RHS40;
	const double f41 = 1.0 / m_A174;
	const double f41_42 = -f41 * m_A181;
	m_A182 += m_A175 * f41_42;
	m_A183 += m_A176 * f41_42;
	RHS42 += f41_42 * RHS41;
	const double f41_43 = -f41 * m_A195;
	m_A196 += m_A175 * f41_43;
	m_A197 += m_A176 * f41_43;
	RHS43 += f41_43 * RHS41;
	const double f42 = 1.0 / m_A182;
	const double f42_43 = -f42 * m_A196;
	m_A197 += m_A183 * f42_43;
	RHS43 += f42_43 * RHS42;
	V[43] = RHS43 / m_A197;
	double tmp42 = 0.0;
	tmp42 += m_A183 * V[43];
	V[42] = (RHS42 - tmp42) / m_A182;
	double tmp41 = 0.0;
	tmp41 += m_A175 * V[42];
	tmp41 += m_A176 * V[43];
	V[41] = (RHS41 - tmp41) / m_A174;
	double tmp40 = 0.0;
	tmp40 += m_A165 * V[43];
	V[40] = (RHS40 - tmp40) / m_A164;
	double tmp39 = 0.0;
	tmp39 += m_A158 * V[41];
	tmp39 += m_A159 * V[42];
	tmp39 += m_A160 * V[43];
	V[39] = (RHS39 - tmp39) / m_A157;
	double tmp38 = 0.0;
	tmp38 += m_A150 * V[39];
	tmp38 += m_A151 * V[41];
	tmp38 += m_A152 * V[42];
	V[38] = (RHS38 - tmp38) / m_A149;
	double tmp37 = 0.0;
	tmp37 += m_A140 * V[38];
	tmp37 += m_A141 * V[41];
	V[37] = (RHS37 - tmp37) / m_A139;
	double tmp36 = 0.0;
	tmp36 += m_A134 * V[38];
	tmp36 += m_A135 * V[42];
	V[36] = (RHS36 - tmp36) / m_A133;
	double tmp35 = 0.0;
	tmp35 += m_A130 * V[38];
	V[35] = (RHS35 - tmp35) / m_A129;
	double tmp34 = 0.0;
	tmp34 += m_A127 * V[40];
	V[34] = (RHS34 - tmp34) / m_A126;
	double tmp33 = 0.0;
	tmp33 += m_A124 * V[40];
	V[33] = (RHS33 - tmp33) / m_A123;
	double tmp32 = 0.0;
	tmp32 += m_A121 * V[38];
	V[32] = (RHS32 - tmp32) / m_A120;
	double tmp31 = 0.0;
	tmp31 += m_A117 * V[39];
	tmp31 += m_A118 * V[43];
	V[31] = (RHS31 - tmp31) / m_A116;
	double tmp30 = 0.0;
	tmp30 += m_A111 * V[41];
	tmp30 += m_A112 * V[43];
	V[30] = (RHS30 - tmp30) / m_A110;
	double tmp29 = 0.0;
	tmp29 += m_A103 * V[30];
	tmp29 += m_A104 * V[41];
	tmp29 += m_A105 * V[43];
	V[29] = (RHS29 - tmp29) / m_A102;
	double tmp28 = 0.0;
	tmp28 += m_A94 * V[29];
	tmp28 += m_A95 * V[41];
	tmp28 += m_A96 * V[43];
	V[28] = (RHS28 - tmp28) / m_A93;
	double tmp27 = 0.0;
	tmp27 += m_A84 * V[28];
	tmp27 += m_A85 * V[29];
	tmp27 += m_A86 * V[43];
	V[27] = (RHS27 - tmp27) / m_A83;
	double tmp26 = 0.0;
	tmp26 += m_A80 * V[30];
	V[26] = (RHS26 - tmp26) / m_A79;
	double tmp25 = 0.0;
	tmp25 += m_A76 * V[28];
	V[25] = (RHS25 - tmp25) / m_A75;
	double tmp24 = 0.0;
	tmp24 += m_A70 * V[25];
	tmp24 += m_A71 * V[28];
	V[24] = (RHS24 - tmp24) / m_A69;
	double tmp23 = 0.0;
	tmp23 += m_A65 * V[35];
	tmp23 += m_A66 * V[38];
	V[23] = (RHS23 - tmp23) / m_A64;
	double tmp22 = 0.0;
	tmp22 += m_A62 * V[32];
	tmp22 += m_A63 * V[38];
	V[22] = (RHS22 - tmp22) / m_A61;
	double tmp21 = 0.0;
	tmp21 += m_A59 * V[29];
	tmp21 += m_A60 * V[30];
	V[21] = (RHS21 - tmp21) / m_A58;
	double tmp20 = 0.0;
	tmp20 += m_A55 * V[28];
	tmp20 += m_A56 * V[29];
	tmp20 += m_A57 * V[41];
	V[20] = (RHS20 - tmp20) / m_A54;
	double tmp19 = 0.0;
	tmp19 += m_A51 * V[27];
	tmp19 += m_A52 * V[28];
	tmp19 += m_A53 * V[29];
	V[19] = (RHS19 - tmp19) / m_A50;
	double tmp18 = 0.0;
	tmp18 += m_A48 * V[26];
	tmp18 += m_A49 * V[30];
	V[18] = (RHS18 - tmp18) / m_A47;
	double tmp17 = 0.0;
	tmp17 += m_A46 * V[26];
	V[17] = (RHS17 - tmp17) / m_A45;
	double tmp16 = 0.0;
	tmp16 += m_A44 * V[25];
	V[16] = (RHS16 - tmp16) / m_A43;
	double tmp15 = 0.0;
	tmp15 += m_A41 * V[24];
	tmp15 += m_A42 * V[25];
	V[15] = (RHS15 - tmp15) / m_A40;
	double tmp14 = 0.0;
	tmp14 += m_A38 * V[24];
	tmp14 += m_A39 * V[28];
	V[14] = (RHS14 - tmp14) / m_A37;
	double tmp13 = 0.0;
	tmp13 += m_A35 * V[37];
	tmp13 += m_A36 * V[41];
	V[13] = (RHS13 - tmp13) / m_A34;
	double tmp12 = 0.0;
	tmp12 += m_A32 * V[38];
	tmp12 += m_A33 * V[39];
	V[12] = (RHS12 - tmp12) / m_A31;
	double tmp11 = 0.0;
	tmp11 += m_A29 * V[31];
	tmp11 += m_A30 * V[39];
	V[11] = (RHS11 - tmp11) / m_A28;
	double tmp10 = 0.0;
	tmp10 += m_A27 * V[31];
	V[10] = (RHS10 - tmp10) / m_A26;
	double tmp9 = 0.0;
	tmp9 += m_A24 * V[31];
	tmp9 += m_A25 * V[43];
	V[9] = (RHS9 - tmp9) / m_A23;
	double tmp8 = 0.0;
	tmp8 += m_A21 * V[27];
	tmp8 += m_A22 * V[43];
	V[8] = (RHS8 - tmp8) / m_A20;
	double tmp7 = 0.0;
	tmp7 += m_A18 * V[38];
	tmp7 += m_A19 * V[42];
	V[7] = (RHS7 - tmp7) / m_A17;
	double tmp6 = 0.0;
	tmp6 += m_A16 * V[36];
	V[6] = (RHS6 - tmp6) / m_A15;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[42];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[37];
	tmp4 += m_A12 * V[38];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[13];
	tmp3 += m_A9 * V[37];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[40];
	tmp2 += m_A6 * V[43];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[40];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[33];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// gamemachine
static void nl_gcr_491f95430bfdfd05_19_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A9 += go[12];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A11 += go[15];
	double RHS5 = Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[16] * *cnV[16];
	RHS5 -= go[17] * *cnV[17];
	m_A18 += gt[18];
	m_A18 += gt[19];
	m_A18 += gt[20];
	m_A18 += gt[21];
	m_A18 += gt[22];
	m_A18 += gt[23];
	m_A18 += gt[24];
	m_A17 += go[18];
	m_A16 += go[19];
	m_A15 += go[20];
	m_A14 += go[21];
	m_A13 += go[22];
	m_A12 += go[23];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 += Idr[21];
	RHS6 += Idr[22];
	RHS6 += Idr[23];
	RHS6 += Idr[24];
	RHS6 -= go[24] * *cnV[24];
	const double f0 = 1.0 / m_A0;
	const double f0_6 = -f0 * m_A12;
	m_A18 += m_A1 * f0_6;
	RHS6 += f0_6 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_6 = -f1 * m_A13;
	m_A18 += m_A3 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_6 = -f2 * m_A14;
	m_A18 += m_A5 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_6 = -f3 * m_A15;
	m_A18 += m_A7 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_6 = -f4 * m_A16;
	m_A18 += m_A9 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_6 = -f5 * m_A17;
	m_A18 += m_A11 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A18;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[6];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[6];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[6];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[6];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[6];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_4b5ecfbb8f9fa97b_29_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A6 += go[4];
	m_A5 += go[5];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	m_A7 += gt[6];
	m_A7 += gt[7];
	m_A7 += gt[8];
	m_A7 += gt[9];
	m_A7 += gt[10];
	m_A7 += gt[11];
	m_A7 += gt[12];
	m_A8 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 += Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 -= go[7] * *cnV[7];
	RHS3 -= go[8] * *cnV[8];
	RHS3 -= go[9] * *cnV[9];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A11 += go[13];
	m_A10 += go[14];
	double RHS4 = Idr[13];
	RHS4 += Idr[14];
	m_A14 += gt[15];
	m_A14 += gt[16];
	m_A14 += gt[17];
	m_A12 += go[15];
	m_A13 += go[16];
	double RHS5 = Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[17] * *cnV[17];
	m_A18 += gt[18];
	m_A18 += gt[19];
	m_A18 += gt[20];
	m_A18 += gt[21];
	m_A19 += go[18];
	m_A19 += go[19];
	m_A16 += go[20];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 += Idr[21];
	RHS6 -= go[21] * *cnV[21];
	m_A22 += gt[22];
	m_A22 += gt[23];
	m_A22 += gt[24];
	m_A21 += go[22];
	m_A20 += go[23];
	double RHS7 = Idr[22];
	RHS7 += Idr[23];
	RHS7 += Idr[24];
	RHS7 -= go[24] * *cnV[24];
	m_A28 += gt[25];
	m_A28 += gt[26];
	m_A28 += gt[27];
	m_A28 += gt[28];
	m_A28 += gt[29];
	m_A28 += gt[30];
	m_A24 += go[25];
	m_A25 += go[26];
	m_A26 += go[27];
	m_A26 += go[28];
	double RHS8 = Idr[25];
	RHS8 += Idr[26];
	RHS8 += Idr[27];
	RHS8 += Idr[28];
	RHS8 += Idr[29];
	RHS8 += Idr[30];
	RHS8 -= go[29] * *cnV[29];
	RHS8 -= go[30] * *cnV[30];
	const double f0 = 1.0 / m_A0;
	const double f0_7 = -f0 * m_A20;
	m_A22 += m_A1 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A12;
	m_A14 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_5 = -f2 * m_A13;
	m_A14 += m_A5 * f2_5;
	m_A15 += m_A6 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f2_6 = -f2 * m_A16;
	m_A17 += m_A5 * f2_6;
	m_A18 += m_A6 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_8 = -f3 * m_A24;
	m_A26 += m_A8 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_7 = -f4 * m_A21;
	m_A22 += m_A10 * f4_7;
	m_A23 += m_A11 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f4_8 = -f4 * m_A25;
	m_A27 += m_A10 * f4_8;
	m_A28 += m_A11 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f5 = 1.0 / m_A14;
	const double f5_6 = -f5 * m_A17;
	m_A18 += m_A15 * f5_6;
	RHS6 += f5_6 * RHS5;
	const double f6 = 1.0 / m_A18;
	const double f6_8 = -f6 * m_A26;
	m_A28 += m_A19 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A22;
	const double f7_8 = -f7 * m_A27;
	m_A28 += m_A23 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A28;
	double tmp7 = 0.0;
	tmp7 += m_A23 * V[8];
	V[7] = (RHS7 - tmp7) / m_A22;
	double tmp6 = 0.0;
	tmp6 += m_A19 * V[8];
	V[6] = (RHS6 - tmp6) / m_A18;
	double tmp5 = 0.0;
	tmp5 += m_A15 * V[6];
	V[5] = (RHS5 - tmp5) / m_A14;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[7];
	tmp4 += m_A11 * V[8];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[6];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[5];
	tmp2 += m_A6 * V[6];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// gtrak10
static void nl_gcr_4c46fdf7c0037727_43_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A9 += go[12];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A11 += go[15];
	double RHS5 = Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[16] * *cnV[16];
	RHS5 -= go[17] * *cnV[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A13 += go[18];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 -= go[19] * *cnV[19];
	RHS6 -= go[20] * *cnV[20];
	m_A14 += gt[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A15 += go[21];
	double RHS7 = Idr[21];
	RHS7 += Idr[22];
	RHS7 += Idr[23];
	RHS7 -= go[22] * *cnV[22];
	RHS7 -= go[23] * *cnV[23];
	m_A16 += gt[24];
	m_A16 += gt[25];
	m_A16 += gt[26];
	m_A17 += go[24];
	double RHS8 = Idr[24];
	RHS8 += Idr[25];
	RHS8 += Idr[26];
	RHS8 -= go[25] * *cnV[25];
	RHS8 -= go[26] * *cnV[26];
	m_A18 += gt[27];
	m_A18 += gt[28];
	m_A18 += gt[29];
	m_A19 += go[27];
	double RHS9 = Idr[27];
	RHS9 += Idr[28];
	RHS9 += Idr[29];
	RHS9 -= go[28] * *cnV[28];
	RHS9 -= go[29] * *cnV[29];
	m_A20 += gt[30];
	m_A20 += gt[31];
	m_A20 += gt[32];
	m_A21 += go[30];
	double RHS10 = Idr[30];
	RHS10 += Idr[31];
	RHS10 += Idr[32];
	RHS10 -= go[31] * *cnV[31];
	RHS10 -= go[32] * *cnV[32];
	m_A22 += gt[33];
	m_A22 += gt[34];
	m_A22 += gt[35];
	m_A23 += go[33];
	double RHS11 = Idr[33];
	RHS11 += Idr[34];
	RHS11 += Idr[35];
	RHS11 -= go[34] * *cnV[34];
	RHS11 -= go[35] * *cnV[35];
	m_A25 += gt[36];
	m_A25 += gt[37];
	m_A25 += gt[38];
	m_A26 += go[36];
	m_A24 += go[37];
	double RHS12 = Idr[36];
	RHS12 += Idr[37];
	RHS12 += Idr[38];
	RHS12 -= go[38] * *cnV[38];
	m_A30 += gt[39];
	m_A30 += gt[40];
	m_A30 += gt[41];
	m_A30 += gt[42];
	m_A30 += gt[43];
	m_A30 += gt[44];
	m_A30 += gt[45];
	m_A29 += go[39];
	m_A28 += go[40];
	m_A27 += go[41];
	m_A31 += go[42];
	m_A31 += go[43];
	double RHS13 = Idr[39];
	RHS13 += Idr[40];
	RHS13 += Idr[41];
	RHS13 += Idr[42];
	RHS13 += Idr[43];
	RHS13 += Idr[44];
	RHS13 += Idr[45];
	RHS13 -= go[44] * *cnV[44];
	RHS13 -= go[45] * *cnV[45];
	m_A42 += gt[46];
	m_A42 += gt[47];
	m_A42 += gt[48];
	m_A42 += gt[49];
	m_A42 += gt[50];
	m_A42 += gt[51];
	m_A42 += gt[52];
	m_A42 += gt[53];
	m_A42 += gt[54];
	m_A42 += gt[55];
	m_A42 += gt[56];
	m_A42 += gt[57];
	m_A42 += gt[58];
	m_A41 += go[46];
	m_A41 += go[47];
	m_A39 += go[48];
	m_A38 += go[49];
	m_A37 += go[50];
	m_A36 += go[51];
	m_A35 += go[52];
	m_A34 += go[53];
	m_A33 += go[54];
	m_A32 += go[55];
	m_A40 += go[56];
	double RHS14 = Idr[46];
	RHS14 += Idr[47];
	RHS14 += Idr[48];
	RHS14 += Idr[49];
	RHS14 += Idr[50];
	RHS14 += Idr[51];
	RHS14 += Idr[52];
	RHS14 += Idr[53];
	RHS14 += Idr[54];
	RHS14 += Idr[55];
	RHS14 += Idr[56];
	RHS14 += Idr[57];
	RHS14 += Idr[58];
	RHS14 -= go[57] * *cnV[57];
	RHS14 -= go[58] * *cnV[58];
	const double f0 = 1.0 / m_A0;
	const double f0_12 = -f0 * m_A24;
	m_A25 += m_A1 * f0_12;
	RHS12 += f0_12 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_14 = -f1 * m_A32;
	m_A42 += m_A3 * f1_14;
	RHS14 += f1_14 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_14 = -f2 * m_A33;
	m_A42 += m_A5 * f2_14;
	RHS14 += f2_14 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_14 = -f3 * m_A34;
	m_A42 += m_A7 * f3_14;
	RHS14 += f3_14 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_14 = -f4 * m_A35;
	m_A42 += m_A9 * f4_14;
	RHS14 += f4_14 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_14 = -f5 * m_A36;
	m_A42 += m_A11 * f5_14;
	RHS14 += f5_14 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_14 = -f6 * m_A37;
	m_A42 += m_A13 * f6_14;
	RHS14 += f6_14 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_14 = -f7 * m_A38;
	m_A42 += m_A15 * f7_14;
	RHS14 += f7_14 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_14 = -f8 * m_A39;
	m_A42 += m_A17 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f9 = 1.0 / m_A18;
	const double f9_13 = -f9 * m_A27;
	m_A30 += m_A19 * f9_13;
	RHS13 += f9_13 * RHS9;
	const double f10 = 1.0 / m_A20;
	const double f10_13 = -f10 * m_A28;
	m_A30 += m_A21 * f10_13;
	RHS13 += f10_13 * RHS10;
	const double f11 = 1.0 / m_A22;
	const double f11_13 = -f11 * m_A29;
	m_A30 += m_A23 * f11_13;
	RHS13 += f11_13 * RHS11;
	const double f12 = 1.0 / m_A25;
	const double f12_14 = -f12 * m_A40;
	m_A42 += m_A26 * f12_14;
	RHS14 += f12_14 * RHS12;
	const double f13 = 1.0 / m_A30;
	const double f13_14 = -f13 * m_A41;
	m_A42 += m_A31 * f13_14;
	RHS14 += f13_14 * RHS13;
	V[14] = RHS14 / m_A42;
	double tmp13 = 0.0;
	tmp13 += m_A31 * V[14];
	V[13] = (RHS13 - tmp13) / m_A30;
	double tmp12 = 0.0;
	tmp12 += m_A26 * V[14];
	V[12] = (RHS12 - tmp12) / m_A25;
	double tmp11 = 0.0;
	tmp11 += m_A23 * V[13];
	V[11] = (RHS11 - tmp11) / m_A22;
	double tmp10 = 0.0;
	tmp10 += m_A21 * V[13];
	V[10] = (RHS10 - tmp10) / m_A20;
	double tmp9 = 0.0;
	tmp9 += m_A19 * V[13];
	V[9] = (RHS9 - tmp9) / m_A18;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[14];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[14];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[14];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[14];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[14];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[14];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[14];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[14];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[12];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// solarq
static void nl_gcr_4cb524006206eb1a_25_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A2 += gt[11];
	m_A5 += go[4];
	m_A4 += go[5];
	m_A4 += go[6];
	m_A3 += go[7];
	m_A3 += go[8];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A7 += go[12];
	double RHS2 = Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[13] * *cnV[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A9 += go[14];
	m_A9 += go[15];
	m_A8 += go[16];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A15 += gt[22];
	m_A15 += gt[23];
	m_A15 += gt[24];
	m_A16 += go[20];
	m_A16 += go[21];
	m_A13 += go[22];
	m_A13 += go[23];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 -= go[24] * *cnV[24];
	m_A18 += gt[25];
	m_A18 += gt[26];
	m_A18 += gt[27];
	m_A19 += go[25];
	m_A17 += go[26];
	double RHS5 = Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 -= go[27] * *cnV[27];
	m_A24 += gt[28];
	m_A24 += gt[29];
	m_A24 += gt[30];
	m_A24 += gt[31];
	m_A23 += go[28];
	m_A22 += go[29];
	m_A22 += go[30];
	m_A20 += go[31];
	double RHS6 = Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	m_A12 += m_A5 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_4 = -f1 * m_A13;
	m_A14 += m_A3 * f1_4;
	m_A15 += m_A4 * f1_4;
	m_A16 += m_A5 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f1_6 = -f1 * m_A20;
	m_A21 += m_A3 * f1_6;
	m_A22 += m_A4 * f1_6;
	m_A24 += m_A5 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_5 = -f2 * m_A17;
	m_A18 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_4 = -f3 * m_A14;
	m_A15 += m_A11 * f3_4;
	m_A16 += m_A12 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_6 = -f3 * m_A21;
	m_A22 += m_A11 * f3_6;
	m_A24 += m_A12 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A15;
	const double f4_6 = -f4 * m_A22;
	m_A24 += m_A16 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A18;
	const double f5_6 = -f5 * m_A23;
	m_A24 += m_A19 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A24;
	double tmp5 = 0.0;
	tmp5 += m_A19 * V[6];
	V[5] = (RHS5 - tmp5) / m_A18;
	double tmp4 = 0.0;
	tmp4 += m_A16 * V[6];
	V[4] = (RHS4 - tmp4) / m_A15;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[4];
	tmp3 += m_A12 * V[6];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	tmp1 += m_A4 * V[4];
	tmp1 += m_A5 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// solarq
static void nl_gcr_4e4931ccbfb7a3c_70_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A4 += go[3];
	m_A3 += go[4];
	m_A3 += go[5];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	m_A5 += gt[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A7 += go[9];
	m_A6 += go[10];
	m_A6 += go[11];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[12] * *cnV[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A10 += go[13];
	m_A9 += go[14];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A11 += gt[22];
	m_A11 += gt[23];
	m_A11 += gt[24];
	m_A11 += gt[25];
	m_A11 += gt[26];
	m_A12 += go[20];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 += Idr[25];
	RHS4 += Idr[26];
	RHS4 -= go[21] * *cnV[21];
	RHS4 -= go[22] * *cnV[22];
	RHS4 -= go[23] * *cnV[23];
	RHS4 -= go[24] * *cnV[24];
	RHS4 -= go[25] * *cnV[25];
	RHS4 -= go[26] * *cnV[26];
	m_A13 += gt[27];
	m_A13 += gt[28];
	m_A13 += gt[29];
	m_A13 += gt[30];
	m_A13 += gt[31];
	m_A14 += go[27];
	m_A15 += go[28];
	double RHS5 = Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 += Idr[30];
	RHS5 += Idr[31];
	RHS5 -= go[29] * *cnV[29];
	RHS5 -= go[30] * *cnV[30];
	RHS5 -= go[31] * *cnV[31];
	m_A16 += gt[32];
	m_A16 += gt[33];
	m_A16 += gt[34];
	m_A16 += gt[35];
	m_A16 += gt[36];
	m_A16 += gt[37];
	m_A16 += gt[38];
	m_A17 += go[32];
	m_A18 += go[33];
	double RHS6 = Idr[32];
	RHS6 += Idr[33];
	RHS6 += Idr[34];
	RHS6 += Idr[35];
	RHS6 += Idr[36];
	RHS6 += Idr[37];
	RHS6 += Idr[38];
	RHS6 -= go[34] * *cnV[34];
	RHS6 -= go[35] * *cnV[35];
	RHS6 -= go[36] * *cnV[36];
	RHS6 -= go[37] * *cnV[37];
	RHS6 -= go[38] * *cnV[38];
	m_A19 += gt[39];
	m_A19 += gt[40];
	m_A19 += gt[41];
	m_A19 += gt[42];
	m_A20 += go[39];
	m_A21 += go[40];
	double RHS7 = Idr[39];
	RHS7 += Idr[40];
	RHS7 += Idr[41];
	RHS7 += Idr[42];
	RHS7 -= go[41] * *cnV[41];
	RHS7 -= go[42] * *cnV[42];
	m_A22 += gt[43];
	m_A22 += gt[44];
	m_A22 += gt[45];
	m_A22 += gt[46];
	m_A22 += gt[47];
	m_A23 += go[43];
	m_A24 += go[44];
	double RHS8 = Idr[43];
	RHS8 += Idr[44];
	RHS8 += Idr[45];
	RHS8 += Idr[46];
	RHS8 += Idr[47];
	RHS8 -= go[45] * *cnV[45];
	RHS8 -= go[46] * *cnV[46];
	RHS8 -= go[47] * *cnV[47];
	m_A25 += gt[48];
	m_A25 += gt[49];
	m_A25 += gt[50];
	m_A26 += go[48];
	m_A27 += go[49];
	double RHS9 = Idr[48];
	RHS9 += Idr[49];
	RHS9 += Idr[50];
	RHS9 -= go[50] * *cnV[50];
	m_A30 += gt[51];
	m_A30 += gt[52];
	m_A30 += gt[53];
	m_A30 += gt[54];
	m_A30 += gt[55];
	m_A30 += gt[56];
	m_A29 += go[51];
	m_A29 += go[52];
	m_A28 += go[53];
	double RHS10 = Idr[51];
	RHS10 += Idr[52];
	RHS10 += Idr[53];
	RHS10 += Idr[54];
	RHS10 += Idr[55];
	RHS10 += Idr[56];
	RHS10 -= go[54] * *cnV[54];
	RHS10 -= go[55] * *cnV[55];
	RHS10 -= go[56] * *cnV[56];
	m_A35 += gt[57];
	m_A35 += gt[58];
	m_A35 += gt[59];
	m_A35 += gt[60];
	m_A35 += gt[61];
	m_A33 += go[57];
	m_A33 += go[58];
	m_A32 += go[59];
	double RHS11 = Idr[57];
	RHS11 += Idr[58];
	RHS11 += Idr[59];
	RHS11 += Idr[60];
	RHS11 += Idr[61];
	RHS11 -= go[60] * *cnV[60];
	RHS11 -= go[61] * *cnV[61];
	m_A39 += gt[62];
	m_A39 += gt[63];
	m_A39 += gt[64];
	m_A39 += gt[65];
	m_A39 += gt[66];
	m_A40 += go[62];
	m_A37 += go[63];
	double RHS12 = Idr[62];
	RHS12 += Idr[63];
	RHS12 += Idr[64];
	RHS12 += Idr[65];
	RHS12 += Idr[66];
	RHS12 -= go[64] * *cnV[64];
	RHS12 -= go[65] * *cnV[65];
	RHS12 -= go[66] * *cnV[66];
	m_A42 += gt[67];
	m_A42 += gt[68];
	m_A42 += gt[69];
	m_A42 += gt[70];
	m_A42 += gt[71];
	m_A42 += gt[72];
	m_A42 += gt[73];
	m_A43 += go[67];
	m_A41 += go[68];
	double RHS13 = Idr[67];
	RHS13 += Idr[68];
	RHS13 += Idr[69];
	RHS13 += Idr[70];
	RHS13 += Idr[71];
	RHS13 += Idr[72];
	RHS13 += Idr[73];
	RHS13 -= go[69] * *cnV[69];
	RHS13 -= go[70] * *cnV[70];
	RHS13 -= go[71] * *cnV[71];
	RHS13 -= go[72] * *cnV[72];
	RHS13 -= go[73] * *cnV[73];
	m_A48 += gt[74];
	m_A48 += gt[75];
	m_A48 += gt[76];
	m_A46 += go[74];
	m_A45 += go[75];
	m_A50 += go[76];
	double RHS14 = Idr[74];
	RHS14 += Idr[75];
	RHS14 += Idr[76];
	m_A55 += gt[77];
	m_A55 += gt[78];
	m_A55 += gt[79];
	m_A53 += go[77];
	m_A51 += go[78];
	m_A57 += go[79];
	double RHS15 = Idr[77];
	RHS15 += Idr[78];
	RHS15 += Idr[79];
	m_A62 += gt[80];
	m_A62 += gt[81];
	m_A62 += gt[82];
	m_A62 += gt[83];
	m_A62 += gt[84];
	m_A58 += go[80];
	m_A60 += go[81];
	m_A59 += go[82];
	double RHS16 = Idr[80];
	RHS16 += Idr[81];
	RHS16 += Idr[82];
	RHS16 += Idr[83];
	RHS16 += Idr[84];
	RHS16 -= go[83] * *cnV[83];
	RHS16 -= go[84] * *cnV[84];
	m_A69 += gt[85];
	m_A69 += gt[86];
	m_A69 += gt[87];
	m_A69 += gt[88];
	m_A69 += gt[89];
	m_A69 += gt[90];
	m_A64 += go[85];
	m_A67 += go[86];
	m_A65 += go[87];
	m_A66 += go[88];
	double RHS17 = Idr[85];
	RHS17 += Idr[86];
	RHS17 += Idr[87];
	RHS17 += Idr[88];
	RHS17 += Idr[89];
	RHS17 += Idr[90];
	RHS17 -= go[89] * *cnV[89];
	RHS17 -= go[90] * *cnV[90];
	const double f0 = 1.0 / m_A0;
	const double f0_10 = -f0 * m_A28;
	m_A30 += m_A1 * f0_10;
	RHS10 += f0_10 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_10 = -f1 * m_A29;
	m_A30 += m_A3 * f1_10;
	m_A31 += m_A4 * f1_10;
	RHS10 += f1_10 * RHS1;
	const double f1_11 = -f1 * m_A32;
	m_A34 += m_A3 * f1_11;
	m_A35 += m_A4 * f1_11;
	RHS11 += f1_11 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_11 = -f2 * m_A33;
	m_A35 += m_A6 * f2_11;
	m_A36 += m_A7 * f2_11;
	RHS11 += f2_11 * RHS2;
	const double f2_12 = -f2 * m_A37;
	m_A38 += m_A6 * f2_12;
	m_A39 += m_A7 * f2_12;
	RHS12 += f2_12 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_17 = -f3 * m_A64;
	m_A66 += m_A9 * f3_17;
	m_A69 += m_A10 * f3_17;
	RHS17 += f3_17 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_16 = -f4 * m_A58;
	m_A59 += m_A12 * f4_16;
	RHS16 += f4_16 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_15 = -f5 * m_A51;
	m_A52 += m_A14 * f5_15;
	m_A55 += m_A15 * f5_15;
	RHS15 += f5_15 * RHS5;
	const double f6 = 1.0 / m_A16;
	const double f6_15 = -f6 * m_A52;
	m_A53 += m_A17 * f6_15;
	m_A55 += m_A18 * f6_15;
	RHS15 += f6_15 * RHS6;
	const double f7 = 1.0 / m_A19;
	const double f7_13 = -f7 * m_A41;
	m_A43 += m_A20 * f7_13;
	m_A44 += m_A21 * f7_13;
	RHS13 += f7_13 * RHS7;
	const double f7_14 = -f7 * m_A45;
	m_A48 += m_A20 * f7_14;
	m_A49 += m_A21 * f7_14;
	RHS14 += f7_14 * RHS7;
	const double f7_15 = -f7 * m_A53;
	m_A54 += m_A20 * f7_15;
	m_A55 += m_A21 * f7_15;
	RHS15 += f7_15 * RHS7;
	const double f8 = 1.0 / m_A22;
	const double f8_14 = -f8 * m_A46;
	m_A47 += m_A23 * f8_14;
	m_A48 += m_A24 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f9 = 1.0 / m_A25;
	const double f9_16 = -f9 * m_A59;
	m_A62 += m_A26 * f9_16;
	m_A63 += m_A27 * f9_16;
	RHS16 += f9_16 * RHS9;
	const double f9_17 = -f9 * m_A65;
	m_A68 += m_A26 * f9_17;
	m_A69 += m_A27 * f9_17;
	RHS17 += f9_17 * RHS9;
	const double f10 = 1.0 / m_A30;
	const double f10_11 = -f10 * m_A34;
	m_A35 += m_A31 * f10_11;
	RHS11 += f10_11 * RHS10;
	const double f11 = 1.0 / m_A35;
	const double f11_12 = -f11 * m_A38;
	m_A39 += m_A36 * f11_12;
	RHS12 += f11_12 * RHS11;
	const double f12 = 1.0 / m_A39;
	const double f12_17 = -f12 * m_A66;
	m_A69 += m_A40 * f12_17;
	RHS17 += f12_17 * RHS12;
	const double f13 = 1.0 / m_A42;
	const double f13_14 = -f13 * m_A47;
	m_A48 += m_A43 * f13_14;
	m_A49 += m_A44 * f13_14;
	RHS14 += f13_14 * RHS13;
	const double f14 = 1.0 / m_A48;
	const double f14_15 = -f14 * m_A54;
	m_A55 += m_A49 * f14_15;
	m_A56 += m_A50 * f14_15;
	RHS15 += f14_15 * RHS14;
	const double f14_16 = -f14 * m_A60;
	m_A61 += m_A49 * f14_16;
	m_A62 += m_A50 * f14_16;
	RHS16 += f14_16 * RHS14;
	const double f15 = 1.0 / m_A55;
	const double f15_16 = -f15 * m_A61;
	m_A62 += m_A56 * f15_16;
	m_A63 += m_A57 * f15_16;
	RHS16 += f15_16 * RHS15;
	const double f15_17 = -f15 * m_A67;
	m_A68 += m_A56 * f15_17;
	m_A69 += m_A57 * f15_17;
	RHS17 += f15_17 * RHS15;
	const double f16 = 1.0 / m_A62;
	const double f16_17 = -f16 * m_A68;
	m_A69 += m_A63 * f16_17;
	RHS17 += f16_17 * RHS16;
	V[17] = RHS17 / m_A69;
	double tmp16 = 0.0;
	tmp16 += m_A63 * V[17];
	V[16] = (RHS16 - tmp16) / m_A62;
	double tmp15 = 0.0;
	tmp15 += m_A56 * V[16];
	tmp15 += m_A57 * V[17];
	V[15] = (RHS15 - tmp15) / m_A55;
	double tmp14 = 0.0;
	tmp14 += m_A49 * V[15];
	tmp14 += m_A50 * V[16];
	V[14] = (RHS14 - tmp14) / m_A48;
	double tmp13 = 0.0;
	tmp13 += m_A43 * V[14];
	tmp13 += m_A44 * V[15];
	V[13] = (RHS13 - tmp13) / m_A42;
	double tmp12 = 0.0;
	tmp12 += m_A40 * V[17];
	V[12] = (RHS12 - tmp12) / m_A39;
	double tmp11 = 0.0;
	tmp11 += m_A36 * V[12];
	V[11] = (RHS11 - tmp11) / m_A35;
	double tmp10 = 0.0;
	tmp10 += m_A31 * V[11];
	V[10] = (RHS10 - tmp10) / m_A30;
	double tmp9 = 0.0;
	tmp9 += m_A26 * V[16];
	tmp9 += m_A27 * V[17];
	V[9] = (RHS9 - tmp9) / m_A25;
	double tmp8 = 0.0;
	tmp8 += m_A23 * V[13];
	tmp8 += m_A24 * V[14];
	V[8] = (RHS8 - tmp8) / m_A22;
	double tmp7 = 0.0;
	tmp7 += m_A20 * V[14];
	tmp7 += m_A21 * V[15];
	V[7] = (RHS7 - tmp7) / m_A19;
	double tmp6 = 0.0;
	tmp6 += m_A17 * V[7];
	tmp6 += m_A18 * V[15];
	V[6] = (RHS6 - tmp6) / m_A16;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[6];
	tmp5 += m_A15 * V[15];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[9];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[12];
	tmp3 += m_A10 * V[17];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[11];
	tmp2 += m_A7 * V[12];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[10];
	tmp1 += m_A4 * V[11];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[10];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_50f5194a994d56ec_16_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	m_A7 += gt[10];
	m_A7 += gt[11];
	m_A6 += go[10];
	m_A8 += go[11];
	double RHS3 = Idr[10];
	RHS3 += Idr[11];
	m_A10 += gt[12];
	m_A10 += gt[13];
	m_A9 += go[12];
	m_A11 += go[13];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	m_A15 += gt[14];
	m_A15 += gt[15];
	m_A15 += gt[16];
	m_A15 += gt[17];
	m_A13 += go[14];
	m_A14 += go[15];
	m_A12 += go[16];
	double RHS5 = Idr[14];
	RHS5 += Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[17] * *cnV[17];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A12;
	m_A15 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A6;
	m_A7 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A9;
	m_A10 += m_A5 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_5 = -f3 * m_A13;
	m_A15 += m_A8 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_5 = -f4 * m_A14;
	m_A15 += m_A11 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A15;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[5];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[5];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starhawk
static void nl_gcr_528a27fe9ed07d67_45_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A3 += go[7];
	m_A3 += go[8];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A5 += go[11];
	double RHS2 = Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[12] * *cnV[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A7 += go[13];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A9 += go[16];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 -= go[17] * *cnV[17];
	RHS4 -= go[18] * *cnV[18];
	m_A10 += gt[19];
	m_A10 += gt[20];
	m_A10 += gt[21];
	m_A11 += go[19];
	double RHS5 = Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	m_A12 += gt[22];
	m_A12 += gt[23];
	m_A12 += gt[24];
	m_A13 += go[22];
	double RHS6 = Idr[22];
	RHS6 += Idr[23];
	RHS6 += Idr[24];
	RHS6 -= go[23] * *cnV[23];
	RHS6 -= go[24] * *cnV[24];
	m_A14 += gt[25];
	m_A14 += gt[26];
	m_A15 += go[25];
	m_A16 += go[26];
	double RHS7 = Idr[25];
	RHS7 += Idr[26];
	m_A17 += gt[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A18 += go[27];
	double RHS8 = Idr[27];
	RHS8 += Idr[28];
	RHS8 += Idr[29];
	RHS8 -= go[28] * *cnV[28];
	RHS8 -= go[29] * *cnV[29];
	m_A19 += gt[30];
	m_A19 += gt[31];
	m_A19 += gt[32];
	m_A20 += go[30];
	double RHS9 = Idr[30];
	RHS9 += Idr[31];
	RHS9 += Idr[32];
	RHS9 -= go[31] * *cnV[31];
	RHS9 -= go[32] * *cnV[32];
	m_A21 += gt[33];
	m_A21 += gt[34];
	m_A21 += gt[35];
	m_A22 += go[33];
	double RHS10 = Idr[33];
	RHS10 += Idr[34];
	RHS10 += Idr[35];
	RHS10 -= go[34] * *cnV[34];
	RHS10 -= go[35] * *cnV[35];
	m_A23 += gt[36];
	m_A23 += gt[37];
	m_A23 += gt[38];
	m_A24 += go[36];
	double RHS11 = Idr[36];
	RHS11 += Idr[37];
	RHS11 += Idr[38];
	RHS11 -= go[37] * *cnV[37];
	RHS11 -= go[38] * *cnV[38];
	m_A34 += gt[39];
	m_A34 += gt[40];
	m_A34 += gt[41];
	m_A34 += gt[42];
	m_A34 += gt[43];
	m_A34 += gt[44];
	m_A34 += gt[45];
	m_A34 += gt[46];
	m_A34 += gt[47];
	m_A34 += gt[48];
	m_A33 += go[39];
	m_A32 += go[40];
	m_A31 += go[41];
	m_A30 += go[42];
	m_A29 += go[43];
	m_A28 += go[44];
	m_A27 += go[45];
	m_A26 += go[46];
	m_A25 += go[47];
	double RHS12 = Idr[39];
	RHS12 += Idr[40];
	RHS12 += Idr[41];
	RHS12 += Idr[42];
	RHS12 += Idr[43];
	RHS12 += Idr[44];
	RHS12 += Idr[45];
	RHS12 += Idr[46];
	RHS12 += Idr[47];
	RHS12 += Idr[48];
	RHS12 -= go[48] * *cnV[48];
	m_A38 += gt[49];
	m_A38 += gt[50];
	m_A38 += gt[51];
	m_A38 += gt[52];
	m_A38 += gt[53];
	m_A38 += gt[54];
	m_A36 += go[49];
	m_A39 += go[50];
	m_A37 += go[51];
	m_A37 += go[52];
	double RHS13 = Idr[49];
	RHS13 += Idr[50];
	RHS13 += Idr[51];
	RHS13 += Idr[52];
	RHS13 += Idr[53];
	RHS13 += Idr[54];
	RHS13 -= go[53] * *cnV[53];
	RHS13 -= go[54] * *cnV[54];
	m_A44 += gt[55];
	m_A44 += gt[56];
	m_A44 += gt[57];
	m_A44 += gt[58];
	m_A44 += gt[59];
	m_A41 += go[55];
	m_A40 += go[56];
	m_A43 += go[57];
	double RHS14 = Idr[55];
	RHS14 += Idr[56];
	RHS14 += Idr[57];
	RHS14 += Idr[58];
	RHS14 += Idr[59];
	RHS14 -= go[58] * *cnV[58];
	RHS14 -= go[59] * *cnV[59];
	const double f0 = 1.0 / m_A0;
	const double f0_13 = -f0 * m_A36;
	m_A37 += m_A1 * f0_13;
	RHS13 += f0_13 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_13 = -f1 * m_A37;
	m_A38 += m_A3 * f1_13;
	RHS13 += f1_13 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_14 = -f2 * m_A40;
	m_A44 += m_A5 * f2_14;
	RHS14 += f2_14 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_12 = -f3 * m_A25;
	m_A34 += m_A7 * f3_12;
	RHS12 += f3_12 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_12 = -f4 * m_A26;
	m_A34 += m_A9 * f4_12;
	RHS12 += f4_12 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_12 = -f5 * m_A27;
	m_A34 += m_A11 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_12 = -f6 * m_A28;
	m_A34 += m_A13 * f6_12;
	RHS12 += f6_12 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_12 = -f7 * m_A29;
	m_A34 += m_A15 * f7_12;
	m_A35 += m_A16 * f7_12;
	RHS12 += f7_12 * RHS7;
	const double f7_14 = -f7 * m_A41;
	m_A42 += m_A15 * f7_14;
	m_A44 += m_A16 * f7_14;
	RHS14 += f7_14 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_12 = -f8 * m_A30;
	m_A34 += m_A18 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f9 = 1.0 / m_A19;
	const double f9_12 = -f9 * m_A31;
	m_A34 += m_A20 * f9_12;
	RHS12 += f9_12 * RHS9;
	const double f10 = 1.0 / m_A21;
	const double f10_12 = -f10 * m_A32;
	m_A34 += m_A22 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f11 = 1.0 / m_A23;
	const double f11_12 = -f11 * m_A33;
	m_A34 += m_A24 * f11_12;
	RHS12 += f11_12 * RHS11;
	const double f12 = 1.0 / m_A34;
	const double f12_14 = -f12 * m_A42;
	m_A44 += m_A35 * f12_14;
	RHS14 += f12_14 * RHS12;
	const double f13 = 1.0 / m_A38;
	const double f13_14 = -f13 * m_A43;
	m_A44 += m_A39 * f13_14;
	RHS14 += f13_14 * RHS13;
	V[14] = RHS14 / m_A44;
	double tmp13 = 0.0;
	tmp13 += m_A39 * V[14];
	V[13] = (RHS13 - tmp13) / m_A38;
	double tmp12 = 0.0;
	tmp12 += m_A35 * V[14];
	V[12] = (RHS12 - tmp12) / m_A34;
	double tmp11 = 0.0;
	tmp11 += m_A24 * V[12];
	V[11] = (RHS11 - tmp11) / m_A23;
	double tmp10 = 0.0;
	tmp10 += m_A22 * V[12];
	V[10] = (RHS10 - tmp10) / m_A21;
	double tmp9 = 0.0;
	tmp9 += m_A20 * V[12];
	V[9] = (RHS9 - tmp9) / m_A19;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[12];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[12];
	tmp7 += m_A16 * V[14];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[12];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[12];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[12];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[12];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[14];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[13];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[1];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_53e1117fdb16f546_23_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A4 += go[4];
	m_A3 += go[5];
	m_A3 += go[6];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A5 += gt[13];
	m_A7 += go[10];
	m_A6 += go[11];
	m_A6 += go[12];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[13] * *cnV[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A9 += go[14];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[15] * *cnV[15];
	m_A12 += gt[16];
	m_A12 += gt[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A11 += go[16];
	m_A11 += go[17];
	m_A10 += go[18];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	m_A17 += gt[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A17 += gt[24];
	m_A17 += gt[25];
	m_A15 += go[21];
	m_A15 += go[22];
	m_A14 += go[23];
	double RHS5 = Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 -= go[24] * *cnV[24];
	RHS5 -= go[25] * *cnV[25];
	m_A22 += gt[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A22 += gt[30];
	m_A20 += go[26];
	m_A19 += go[27];
	double RHS6 = Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 -= go[28] * *cnV[28];
	RHS6 -= go[29] * *cnV[29];
	RHS6 -= go[30] * *cnV[30];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A11;
	m_A12 += m_A3 * f1_4;
	m_A13 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f1_5 = -f1 * m_A14;
	m_A16 += m_A3 * f1_5;
	m_A17 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_5 = -f2 * m_A15;
	m_A17 += m_A6 * f2_5;
	m_A18 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f2_6 = -f2 * m_A19;
	m_A21 += m_A6 * f2_6;
	m_A22 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_6 = -f3 * m_A20;
	m_A22 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_5 = -f4 * m_A16;
	m_A17 += m_A13 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_6 = -f5 * m_A21;
	m_A22 += m_A18 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[6];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[5];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[6];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[5];
	tmp2 += m_A7 * V[6];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	tmp1 += m_A4 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// cheekyms
static void nl_gcr_546396f65ce48700_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A2 += go[0];
	m_A1 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[2] * *cnV[2];
	m_A3 += gt[3];
	m_A3 += gt[4];
	m_A4 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A6 += gt[5];
	m_A6 += gt[6];
	m_A7 += go[5];
	m_A5 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	m_A11 += gt[7];
	m_A11 += gt[8];
	m_A11 += gt[9];
	m_A11 += gt[10];
	m_A11 += gt[11];
	m_A11 += gt[12];
	m_A9 += go[7];
	m_A10 += go[8];
	m_A8 += go[9];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A5;
	m_A6 += m_A1 * f0_2;
	m_A7 += m_A2 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	m_A11 += m_A2 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_3 = -f1 * m_A9;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	tmp0 += m_A2 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// dpatrol
static void nl_gcr_59cb6bf7cb9d17dc_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A6 += gt[4];
	m_A6 += gt[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A5 += go[4];
	m_A4 += go[5];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// breakout
static void nl_gcr_5a3419e2809520de_13_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A12 += gt[17];
	m_A11 += go[12];
	m_A10 += go[13];
	m_A9 += go[14];
	m_A8 += go[15];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A8;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A9;
	m_A12 += m_A3 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A10;
	m_A12 += m_A5 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_4 = -f3 * m_A11;
	m_A12 += m_A7 * f3_4;
	RHS4 += f3_4 * RHS3;
	V[4] = RHS4 / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[4];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tailg
static void nl_gcr_5ccf7da1202da2e5_31_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A0 += gt[7];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 += Idr[7];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	RHS0 -= go[7] * *cnV[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A3 += go[8];
	double RHS1 = Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A4 += gt[13];
	m_A5 += go[11];
	double RHS2 = Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A7 += go[14];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A9 += go[17];
	double RHS4 = Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	m_A10 += gt[20];
	m_A10 += gt[21];
	m_A10 += gt[22];
	m_A11 += go[20];
	double RHS5 = Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	m_A12 += gt[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A13 += go[23];
	double RHS6 = Idr[23];
	RHS6 += Idr[24];
	RHS6 += Idr[25];
	RHS6 -= go[24] * *cnV[24];
	RHS6 -= go[25] * *cnV[25];
	m_A14 += gt[26];
	m_A14 += gt[27];
	m_A14 += gt[28];
	m_A15 += go[26];
	double RHS7 = Idr[26];
	RHS7 += Idr[27];
	RHS7 += Idr[28];
	RHS7 -= go[27] * *cnV[27];
	RHS7 -= go[28] * *cnV[28];
	m_A16 += gt[29];
	m_A16 += gt[30];
	m_A16 += gt[31];
	m_A17 += go[29];
	double RHS8 = Idr[29];
	RHS8 += Idr[30];
	RHS8 += Idr[31];
	RHS8 -= go[30] * *cnV[30];
	RHS8 -= go[31] * *cnV[31];
	m_A19 += gt[32];
	m_A19 += gt[33];
	m_A20 += go[32];
	m_A18 += go[33];
	double RHS9 = Idr[32];
	RHS9 += Idr[33];
	m_A30 += gt[34];
	m_A30 += gt[35];
	m_A30 += gt[36];
	m_A30 += gt[37];
	m_A30 += gt[38];
	m_A30 += gt[39];
	m_A30 += gt[40];
	m_A30 += gt[41];
	m_A30 += gt[42];
	m_A30 += gt[43];
	m_A28 += go[34];
	m_A27 += go[35];
	m_A26 += go[36];
	m_A25 += go[37];
	m_A29 += go[38];
	m_A24 += go[39];
	m_A23 += go[40];
	m_A22 += go[41];
	m_A21 += go[42];
	double RHS10 = Idr[34];
	RHS10 += Idr[35];
	RHS10 += Idr[36];
	RHS10 += Idr[37];
	RHS10 += Idr[38];
	RHS10 += Idr[39];
	RHS10 += Idr[40];
	RHS10 += Idr[41];
	RHS10 += Idr[42];
	RHS10 += Idr[43];
	RHS10 -= go[43] * *cnV[43];
	const double f0 = 1.0 / m_A0;
	const double f0_9 = -f0 * m_A18;
	m_A19 += m_A1 * f0_9;
	RHS9 += f0_9 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_10 = -f1 * m_A21;
	m_A30 += m_A3 * f1_10;
	RHS10 += f1_10 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_10 = -f2 * m_A22;
	m_A30 += m_A5 * f2_10;
	RHS10 += f2_10 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_10 = -f3 * m_A23;
	m_A30 += m_A7 * f3_10;
	RHS10 += f3_10 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_10 = -f4 * m_A24;
	m_A30 += m_A9 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_10 = -f5 * m_A25;
	m_A30 += m_A11 * f5_10;
	RHS10 += f5_10 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_10 = -f6 * m_A26;
	m_A30 += m_A13 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_10 = -f7 * m_A27;
	m_A30 += m_A15 * f7_10;
	RHS10 += f7_10 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_10 = -f8 * m_A28;
	m_A30 += m_A17 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f9 = 1.0 / m_A19;
	const double f9_10 = -f9 * m_A29;
	m_A30 += m_A20 * f9_10;
	RHS10 += f9_10 * RHS9;
	V[10] = RHS10 / m_A30;
	double tmp9 = 0.0;
	tmp9 += m_A20 * V[10];
	V[9] = (RHS9 - tmp9) / m_A19;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[10];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[10];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[10];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[10];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[10];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[10];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[10];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[10];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[9];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starcas
static void nl_gcr_5d550fc7441617a2_109_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A8 += gt[10];
	m_A10 += go[8];
	m_A9 += go[9];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 += Idr[10];
	RHS4 -= go[10] * *cnV[10];
	m_A11 += gt[11];
	m_A11 += gt[12];
	m_A12 += go[11];
	double RHS5 = Idr[11];
	RHS5 += Idr[12];
	RHS5 -= go[12] * *cnV[12];
	m_A13 += gt[13];
	m_A13 += gt[14];
	m_A13 += gt[15];
	m_A15 += go[13];
	m_A14 += go[14];
	double RHS6 = Idr[13];
	RHS6 += Idr[14];
	RHS6 += Idr[15];
	RHS6 -= go[15] * *cnV[15];
	m_A16 += gt[16];
	m_A16 += gt[17];
	m_A16 += gt[18];
	m_A16 += gt[19];
	m_A17 += go[16];
	double RHS7 = Idr[16];
	RHS7 += Idr[17];
	RHS7 += Idr[18];
	RHS7 += Idr[19];
	RHS7 -= go[17] * *cnV[17];
	RHS7 -= go[18] * *cnV[18];
	RHS7 -= go[19] * *cnV[19];
	m_A18 += gt[20];
	m_A18 += gt[21];
	m_A19 += go[20];
	double RHS8 = Idr[20];
	RHS8 += Idr[21];
	RHS8 -= go[21] * *cnV[21];
	m_A20 += gt[22];
	m_A20 += gt[23];
	m_A20 += gt[24];
	m_A20 += gt[25];
	m_A20 += gt[26];
	m_A21 += go[22];
	m_A23 += go[23];
	m_A22 += go[24];
	double RHS9 = Idr[22];
	RHS9 += Idr[23];
	RHS9 += Idr[24];
	RHS9 += Idr[25];
	RHS9 += Idr[26];
	RHS9 -= go[25] * *cnV[25];
	RHS9 -= go[26] * *cnV[26];
	m_A24 += gt[27];
	m_A24 += gt[28];
	m_A24 += gt[29];
	m_A24 += gt[30];
	m_A24 += gt[31];
	m_A24 += gt[32];
	m_A24 += gt[33];
	m_A27 += go[27];
	m_A26 += go[28];
	m_A26 += go[29];
	m_A26 += go[30];
	m_A25 += go[31];
	m_A25 += go[32];
	double RHS10 = Idr[27];
	RHS10 += Idr[28];
	RHS10 += Idr[29];
	RHS10 += Idr[30];
	RHS10 += Idr[31];
	RHS10 += Idr[32];
	RHS10 += Idr[33];
	RHS10 -= go[33] * *cnV[33];
	m_A28 += gt[34];
	m_A28 += gt[35];
	m_A29 += go[34];
	double RHS11 = Idr[34];
	RHS11 += Idr[35];
	RHS11 -= go[35] * *cnV[35];
	m_A30 += gt[36];
	m_A30 += gt[37];
	m_A30 += gt[38];
	m_A30 += gt[39];
	m_A30 += gt[40];
	m_A31 += go[36];
	m_A31 += go[37];
	m_A32 += go[38];
	m_A32 += go[39];
	double RHS12 = Idr[36];
	RHS12 += Idr[37];
	RHS12 += Idr[38];
	RHS12 += Idr[39];
	RHS12 += Idr[40];
	RHS12 -= go[40] * *cnV[40];
	m_A33 += gt[41];
	m_A33 += gt[42];
	m_A33 += gt[43];
	m_A35 += go[41];
	m_A34 += go[42];
	double RHS13 = Idr[41];
	RHS13 += Idr[42];
	RHS13 += Idr[43];
	RHS13 -= go[43] * *cnV[43];
	m_A38 += gt[44];
	m_A38 += gt[45];
	m_A38 += gt[46];
	m_A37 += go[44];
	m_A36 += go[45];
	double RHS14 = Idr[44];
	RHS14 += Idr[45];
	RHS14 += Idr[46];
	RHS14 -= go[46] * *cnV[46];
	m_A42 += gt[47];
	m_A42 += gt[48];
	m_A42 += gt[49];
	m_A41 += go[47];
	m_A40 += go[48];
	double RHS15 = Idr[47];
	RHS15 += Idr[48];
	RHS15 += Idr[49];
	RHS15 -= go[49] * *cnV[49];
	m_A46 += gt[50];
	m_A46 += gt[51];
	m_A46 += gt[52];
	m_A44 += go[50];
	m_A47 += go[51];
	double RHS16 = Idr[50];
	RHS16 += Idr[51];
	RHS16 += Idr[52];
	RHS16 -= go[52] * *cnV[52];
	m_A50 += gt[53];
	m_A50 += gt[54];
	m_A50 += gt[55];
	m_A48 += go[53];
	m_A51 += go[54];
	double RHS17 = Idr[53];
	RHS17 += Idr[54];
	RHS17 += Idr[55];
	RHS17 -= go[55] * *cnV[55];
	m_A54 += gt[56];
	m_A54 += gt[57];
	m_A54 += gt[58];
	m_A54 += gt[59];
	m_A54 += gt[60];
	m_A54 += gt[61];
	m_A53 += go[56];
	m_A53 += go[57];
	m_A52 += go[58];
	double RHS18 = Idr[56];
	RHS18 += Idr[57];
	RHS18 += Idr[58];
	RHS18 += Idr[59];
	RHS18 += Idr[60];
	RHS18 += Idr[61];
	RHS18 -= go[59] * *cnV[59];
	RHS18 -= go[60] * *cnV[60];
	RHS18 -= go[61] * *cnV[61];
	m_A58 += gt[62];
	m_A58 += gt[63];
	m_A58 += gt[64];
	m_A58 += gt[65];
	m_A58 += gt[66];
	m_A58 += gt[67];
	m_A58 += gt[68];
	m_A57 += go[62];
	m_A59 += go[63];
	double RHS19 = Idr[62];
	RHS19 += Idr[63];
	RHS19 += Idr[64];
	RHS19 += Idr[65];
	RHS19 += Idr[66];
	RHS19 += Idr[67];
	RHS19 += Idr[68];
	RHS19 -= go[64] * *cnV[64];
	RHS19 -= go[65] * *cnV[65];
	RHS19 -= go[66] * *cnV[66];
	RHS19 -= go[67] * *cnV[67];
	RHS19 -= go[68] * *cnV[68];
	m_A63 += gt[69];
	m_A63 += gt[70];
	m_A63 += gt[71];
	m_A63 += gt[72];
	m_A63 += gt[73];
	m_A63 += gt[74];
	m_A64 += go[69];
	m_A64 += go[70];
	m_A61 += go[71];
	m_A61 += go[72];
	m_A61 += go[73];
	m_A60 += go[74];
	double RHS20 = Idr[69];
	RHS20 += Idr[70];
	RHS20 += Idr[71];
	RHS20 += Idr[72];
	RHS20 += Idr[73];
	RHS20 += Idr[74];
	m_A69 += gt[75];
	m_A69 += gt[76];
	m_A69 += gt[77];
	m_A69 += gt[78];
	m_A68 += go[75];
	m_A68 += go[76];
	m_A70 += go[77];
	m_A67 += go[78];
	double RHS21 = Idr[75];
	RHS21 += Idr[76];
	RHS21 += Idr[77];
	RHS21 += Idr[78];
	m_A73 += gt[79];
	m_A73 += gt[80];
	m_A73 += gt[81];
	m_A72 += go[79];
	m_A71 += go[80];
	double RHS22 = Idr[79];
	RHS22 += Idr[80];
	RHS22 += Idr[81];
	RHS22 -= go[81] * *cnV[81];
	m_A80 += gt[82];
	m_A80 += gt[83];
	m_A80 += gt[84];
	m_A80 += gt[85];
	m_A80 += gt[86];
	m_A80 += gt[87];
	m_A80 += gt[88];
	m_A80 += gt[89];
	m_A79 += go[82];
	m_A76 += go[83];
	m_A76 += go[84];
	m_A78 += go[85];
	m_A78 += go[86];
	m_A75 += go[87];
	double RHS23 = Idr[82];
	RHS23 += Idr[83];
	RHS23 += Idr[84];
	RHS23 += Idr[85];
	RHS23 += Idr[86];
	RHS23 += Idr[87];
	RHS23 += Idr[88];
	RHS23 += Idr[89];
	RHS23 -= go[88] * *cnV[88];
	RHS23 -= go[89] * *cnV[89];
	m_A87 += gt[90];
	m_A87 += gt[91];
	m_A87 += gt[92];
	m_A87 += gt[93];
	m_A84 += go[90];
	m_A89 += go[91];
	m_A83 += go[92];
	double RHS24 = Idr[90];
	RHS24 += Idr[91];
	RHS24 += Idr[92];
	RHS24 += Idr[93];
	RHS24 -= go[93] * *cnV[93];
	m_A95 += gt[94];
	m_A95 += gt[95];
	m_A95 += gt[96];
	m_A95 += gt[97];
	m_A91 += go[94];
	m_A96 += go[95];
	m_A90 += go[96];
	double RHS25 = Idr[94];
	RHS25 += Idr[95];
	RHS25 += Idr[96];
	RHS25 += Idr[97];
	RHS25 -= go[97] * *cnV[97];
	m_A99 += gt[98];
	m_A99 += gt[99];
	m_A99 += gt[100];
	m_A97 += go[98];
	m_A100 += go[99];
	double RHS26 = Idr[98];
	RHS26 += Idr[99];
	RHS26 += Idr[100];
	RHS26 -= go[100] * *cnV[100];
	m_A108 += gt[101];
	m_A108 += gt[102];
	m_A108 += gt[103];
	m_A108 += gt[104];
	m_A108 += gt[105];
	m_A108 += gt[106];
	m_A108 += gt[107];
	m_A108 += gt[108];
	m_A108 += gt[109];
	m_A104 += go[101];
	m_A101 += go[102];
	m_A107 += go[103];
	m_A103 += go[104];
	m_A102 += go[105];
	m_A106 += go[106];
	m_A105 += go[107];
	double RHS27 = Idr[101];
	RHS27 += Idr[102];
	RHS27 += Idr[103];
	RHS27 += Idr[104];
	RHS27 += Idr[105];
	RHS27 += Idr[106];
	RHS27 += Idr[107];
	RHS27 += Idr[108];
	RHS27 += Idr[109];
	RHS27 -= go[108] * *cnV[108];
	RHS27 -= go[109] * *cnV[109];
	const double f0 = 1.0 / m_A0;
	const double f0_14 = -f0 * m_A36;
	m_A38 += m_A1 * f0_14;
	RHS14 += f0_14 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_15 = -f1 * m_A40;
	m_A42 += m_A3 * f1_15;
	RHS15 += f1_15 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_24 = -f2 * m_A83;
	m_A87 += m_A5 * f2_24;
	RHS24 += f2_24 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_25 = -f3 * m_A90;
	m_A95 += m_A7 * f3_25;
	RHS25 += f3_25 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_14 = -f4 * m_A37;
	m_A38 += m_A9 * f4_14;
	m_A39 += m_A10 * f4_14;
	RHS14 += f4_14 * RHS4;
	const double f4_16 = -f4 * m_A44;
	m_A45 += m_A9 * f4_16;
	m_A46 += m_A10 * f4_16;
	RHS16 += f4_16 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_22 = -f5 * m_A71;
	m_A73 += m_A12 * f5_22;
	RHS22 += f5_22 * RHS5;
	const double f6 = 1.0 / m_A13;
	const double f6_15 = -f6 * m_A41;
	m_A42 += m_A14 * f6_15;
	m_A43 += m_A15 * f6_15;
	RHS15 += f6_15 * RHS6;
	const double f6_17 = -f6 * m_A48;
	m_A49 += m_A14 * f6_17;
	m_A50 += m_A15 * f6_17;
	RHS17 += f6_17 * RHS6;
	const double f7 = 1.0 / m_A16;
	const double f7_18 = -f7 * m_A52;
	m_A54 += m_A17 * f7_18;
	RHS18 += f7_18 * RHS7;
	const double f8 = 1.0 / m_A18;
	const double f8_19 = -f8 * m_A57;
	m_A59 += m_A19 * f8_19;
	RHS19 += f8_19 * RHS8;
	const double f8_27 = -f8 * m_A101;
	m_A108 += m_A19 * f8_27;
	RHS27 += f8_27 * RHS8;
	const double f9 = 1.0 / m_A20;
	const double f9_20 = -f9 * m_A60;
	m_A63 += m_A21 * f9_20;
	m_A65 += m_A22 * f9_20;
	m_A66 += m_A23 * f9_20;
	RHS20 += f9_20 * RHS9;
	const double f9_24 = -f9 * m_A84;
	m_A85 += m_A21 * f9_24;
	m_A87 += m_A22 * f9_24;
	m_A88 += m_A23 * f9_24;
	RHS24 += f9_24 * RHS9;
	const double f9_25 = -f9 * m_A91;
	m_A92 += m_A21 * f9_25;
	m_A94 += m_A22 * f9_25;
	m_A95 += m_A23 * f9_25;
	RHS25 += f9_25 * RHS9;
	const double f10 = 1.0 / m_A24;
	const double f10_18 = -f10 * m_A53;
	m_A54 += m_A25 * f10_18;
	m_A55 += m_A26 * f10_18;
	m_A56 += m_A27 * f10_18;
	RHS18 += f10_18 * RHS10;
	const double f10_20 = -f10 * m_A61;
	m_A62 += m_A25 * f10_20;
	m_A63 += m_A26 * f10_20;
	m_A64 += m_A27 * f10_20;
	RHS20 += f10_20 * RHS10;
	const double f10_23 = -f10 * m_A75;
	m_A77 += m_A25 * f10_23;
	m_A78 += m_A26 * f10_23;
	m_A80 += m_A27 * f10_23;
	RHS23 += f10_23 * RHS10;
	const double f11 = 1.0 / m_A28;
	const double f11_21 = -f11 * m_A67;
	m_A69 += m_A29 * f11_21;
	RHS21 += f11_21 * RHS11;
	const double f12 = 1.0 / m_A30;
	const double f12_21 = -f12 * m_A68;
	m_A69 += m_A31 * f12_21;
	m_A70 += m_A32 * f12_21;
	RHS21 += f12_21 * RHS12;
	const double f12_23 = -f12 * m_A76;
	m_A79 += m_A31 * f12_23;
	m_A80 += m_A32 * f12_23;
	RHS23 += f12_23 * RHS12;
	const double f13 = 1.0 / m_A33;
	const double f13_22 = -f13 * m_A72;
	m_A73 += m_A34 * f13_22;
	m_A74 += m_A35 * f13_22;
	RHS22 += f13_22 * RHS13;
	const double f13_26 = -f13 * m_A97;
	m_A98 += m_A34 * f13_26;
	m_A99 += m_A35 * f13_26;
	RHS26 += f13_26 * RHS13;
	const double f14 = 1.0 / m_A38;
	const double f14_16 = -f14 * m_A45;
	m_A46 += m_A39 * f14_16;
	RHS16 += f14_16 * RHS14;
	const double f15 = 1.0 / m_A42;
	const double f15_17 = -f15 * m_A49;
	m_A50 += m_A43 * f15_17;
	RHS17 += f15_17 * RHS15;
	const double f16 = 1.0 / m_A46;
	const double f16_27 = -f16 * m_A102;
	m_A108 += m_A47 * f16_27;
	RHS27 += f16_27 * RHS16;
	const double f17 = 1.0 / m_A50;
	const double f17_27 = -f17 * m_A103;
	m_A108 += m_A51 * f17_27;
	RHS27 += f17_27 * RHS17;
	const double f18 = 1.0 / m_A54;
	const double f18_20 = -f18 * m_A62;
	m_A63 += m_A55 * f18_20;
	m_A64 += m_A56 * f18_20;
	RHS20 += f18_20 * RHS18;
	const double f18_23 = -f18 * m_A77;
	m_A78 += m_A55 * f18_23;
	m_A80 += m_A56 * f18_23;
	RHS23 += f18_23 * RHS18;
	const double f19 = 1.0 / m_A58;
	const double f19_27 = -f19 * m_A104;
	m_A108 += m_A59 * f19_27;
	RHS27 += f19_27 * RHS19;
	const double f20 = 1.0 / m_A63;
	const double f20_23 = -f20 * m_A78;
	m_A80 += m_A64 * f20_23;
	m_A81 += m_A65 * f20_23;
	m_A82 += m_A66 * f20_23;
	RHS23 += f20_23 * RHS20;
	const double f20_24 = -f20 * m_A85;
	m_A86 += m_A64 * f20_24;
	m_A87 += m_A65 * f20_24;
	m_A88 += m_A66 * f20_24;
	RHS24 += f20_24 * RHS20;
	const double f20_25 = -f20 * m_A92;
	m_A93 += m_A64 * f20_25;
	m_A94 += m_A65 * f20_25;
	m_A95 += m_A66 * f20_25;
	RHS25 += f20_25 * RHS20;
	const double f21 = 1.0 / m_A69;
	const double f21_23 = -f21 * m_A79;
	m_A80 += m_A70 * f21_23;
	RHS23 += f21_23 * RHS21;
	const double f22 = 1.0 / m_A73;
	const double f22_26 = -f22 * m_A98;
	m_A99 += m_A74 * f22_26;
	RHS26 += f22_26 * RHS22;
	const double f23 = 1.0 / m_A80;
	const double f23_24 = -f23 * m_A86;
	m_A87 += m_A81 * f23_24;
	m_A88 += m_A82 * f23_24;
	RHS24 += f23_24 * RHS23;
	const double f23_25 = -f23 * m_A93;
	m_A94 += m_A81 * f23_25;
	m_A95 += m_A82 * f23_25;
	RHS25 += f23_25 * RHS23;
	const double f24 = 1.0 / m_A87;
	const double f24_25 = -f24 * m_A94;
	m_A95 += m_A88 * f24_25;
	m_A96 += m_A89 * f24_25;
	RHS25 += f24_25 * RHS24;
	const double f24_27 = -f24 * m_A105;
	m_A106 += m_A88 * f24_27;
	m_A108 += m_A89 * f24_27;
	RHS27 += f24_27 * RHS24;
	const double f25 = 1.0 / m_A95;
	const double f25_27 = -f25 * m_A106;
	m_A108 += m_A96 * f25_27;
	RHS27 += f25_27 * RHS25;
	const double f26 = 1.0 / m_A99;
	const double f26_27 = -f26 * m_A107;
	m_A108 += m_A100 * f26_27;
	RHS27 += f26_27 * RHS26;
	V[27] = RHS27 / m_A108;
	double tmp26 = 0.0;
	tmp26 += m_A100 * V[27];
	V[26] = (RHS26 - tmp26) / m_A99;
	double tmp25 = 0.0;
	tmp25 += m_A96 * V[27];
	V[25] = (RHS25 - tmp25) / m_A95;
	double tmp24 = 0.0;
	tmp24 += m_A88 * V[25];
	tmp24 += m_A89 * V[27];
	V[24] = (RHS24 - tmp24) / m_A87;
	double tmp23 = 0.0;
	tmp23 += m_A81 * V[24];
	tmp23 += m_A82 * V[25];
	V[23] = (RHS23 - tmp23) / m_A80;
	double tmp22 = 0.0;
	tmp22 += m_A74 * V[26];
	V[22] = (RHS22 - tmp22) / m_A73;
	double tmp21 = 0.0;
	tmp21 += m_A70 * V[23];
	V[21] = (RHS21 - tmp21) / m_A69;
	double tmp20 = 0.0;
	tmp20 += m_A64 * V[23];
	tmp20 += m_A65 * V[24];
	tmp20 += m_A66 * V[25];
	V[20] = (RHS20 - tmp20) / m_A63;
	double tmp19 = 0.0;
	tmp19 += m_A59 * V[27];
	V[19] = (RHS19 - tmp19) / m_A58;
	double tmp18 = 0.0;
	tmp18 += m_A55 * V[20];
	tmp18 += m_A56 * V[23];
	V[18] = (RHS18 - tmp18) / m_A54;
	double tmp17 = 0.0;
	tmp17 += m_A51 * V[27];
	V[17] = (RHS17 - tmp17) / m_A50;
	double tmp16 = 0.0;
	tmp16 += m_A47 * V[27];
	V[16] = (RHS16 - tmp16) / m_A46;
	double tmp15 = 0.0;
	tmp15 += m_A43 * V[17];
	V[15] = (RHS15 - tmp15) / m_A42;
	double tmp14 = 0.0;
	tmp14 += m_A39 * V[16];
	V[14] = (RHS14 - tmp14) / m_A38;
	double tmp13 = 0.0;
	tmp13 += m_A34 * V[22];
	tmp13 += m_A35 * V[26];
	V[13] = (RHS13 - tmp13) / m_A33;
	double tmp12 = 0.0;
	tmp12 += m_A31 * V[21];
	tmp12 += m_A32 * V[23];
	V[12] = (RHS12 - tmp12) / m_A30;
	double tmp11 = 0.0;
	tmp11 += m_A29 * V[21];
	V[11] = (RHS11 - tmp11) / m_A28;
	double tmp10 = 0.0;
	tmp10 += m_A25 * V[18];
	tmp10 += m_A26 * V[20];
	tmp10 += m_A27 * V[23];
	V[10] = (RHS10 - tmp10) / m_A24;
	double tmp9 = 0.0;
	tmp9 += m_A21 * V[20];
	tmp9 += m_A22 * V[24];
	tmp9 += m_A23 * V[25];
	V[9] = (RHS9 - tmp9) / m_A20;
	double tmp8 = 0.0;
	tmp8 += m_A19 * V[27];
	V[8] = (RHS8 - tmp8) / m_A18;
	double tmp7 = 0.0;
	tmp7 += m_A17 * V[18];
	V[7] = (RHS7 - tmp7) / m_A16;
	double tmp6 = 0.0;
	tmp6 += m_A14 * V[15];
	tmp6 += m_A15 * V[17];
	V[6] = (RHS6 - tmp6) / m_A13;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[22];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[14];
	tmp4 += m_A10 * V[16];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[25];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[24];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[15];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[14];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// zac1b11142
static void nl_gcr_6041272373b8603c_178_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	double m_A119(0.0);
	double m_A120(0.0);
	double m_A121(0.0);
	double m_A122(0.0);
	double m_A123(0.0);
	double m_A124(0.0);
	double m_A125(0.0);
	double m_A126(0.0);
	double m_A127(0.0);
	double m_A128(0.0);
	double m_A129(0.0);
	double m_A130(0.0);
	double m_A131(0.0);
	double m_A132(0.0);
	double m_A133(0.0);
	double m_A134(0.0);
	double m_A135(0.0);
	double m_A136(0.0);
	double m_A137(0.0);
	double m_A138(0.0);
	double m_A139(0.0);
	double m_A140(0.0);
	double m_A141(0.0);
	double m_A142(0.0);
	double m_A143(0.0);
	double m_A144(0.0);
	double m_A145(0.0);
	double m_A146(0.0);
	double m_A147(0.0);
	double m_A148(0.0);
	double m_A149(0.0);
	double m_A150(0.0);
	double m_A151(0.0);
	double m_A152(0.0);
	double m_A153(0.0);
	double m_A154(0.0);
	double m_A155(0.0);
	double m_A156(0.0);
	double m_A157(0.0);
	double m_A158(0.0);
	double m_A159(0.0);
	double m_A160(0.0);
	double m_A161(0.0);
	double m_A162(0.0);
	double m_A163(0.0);
	double m_A164(0.0);
	double m_A165(0.0);
	double m_A166(0.0);
	double m_A167(0.0);
	double m_A168(0.0);
	double m_A169(0.0);
	double m_A170(0.0);
	double m_A171(0.0);
	double m_A172(0.0);
	double m_A173(0.0);
	double m_A174(0.0);
	double m_A175(0.0);
	double m_A176(0.0);
	double m_A177(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A6 += go[5];
	m_A5 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	m_A7 += gt[7];
	m_A7 += gt[8];
	m_A8 += go[7];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 -= go[8] * *cnV[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A9 += gt[11];
	m_A9 += gt[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A10 += go[9];
	double RHS4 = Idr[9];
	RHS4 += Idr[10];
	RHS4 += Idr[11];
	RHS4 += Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 -= go[10] * *cnV[10];
	RHS4 -= go[11] * *cnV[11];
	RHS4 -= go[12] * *cnV[12];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	RHS4 -= go[15] * *cnV[15];
	m_A11 += gt[16];
	m_A11 += gt[17];
	m_A12 += go[16];
	double RHS5 = Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[17] * *cnV[17];
	m_A13 += gt[18];
	m_A13 += gt[19];
	m_A14 += go[18];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 -= go[19] * *cnV[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A16 += go[20];
	double RHS7 = Idr[20];
	RHS7 += Idr[21];
	RHS7 -= go[21] * *cnV[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A18 += go[22];
	double RHS8 = Idr[22];
	RHS8 += Idr[23];
	RHS8 -= go[23] * *cnV[23];
	m_A19 += gt[24];
	m_A19 += gt[25];
	m_A20 += go[24];
	m_A21 += go[25];
	double RHS9 = Idr[24];
	RHS9 += Idr[25];
	m_A22 += gt[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A23 += go[26];
	m_A23 += go[27];
	double RHS10 = Idr[26];
	RHS10 += Idr[27];
	RHS10 += Idr[28];
	RHS10 += Idr[29];
	RHS10 -= go[28] * *cnV[28];
	RHS10 -= go[29] * *cnV[29];
	m_A24 += gt[30];
	m_A24 += gt[31];
	m_A24 += gt[32];
	m_A24 += gt[33];
	m_A25 += go[30];
	m_A25 += go[31];
	double RHS11 = Idr[30];
	RHS11 += Idr[31];
	RHS11 += Idr[32];
	RHS11 += Idr[33];
	RHS11 -= go[32] * *cnV[32];
	RHS11 -= go[33] * *cnV[33];
	m_A26 += gt[34];
	m_A26 += gt[35];
	m_A26 += gt[36];
	m_A26 += gt[37];
	m_A27 += go[34];
	m_A27 += go[35];
	double RHS12 = Idr[34];
	RHS12 += Idr[35];
	RHS12 += Idr[36];
	RHS12 += Idr[37];
	RHS12 -= go[36] * *cnV[36];
	RHS12 -= go[37] * *cnV[37];
	m_A28 += gt[38];
	m_A28 += gt[39];
	m_A29 += go[38];
	double RHS13 = Idr[38];
	RHS13 += Idr[39];
	RHS13 -= go[39] * *cnV[39];
	m_A30 += gt[40];
	m_A30 += gt[41];
	m_A30 += gt[42];
	m_A31 += go[40];
	double RHS14 = Idr[40];
	RHS14 += Idr[41];
	RHS14 += Idr[42];
	RHS14 -= go[41] * *cnV[41];
	RHS14 -= go[42] * *cnV[42];
	m_A32 += gt[43];
	m_A32 += gt[44];
	m_A32 += gt[45];
	m_A33 += go[43];
	double RHS15 = Idr[43];
	RHS15 += Idr[44];
	RHS15 += Idr[45];
	RHS15 -= go[44] * *cnV[44];
	RHS15 -= go[45] * *cnV[45];
	m_A34 += gt[46];
	m_A34 += gt[47];
	m_A34 += gt[48];
	m_A35 += go[46];
	double RHS16 = Idr[46];
	RHS16 += Idr[47];
	RHS16 += Idr[48];
	RHS16 -= go[47] * *cnV[47];
	RHS16 -= go[48] * *cnV[48];
	m_A36 += gt[49];
	m_A36 += gt[50];
	m_A37 += go[49];
	double RHS17 = Idr[49];
	RHS17 += Idr[50];
	RHS17 -= go[50] * *cnV[50];
	m_A38 += gt[51];
	m_A38 += gt[52];
	m_A38 += gt[53];
	m_A38 += gt[54];
	m_A39 += go[51];
	double RHS18 = Idr[51];
	RHS18 += Idr[52];
	RHS18 += Idr[53];
	RHS18 += Idr[54];
	RHS18 -= go[52] * *cnV[52];
	RHS18 -= go[53] * *cnV[53];
	RHS18 -= go[54] * *cnV[54];
	m_A40 += gt[55];
	m_A40 += gt[56];
	m_A40 += gt[57];
	m_A40 += gt[58];
	m_A40 += gt[59];
	m_A41 += go[55];
	double RHS19 = Idr[55];
	RHS19 += Idr[56];
	RHS19 += Idr[57];
	RHS19 += Idr[58];
	RHS19 += Idr[59];
	RHS19 -= go[56] * *cnV[56];
	RHS19 -= go[57] * *cnV[57];
	RHS19 -= go[58] * *cnV[58];
	RHS19 -= go[59] * *cnV[59];
	m_A42 += gt[60];
	m_A42 += gt[61];
	m_A42 += gt[62];
	m_A42 += gt[63];
	m_A42 += gt[64];
	m_A42 += gt[65];
	m_A42 += gt[66];
	m_A43 += go[60];
	double RHS20 = Idr[60];
	RHS20 += Idr[61];
	RHS20 += Idr[62];
	RHS20 += Idr[63];
	RHS20 += Idr[64];
	RHS20 += Idr[65];
	RHS20 += Idr[66];
	RHS20 -= go[61] * *cnV[61];
	RHS20 -= go[62] * *cnV[62];
	RHS20 -= go[63] * *cnV[63];
	RHS20 -= go[64] * *cnV[64];
	RHS20 -= go[65] * *cnV[65];
	RHS20 -= go[66] * *cnV[66];
	m_A44 += gt[67];
	m_A44 += gt[68];
	m_A44 += gt[69];
	m_A45 += go[67];
	double RHS21 = Idr[67];
	RHS21 += Idr[68];
	RHS21 += Idr[69];
	RHS21 -= go[68] * *cnV[68];
	RHS21 -= go[69] * *cnV[69];
	m_A46 += gt[70];
	m_A46 += gt[71];
	m_A48 += go[70];
	m_A47 += go[71];
	double RHS22 = Idr[70];
	RHS22 += Idr[71];
	m_A49 += gt[72];
	m_A49 += gt[73];
	m_A49 += gt[74];
	m_A51 += go[72];
	m_A50 += go[73];
	double RHS23 = Idr[72];
	RHS23 += Idr[73];
	RHS23 += Idr[74];
	RHS23 -= go[74] * *cnV[74];
	m_A52 += gt[75];
	m_A52 += gt[76];
	m_A52 += gt[77];
	m_A53 += go[75];
	double RHS24 = Idr[75];
	RHS24 += Idr[76];
	RHS24 += Idr[77];
	RHS24 -= go[76] * *cnV[76];
	RHS24 -= go[77] * *cnV[77];
	m_A54 += gt[78];
	m_A54 += gt[79];
	m_A54 += gt[80];
	m_A54 += gt[81];
	m_A55 += go[78];
	m_A55 += go[79];
	m_A56 += go[80];
	double RHS25 = Idr[78];
	RHS25 += Idr[79];
	RHS25 += Idr[80];
	RHS25 += Idr[81];
	RHS25 -= go[81] * *cnV[81];
	m_A60 += gt[82];
	m_A60 += gt[83];
	m_A60 += gt[84];
	m_A59 += go[82];
	m_A58 += go[83];
	m_A57 += go[84];
	double RHS26 = Idr[82];
	RHS26 += Idr[83];
	RHS26 += Idr[84];
	m_A62 += gt[85];
	m_A62 += gt[86];
	m_A63 += go[85];
	m_A64 += go[86];
	double RHS27 = Idr[85];
	RHS27 += Idr[86];
	m_A65 += gt[87];
	m_A65 += gt[88];
	m_A65 += gt[89];
	m_A66 += go[87];
	double RHS28 = Idr[87];
	RHS28 += Idr[88];
	RHS28 += Idr[89];
	RHS28 -= go[88] * *cnV[88];
	RHS28 -= go[89] * *cnV[89];
	m_A67 += gt[90];
	m_A67 += gt[91];
	m_A67 += gt[92];
	m_A69 += go[90];
	m_A68 += go[91];
	double RHS29 = Idr[90];
	RHS29 += Idr[91];
	RHS29 += Idr[92];
	RHS29 -= go[92] * *cnV[92];
	m_A70 += gt[93];
	m_A70 += gt[94];
	m_A72 += go[93];
	m_A71 += go[94];
	double RHS30 = Idr[93];
	RHS30 += Idr[94];
	m_A74 += gt[95];
	m_A74 += gt[96];
	m_A73 += go[95];
	double RHS31 = Idr[95];
	RHS31 += Idr[96];
	RHS31 -= go[96] * *cnV[96];
	m_A82 += gt[97];
	m_A82 += gt[98];
	m_A82 += gt[99];
	m_A82 += gt[100];
	m_A82 += gt[101];
	m_A82 += gt[102];
	m_A82 += gt[103];
	m_A82 += gt[104];
	m_A82 += gt[105];
	m_A82 += gt[106];
	m_A81 += go[97];
	m_A80 += go[98];
	m_A79 += go[99];
	m_A78 += go[100];
	m_A78 += go[101];
	m_A77 += go[102];
	m_A77 += go[103];
	m_A76 += go[104];
	m_A76 += go[105];
	m_A75 += go[106];
	double RHS32 = Idr[97];
	RHS32 += Idr[98];
	RHS32 += Idr[99];
	RHS32 += Idr[100];
	RHS32 += Idr[101];
	RHS32 += Idr[102];
	RHS32 += Idr[103];
	RHS32 += Idr[104];
	RHS32 += Idr[105];
	RHS32 += Idr[106];
	m_A86 += gt[107];
	m_A86 += gt[108];
	m_A86 += gt[109];
	m_A86 += gt[110];
	m_A86 += gt[111];
	m_A86 += gt[112];
	m_A86 += gt[113];
	m_A85 += go[107];
	m_A84 += go[108];
	double RHS33 = Idr[107];
	RHS33 += Idr[108];
	RHS33 += Idr[109];
	RHS33 += Idr[110];
	RHS33 += Idr[111];
	RHS33 += Idr[112];
	RHS33 += Idr[113];
	RHS33 -= go[109] * *cnV[109];
	RHS33 -= go[110] * *cnV[110];
	RHS33 -= go[111] * *cnV[111];
	RHS33 -= go[112] * *cnV[112];
	RHS33 -= go[113] * *cnV[113];
	m_A90 += gt[114];
	m_A90 += gt[115];
	m_A91 += go[114];
	m_A88 += go[115];
	double RHS34 = Idr[114];
	RHS34 += Idr[115];
	m_A94 += gt[116];
	m_A94 += gt[117];
	m_A94 += gt[118];
	m_A94 += gt[119];
	m_A94 += gt[120];
	m_A92 += go[116];
	m_A93 += go[117];
	m_A93 += go[118];
	double RHS35 = Idr[116];
	RHS35 += Idr[117];
	RHS35 += Idr[118];
	RHS35 += Idr[119];
	RHS35 += Idr[120];
	RHS35 -= go[119] * *cnV[119];
	RHS35 -= go[120] * *cnV[120];
	m_A97 += gt[121];
	m_A97 += gt[122];
	m_A98 += go[121];
	m_A96 += go[122];
	double RHS36 = Idr[121];
	RHS36 += Idr[122];
	m_A100 += gt[123];
	m_A100 += gt[124];
	m_A99 += go[123];
	m_A102 += go[124];
	double RHS37 = Idr[123];
	RHS37 += Idr[124];
	m_A105 += gt[125];
	m_A105 += gt[126];
	m_A107 += go[125];
	m_A103 += go[126];
	double RHS38 = Idr[125];
	RHS38 += Idr[126];
	m_A111 += gt[127];
	m_A111 += gt[128];
	m_A111 += gt[129];
	m_A109 += go[127];
	m_A108 += go[128];
	double RHS39 = Idr[127];
	RHS39 += Idr[128];
	RHS39 += Idr[129];
	RHS39 -= go[129] * *cnV[129];
	m_A116 += gt[130];
	m_A116 += gt[131];
	m_A116 += gt[132];
	m_A114 += go[130];
	m_A113 += go[131];
	m_A118 += go[132];
	double RHS40 = Idr[130];
	RHS40 += Idr[131];
	RHS40 += Idr[132];
	m_A120 += gt[133];
	m_A120 += gt[134];
	m_A120 += gt[135];
	m_A120 += gt[136];
	m_A121 += go[133];
	m_A119 += go[134];
	double RHS41 = Idr[133];
	RHS41 += Idr[134];
	RHS41 += Idr[135];
	RHS41 += Idr[136];
	RHS41 -= go[135] * *cnV[135];
	RHS41 -= go[136] * *cnV[136];
	m_A124 += gt[137];
	m_A124 += gt[138];
	m_A123 += go[137];
	m_A122 += go[138];
	double RHS42 = Idr[137];
	RHS42 += Idr[138];
	m_A131 += gt[139];
	m_A131 += gt[140];
	m_A131 += gt[141];
	m_A131 += gt[142];
	m_A131 += gt[143];
	m_A131 += gt[144];
	m_A132 += go[139];
	m_A132 += go[140];
	m_A129 += go[141];
	m_A128 += go[142];
	m_A127 += go[143];
	m_A126 += go[144];
	double RHS43 = Idr[139];
	RHS43 += Idr[140];
	RHS43 += Idr[141];
	RHS43 += Idr[142];
	RHS43 += Idr[143];
	RHS43 += Idr[144];
	m_A141 += gt[145];
	m_A141 += gt[146];
	m_A141 += gt[147];
	m_A141 += gt[148];
	m_A141 += gt[149];
	m_A141 += gt[150];
	m_A141 += gt[151];
	m_A136 += go[145];
	m_A135 += go[146];
	m_A134 += go[147];
	m_A133 += go[148];
	m_A140 += go[149];
	m_A137 += go[150];
	m_A139 += go[151];
	double RHS44 = Idr[145];
	RHS44 += Idr[146];
	RHS44 += Idr[147];
	RHS44 += Idr[148];
	RHS44 += Idr[149];
	RHS44 += Idr[150];
	RHS44 += Idr[151];
	m_A143 += gt[152];
	m_A143 += gt[153];
	m_A143 += gt[154];
	m_A143 += gt[155];
	m_A144 += go[152];
	m_A142 += go[153];
	double RHS45 = Idr[152];
	RHS45 += Idr[153];
	RHS45 += Idr[154];
	RHS45 += Idr[155];
	RHS45 -= go[154] * *cnV[154];
	RHS45 -= go[155] * *cnV[155];
	m_A147 += gt[156];
	m_A147 += gt[157];
	m_A145 += go[156];
	m_A148 += go[157];
	double RHS46 = Idr[156];
	RHS46 += Idr[157];
	m_A155 += gt[158];
	m_A155 += gt[159];
	m_A155 += gt[160];
	m_A155 += gt[161];
	m_A155 += gt[162];
	m_A155 += gt[163];
	m_A150 += go[158];
	m_A151 += go[159];
	m_A154 += go[160];
	m_A154 += go[161];
	double RHS47 = Idr[158];
	RHS47 += Idr[159];
	RHS47 += Idr[160];
	RHS47 += Idr[161];
	RHS47 += Idr[162];
	RHS47 += Idr[163];
	RHS47 -= go[162] * *cnV[162];
	RHS47 -= go[163] * *cnV[163];
	m_A162 += gt[164];
	m_A162 += gt[165];
	m_A162 += gt[166];
	m_A162 += gt[167];
	m_A162 += gt[168];
	m_A163 += go[164];
	m_A159 += go[165];
	m_A160 += go[166];
	m_A158 += go[167];
	m_A157 += go[168];
	double RHS48 = Idr[164];
	RHS48 += Idr[165];
	RHS48 += Idr[166];
	RHS48 += Idr[167];
	RHS48 += Idr[168];
	m_A169 += gt[169];
	m_A169 += gt[170];
	m_A169 += gt[171];
	m_A169 += gt[172];
	m_A167 += go[169];
	m_A164 += go[170];
	m_A165 += go[171];
	double RHS49 = Idr[169];
	RHS49 += Idr[170];
	RHS49 += Idr[171];
	RHS49 += Idr[172];
	RHS49 -= go[172] * *cnV[172];
	m_A177 += gt[173];
	m_A177 += gt[174];
	m_A177 += gt[175];
	m_A177 += gt[176];
	m_A177 += gt[177];
	m_A171 += go[173];
	m_A172 += go[174];
	m_A175 += go[175];
	double RHS50 = Idr[173];
	RHS50 += Idr[174];
	RHS50 += Idr[175];
	RHS50 += Idr[176];
	RHS50 += Idr[177];
	RHS50 -= go[176] * *cnV[176];
	RHS50 -= go[177] * *cnV[177];
	const double f0 = 1.0 / m_A0;
	const double f0_26 = -f0 * m_A57;
	m_A60 += m_A1 * f0_26;
	RHS26 += f0_26 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_26 = -f1 * m_A58;
	m_A60 += m_A3 * f1_26;
	RHS26 += f1_26 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_26 = -f2 * m_A59;
	m_A60 += m_A5 * f2_26;
	m_A61 += m_A6 * f2_26;
	RHS26 += f2_26 * RHS2;
	const double f2_34 = -f2 * m_A88;
	m_A89 += m_A5 * f2_34;
	m_A90 += m_A6 * f2_34;
	RHS34 += f2_34 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_36 = -f3 * m_A96;
	m_A97 += m_A8 * f3_36;
	RHS36 += f3_36 * RHS3;
	const double f3_48 = -f3 * m_A157;
	m_A160 += m_A8 * f3_48;
	RHS48 += f3_48 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_50 = -f4 * m_A171;
	m_A173 += m_A10 * f4_50;
	RHS50 += f4_50 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_44 = -f5 * m_A133;
	m_A141 += m_A12 * f5_44;
	RHS44 += f5_44 * RHS5;
	const double f6 = 1.0 / m_A13;
	const double f6_44 = -f6 * m_A134;
	m_A141 += m_A14 * f6_44;
	RHS44 += f6_44 * RHS6;
	const double f7 = 1.0 / m_A15;
	const double f7_44 = -f7 * m_A135;
	m_A141 += m_A16 * f7_44;
	RHS44 += f7_44 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_44 = -f8 * m_A136;
	m_A141 += m_A18 * f8_44;
	RHS44 += f8_44 * RHS8;
	const double f9 = 1.0 / m_A19;
	const double f9_32 = -f9 * m_A75;
	m_A82 += m_A20 * f9_32;
	m_A83 += m_A21 * f9_32;
	RHS32 += f9_32 * RHS9;
	const double f9_44 = -f9 * m_A137;
	m_A138 += m_A20 * f9_44;
	m_A141 += m_A21 * f9_44;
	RHS44 += f9_44 * RHS9;
	const double f10 = 1.0 / m_A22;
	const double f10_32 = -f10 * m_A76;
	m_A82 += m_A23 * f10_32;
	RHS32 += f10_32 * RHS10;
	const double f11 = 1.0 / m_A24;
	const double f11_32 = -f11 * m_A77;
	m_A82 += m_A25 * f11_32;
	RHS32 += f11_32 * RHS11;
	const double f12 = 1.0 / m_A26;
	const double f12_32 = -f12 * m_A78;
	m_A82 += m_A27 * f12_32;
	RHS32 += f12_32 * RHS12;
	const double f13 = 1.0 / m_A28;
	const double f13_31 = -f13 * m_A73;
	m_A74 += m_A29 * f13_31;
	RHS31 += f13_31 * RHS13;
	const double f13_43 = -f13 * m_A126;
	m_A129 += m_A29 * f13_43;
	RHS43 += f13_43 * RHS13;
	const double f14 = 1.0 / m_A30;
	const double f14_32 = -f14 * m_A79;
	m_A82 += m_A31 * f14_32;
	RHS32 += f14_32 * RHS14;
	const double f15 = 1.0 / m_A32;
	const double f15_35 = -f15 * m_A92;
	m_A94 += m_A33 * f15_35;
	RHS35 += f15_35 * RHS15;
	const double f16 = 1.0 / m_A34;
	const double f16_32 = -f16 * m_A80;
	m_A82 += m_A35 * f16_32;
	RHS32 += f16_32 * RHS16;
	const double f17 = 1.0 / m_A36;
	const double f17_32 = -f17 * m_A81;
	m_A82 += m_A37 * f17_32;
	RHS32 += f17_32 * RHS17;
	const double f18 = 1.0 / m_A38;
	const double f18_42 = -f18 * m_A122;
	m_A124 += m_A39 * f18_42;
	RHS42 += f18_42 * RHS18;
	const double f19 = 1.0 / m_A40;
	const double f19_33 = -f19 * m_A84;
	m_A86 += m_A41 * f19_33;
	RHS33 += f19_33 * RHS19;
	const double f20 = 1.0 / m_A42;
	const double f20_47 = -f20 * m_A150;
	m_A153 += m_A43 * f20_47;
	RHS47 += f20_47 * RHS20;
	const double f21 = 1.0 / m_A44;
	const double f21_45 = -f21 * m_A142;
	m_A144 += m_A45 * f21_45;
	RHS45 += f21_45 * RHS21;
	const double f21_48 = -f21 * m_A158;
	m_A162 += m_A45 * f21_48;
	RHS48 += f21_48 * RHS21;
	const double f22 = 1.0 / m_A46;
	const double f22_33 = -f22 * m_A85;
	m_A86 += m_A47 * f22_33;
	m_A87 += m_A48 * f22_33;
	RHS33 += f22_33 * RHS22;
	const double f22_39 = -f22 * m_A108;
	m_A110 += m_A47 * f22_39;
	m_A111 += m_A48 * f22_39;
	RHS39 += f22_39 * RHS22;
	const double f23 = 1.0 / m_A49;
	const double f23_37 = -f23 * m_A99;
	m_A100 += m_A50 * f23_37;
	m_A101 += m_A51 * f23_37;
	RHS37 += f23_37 * RHS23;
	const double f23_38 = -f23 * m_A103;
	m_A104 += m_A50 * f23_38;
	m_A105 += m_A51 * f23_38;
	RHS38 += f23_38 * RHS23;
	const double f24 = 1.0 / m_A52;
	const double f24_48 = -f24 * m_A159;
	m_A162 += m_A53 * f24_48;
	RHS48 += f24_48 * RHS24;
	const double f25 = 1.0 / m_A54;
	const double f25_35 = -f25 * m_A93;
	m_A94 += m_A55 * f25_35;
	m_A95 += m_A56 * f25_35;
	RHS35 += f25_35 * RHS25;
	const double f25_40 = -f25 * m_A113;
	m_A115 += m_A55 * f25_40;
	m_A116 += m_A56 * f25_40;
	RHS40 += f25_40 * RHS25;
	const double f26 = 1.0 / m_A60;
	const double f26_34 = -f26 * m_A89;
	m_A90 += m_A61 * f26_34;
	RHS34 += f26_34 * RHS26;
	const double f27 = 1.0 / m_A62;
	const double f27_39 = -f27 * m_A109;
	m_A111 += m_A63 * f27_39;
	m_A112 += m_A64 * f27_39;
	RHS39 += f27_39 * RHS27;
	const double f27_49 = -f27 * m_A164;
	m_A166 += m_A63 * f27_49;
	m_A169 += m_A64 * f27_49;
	RHS49 += f27_49 * RHS27;
	const double f28 = 1.0 / m_A65;
	const double f28_41 = -f28 * m_A119;
	m_A121 += m_A66 * f28_41;
	RHS41 += f28_41 * RHS28;
	const double f28_43 = -f28 * m_A127;
	m_A131 += m_A66 * f28_43;
	RHS43 += f28_43 * RHS28;
	const double f29 = 1.0 / m_A67;
	const double f29_40 = -f29 * m_A114;
	m_A116 += m_A68 * f29_40;
	m_A117 += m_A69 * f29_40;
	RHS40 += f29_40 * RHS29;
	const double f29_46 = -f29 * m_A145;
	m_A146 += m_A68 * f29_46;
	m_A147 += m_A69 * f29_46;
	RHS46 += f29_46 * RHS29;
	const double f30 = 1.0 / m_A70;
	const double f30_42 = -f30 * m_A123;
	m_A124 += m_A71 * f30_42;
	m_A125 += m_A72 * f30_42;
	RHS42 += f30_42 * RHS30;
	const double f30_43 = -f30 * m_A128;
	m_A130 += m_A71 * f30_43;
	m_A131 += m_A72 * f30_43;
	RHS43 += f30_43 * RHS30;
	const double f31 = 1.0 / m_A74;
	const double f31_43 = -f31 * m_A129;
	RHS43 += f31_43 * RHS31;
	const double f32 = 1.0 / m_A82;
	const double f32_44 = -f32 * m_A138;
	m_A141 += m_A83 * f32_44;
	RHS44 += f32_44 * RHS32;
	const double f33 = 1.0 / m_A86;
	const double f33_39 = -f33 * m_A110;
	m_A111 += m_A87 * f33_39;
	RHS39 += f33_39 * RHS33;
	const double f34 = 1.0 / m_A90;
	const double f34_44 = -f34 * m_A139;
	m_A141 += m_A91 * f34_44;
	RHS44 += f34_44 * RHS34;
	const double f35 = 1.0 / m_A94;
	const double f35_40 = -f35 * m_A115;
	m_A116 += m_A95 * f35_40;
	RHS40 += f35_40 * RHS35;
	const double f36 = 1.0 / m_A97;
	const double f36_44 = -f36 * m_A140;
	m_A141 += m_A98 * f36_44;
	RHS44 += f36_44 * RHS36;
	const double f36_48 = -f36 * m_A160;
	m_A161 += m_A98 * f36_48;
	RHS48 += f36_48 * RHS36;
	const double f37 = 1.0 / m_A100;
	const double f37_38 = -f37 * m_A104;
	m_A105 += m_A101 * f37_38;
	m_A106 += m_A102 * f37_38;
	RHS38 += f37_38 * RHS37;
	const double f37_47 = -f37 * m_A151;
	m_A152 += m_A101 * f37_47;
	m_A155 += m_A102 * f37_47;
	RHS47 += f37_47 * RHS37;
	const double f38 = 1.0 / m_A105;
	const double f38_47 = -f38 * m_A152;
	m_A155 += m_A106 * f38_47;
	m_A156 += m_A107 * f38_47;
	RHS47 += f38_47 * RHS38;
	const double f38_49 = -f38 * m_A165;
	m_A168 += m_A106 * f38_49;
	m_A169 += m_A107 * f38_49;
	RHS49 += f38_49 * RHS38;
	const double f39 = 1.0 / m_A111;
	const double f39_49 = -f39 * m_A166;
	m_A169 += m_A112 * f39_49;
	RHS49 += f39_49 * RHS39;
	const double f40 = 1.0 / m_A116;
	const double f40_46 = -f40 * m_A146;
	m_A147 += m_A117 * f40_46;
	m_A149 += m_A118 * f40_46;
	RHS46 += f40_46 * RHS40;
	const double f40_50 = -f40 * m_A172;
	m_A174 += m_A117 * f40_50;
	m_A177 += m_A118 * f40_50;
	RHS50 += f40_50 * RHS40;
	const double f41 = 1.0 / m_A120;
	const double f41_47 = -f41 * m_A153;
	m_A154 += m_A121 * f41_47;
	RHS47 += f41_47 * RHS41;
	const double f42 = 1.0 / m_A124;
	const double f42_43 = -f42 * m_A130;
	m_A131 += m_A125 * f42_43;
	RHS43 += f42_43 * RHS42;
	const double f43 = 1.0 / m_A131;
	const double f43_47 = -f43 * m_A154;
	m_A155 += m_A132 * f43_47;
	RHS47 += f43_47 * RHS43;
	const double f44 = 1.0 / m_A141;
	const double f44_48 = -f44 * m_A161;
	RHS48 += f44_48 * RHS44;
	const double f45 = 1.0 / m_A143;
	const double f45_50 = -f45 * m_A173;
	m_A175 += m_A144 * f45_50;
	RHS50 += f45_50 * RHS45;
	const double f46 = 1.0 / m_A147;
	const double f46_49 = -f46 * m_A167;
	m_A169 += m_A148 * f46_49;
	m_A170 += m_A149 * f46_49;
	RHS49 += f46_49 * RHS46;
	const double f46_50 = -f46 * m_A174;
	m_A176 += m_A148 * f46_50;
	m_A177 += m_A149 * f46_50;
	RHS50 += f46_50 * RHS46;
	const double f47 = 1.0 / m_A155;
	const double f47_49 = -f47 * m_A168;
	m_A169 += m_A156 * f47_49;
	RHS49 += f47_49 * RHS47;
	const double f48 = 1.0 / m_A162;
	const double f48_50 = -f48 * m_A175;
	m_A177 += m_A163 * f48_50;
	RHS50 += f48_50 * RHS48;
	const double f49 = 1.0 / m_A169;
	const double f49_50 = -f49 * m_A176;
	m_A177 += m_A170 * f49_50;
	RHS50 += f49_50 * RHS49;
	V[50] = RHS50 / m_A177;
	double tmp49 = 0.0;
	tmp49 += m_A170 * V[50];
	V[49] = (RHS49 - tmp49) / m_A169;
	double tmp48 = 0.0;
	tmp48 += m_A163 * V[50];
	V[48] = (RHS48 - tmp48) / m_A162;
	double tmp47 = 0.0;
	tmp47 += m_A156 * V[49];
	V[47] = (RHS47 - tmp47) / m_A155;
	double tmp46 = 0.0;
	tmp46 += m_A148 * V[49];
	tmp46 += m_A149 * V[50];
	V[46] = (RHS46 - tmp46) / m_A147;
	double tmp45 = 0.0;
	tmp45 += m_A144 * V[48];
	V[45] = (RHS45 - tmp45) / m_A143;
	double tmp44 = 0.0;
	V[44] = (RHS44 - tmp44) / m_A141;
	double tmp43 = 0.0;
	tmp43 += m_A132 * V[47];
	V[43] = (RHS43 - tmp43) / m_A131;
	double tmp42 = 0.0;
	tmp42 += m_A125 * V[43];
	V[42] = (RHS42 - tmp42) / m_A124;
	double tmp41 = 0.0;
	tmp41 += m_A121 * V[43];
	V[41] = (RHS41 - tmp41) / m_A120;
	double tmp40 = 0.0;
	tmp40 += m_A117 * V[46];
	tmp40 += m_A118 * V[50];
	V[40] = (RHS40 - tmp40) / m_A116;
	double tmp39 = 0.0;
	tmp39 += m_A112 * V[49];
	V[39] = (RHS39 - tmp39) / m_A111;
	double tmp38 = 0.0;
	tmp38 += m_A106 * V[47];
	tmp38 += m_A107 * V[49];
	V[38] = (RHS38 - tmp38) / m_A105;
	double tmp37 = 0.0;
	tmp37 += m_A101 * V[38];
	tmp37 += m_A102 * V[47];
	V[37] = (RHS37 - tmp37) / m_A100;
	double tmp36 = 0.0;
	tmp36 += m_A98 * V[44];
	V[36] = (RHS36 - tmp36) / m_A97;
	double tmp35 = 0.0;
	tmp35 += m_A95 * V[40];
	V[35] = (RHS35 - tmp35) / m_A94;
	double tmp34 = 0.0;
	tmp34 += m_A91 * V[44];
	V[34] = (RHS34 - tmp34) / m_A90;
	double tmp33 = 0.0;
	tmp33 += m_A87 * V[39];
	V[33] = (RHS33 - tmp33) / m_A86;
	double tmp32 = 0.0;
	tmp32 += m_A83 * V[44];
	V[32] = (RHS32 - tmp32) / m_A82;
	double tmp31 = 0.0;
	V[31] = (RHS31 - tmp31) / m_A74;
	double tmp30 = 0.0;
	tmp30 += m_A71 * V[42];
	tmp30 += m_A72 * V[43];
	V[30] = (RHS30 - tmp30) / m_A70;
	double tmp29 = 0.0;
	tmp29 += m_A68 * V[40];
	tmp29 += m_A69 * V[46];
	V[29] = (RHS29 - tmp29) / m_A67;
	double tmp28 = 0.0;
	tmp28 += m_A66 * V[43];
	V[28] = (RHS28 - tmp28) / m_A65;
	double tmp27 = 0.0;
	tmp27 += m_A63 * V[39];
	tmp27 += m_A64 * V[49];
	V[27] = (RHS27 - tmp27) / m_A62;
	double tmp26 = 0.0;
	tmp26 += m_A61 * V[34];
	V[26] = (RHS26 - tmp26) / m_A60;
	double tmp25 = 0.0;
	tmp25 += m_A55 * V[35];
	tmp25 += m_A56 * V[40];
	V[25] = (RHS25 - tmp25) / m_A54;
	double tmp24 = 0.0;
	tmp24 += m_A53 * V[48];
	V[24] = (RHS24 - tmp24) / m_A52;
	double tmp23 = 0.0;
	tmp23 += m_A50 * V[37];
	tmp23 += m_A51 * V[38];
	V[23] = (RHS23 - tmp23) / m_A49;
	double tmp22 = 0.0;
	tmp22 += m_A47 * V[33];
	tmp22 += m_A48 * V[39];
	V[22] = (RHS22 - tmp22) / m_A46;
	double tmp21 = 0.0;
	tmp21 += m_A45 * V[48];
	V[21] = (RHS21 - tmp21) / m_A44;
	double tmp20 = 0.0;
	tmp20 += m_A43 * V[41];
	V[20] = (RHS20 - tmp20) / m_A42;
	double tmp19 = 0.0;
	tmp19 += m_A41 * V[33];
	V[19] = (RHS19 - tmp19) / m_A40;
	double tmp18 = 0.0;
	tmp18 += m_A39 * V[42];
	V[18] = (RHS18 - tmp18) / m_A38;
	double tmp17 = 0.0;
	tmp17 += m_A37 * V[32];
	V[17] = (RHS17 - tmp17) / m_A36;
	double tmp16 = 0.0;
	tmp16 += m_A35 * V[32];
	V[16] = (RHS16 - tmp16) / m_A34;
	double tmp15 = 0.0;
	tmp15 += m_A33 * V[35];
	V[15] = (RHS15 - tmp15) / m_A32;
	double tmp14 = 0.0;
	tmp14 += m_A31 * V[32];
	V[14] = (RHS14 - tmp14) / m_A30;
	double tmp13 = 0.0;
	tmp13 += m_A29 * V[31];
	V[13] = (RHS13 - tmp13) / m_A28;
	double tmp12 = 0.0;
	tmp12 += m_A27 * V[32];
	V[12] = (RHS12 - tmp12) / m_A26;
	double tmp11 = 0.0;
	tmp11 += m_A25 * V[32];
	V[11] = (RHS11 - tmp11) / m_A24;
	double tmp10 = 0.0;
	tmp10 += m_A23 * V[32];
	V[10] = (RHS10 - tmp10) / m_A22;
	double tmp9 = 0.0;
	tmp9 += m_A20 * V[32];
	tmp9 += m_A21 * V[44];
	V[9] = (RHS9 - tmp9) / m_A19;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[44];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A16 * V[44];
	V[7] = (RHS7 - tmp7) / m_A15;
	double tmp6 = 0.0;
	tmp6 += m_A14 * V[44];
	V[6] = (RHS6 - tmp6) / m_A13;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[44];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[45];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[36];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[26];
	tmp2 += m_A6 * V[34];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[26];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[26];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// solarq
static void nl_gcr_62612f71055b8fd4_303_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	double m_A119(0.0);
	double m_A120(0.0);
	double m_A121(0.0);
	double m_A122(0.0);
	double m_A123(0.0);
	double m_A124(0.0);
	double m_A125(0.0);
	double m_A126(0.0);
	double m_A127(0.0);
	double m_A128(0.0);
	double m_A129(0.0);
	double m_A130(0.0);
	double m_A131(0.0);
	double m_A132(0.0);
	double m_A133(0.0);
	double m_A134(0.0);
	double m_A135(0.0);
	double m_A136(0.0);
	double m_A137(0.0);
	double m_A138(0.0);
	double m_A139(0.0);
	double m_A140(0.0);
	double m_A141(0.0);
	double m_A142(0.0);
	double m_A143(0.0);
	double m_A144(0.0);
	double m_A145(0.0);
	double m_A146(0.0);
	double m_A147(0.0);
	double m_A148(0.0);
	double m_A149(0.0);
	double m_A150(0.0);
	double m_A151(0.0);
	double m_A152(0.0);
	double m_A153(0.0);
	double m_A154(0.0);
	double m_A155(0.0);
	double m_A156(0.0);
	double m_A157(0.0);
	double m_A158(0.0);
	double m_A159(0.0);
	double m_A160(0.0);
	double m_A161(0.0);
	double m_A162(0.0);
	double m_A163(0.0);
	double m_A164(0.0);
	double m_A165(0.0);
	double m_A166(0.0);
	double m_A167(0.0);
	double m_A168(0.0);
	double m_A169(0.0);
	double m_A170(0.0);
	double m_A171(0.0);
	double m_A172(0.0);
	double m_A173(0.0);
	double m_A174(0.0);
	double m_A175(0.0);
	double m_A176(0.0);
	double m_A177(0.0);
	double m_A178(0.0);
	double m_A179(0.0);
	double m_A180(0.0);
	double m_A181(0.0);
	double m_A182(0.0);
	double m_A183(0.0);
	double m_A184(0.0);
	double m_A185(0.0);
	double m_A186(0.0);
	double m_A187(0.0);
	double m_A188(0.0);
	double m_A189(0.0);
	double m_A190(0.0);
	double m_A191(0.0);
	double m_A192(0.0);
	double m_A193(0.0);
	double m_A194(0.0);
	double m_A195(0.0);
	double m_A196(0.0);
	double m_A197(0.0);
	double m_A198(0.0);
	double m_A199(0.0);
	double m_A200(0.0);
	double m_A201(0.0);
	double m_A202(0.0);
	double m_A203(0.0);
	double m_A204(0.0);
	double m_A205(0.0);
	double m_A206(0.0);
	double m_A207(0.0);
	double m_A208(0.0);
	double m_A209(0.0);
	double m_A210(0.0);
	double m_A211(0.0);
	double m_A212(0.0);
	double m_A213(0.0);
	double m_A214(0.0);
	double m_A215(0.0);
	double m_A216(0.0);
	double m_A217(0.0);
	double m_A218(0.0);
	double m_A219(0.0);
	double m_A220(0.0);
	double m_A221(0.0);
	double m_A222(0.0);
	double m_A223(0.0);
	double m_A224(0.0);
	double m_A225(0.0);
	double m_A226(0.0);
	double m_A227(0.0);
	double m_A228(0.0);
	double m_A229(0.0);
	double m_A230(0.0);
	double m_A231(0.0);
	double m_A232(0.0);
	double m_A233(0.0);
	double m_A234(0.0);
	double m_A235(0.0);
	double m_A236(0.0);
	double m_A237(0.0);
	double m_A238(0.0);
	double m_A239(0.0);
	double m_A240(0.0);
	double m_A241(0.0);
	double m_A242(0.0);
	double m_A243(0.0);
	double m_A244(0.0);
	double m_A245(0.0);
	double m_A246(0.0);
	double m_A247(0.0);
	double m_A248(0.0);
	double m_A249(0.0);
	double m_A250(0.0);
	double m_A251(0.0);
	double m_A252(0.0);
	double m_A253(0.0);
	double m_A254(0.0);
	double m_A255(0.0);
	double m_A256(0.0);
	double m_A257(0.0);
	double m_A258(0.0);
	double m_A259(0.0);
	double m_A260(0.0);
	double m_A261(0.0);
	double m_A262(0.0);
	double m_A263(0.0);
	double m_A264(0.0);
	double m_A265(0.0);
	double m_A266(0.0);
	double m_A267(0.0);
	double m_A268(0.0);
	double m_A269(0.0);
	double m_A270(0.0);
	double m_A271(0.0);
	double m_A272(0.0);
	double m_A273(0.0);
	double m_A274(0.0);
	double m_A275(0.0);
	double m_A276(0.0);
	double m_A277(0.0);
	double m_A278(0.0);
	double m_A279(0.0);
	double m_A280(0.0);
	double m_A281(0.0);
	double m_A282(0.0);
	double m_A283(0.0);
	double m_A284(0.0);
	double m_A285(0.0);
	double m_A286(0.0);
	double m_A287(0.0);
	double m_A288(0.0);
	double m_A289(0.0);
	double m_A290(0.0);
	double m_A291(0.0);
	double m_A292(0.0);
	double m_A293(0.0);
	double m_A294(0.0);
	double m_A295(0.0);
	double m_A296(0.0);
	double m_A297(0.0);
	double m_A298(0.0);
	double m_A299(0.0);
	double m_A300(0.0);
	double m_A301(0.0);
	double m_A302(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A0 += gt[7];
	m_A0 += gt[8];
	m_A0 += gt[9];
	m_A0 += gt[10];
	m_A0 += gt[11];
	m_A0 += gt[12];
	m_A0 += gt[13];
	m_A2 += go[0];
	m_A1 += go[1];
	m_A1 += go[2];
	m_A0 += go[3];
	m_A0 += go[4];
	m_A0 += go[5];
	m_A0 += go[6];
	m_A3 += go[7];
	m_A3 += go[8];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 += Idr[7];
	RHS0 += Idr[8];
	RHS0 += Idr[9];
	RHS0 += Idr[10];
	RHS0 += Idr[11];
	RHS0 += Idr[12];
	RHS0 += Idr[13];
	RHS0 -= go[9] * *cnV[9];
	RHS0 -= go[10] * *cnV[10];
	RHS0 -= go[11] * *cnV[11];
	RHS0 -= go[12] * *cnV[12];
	RHS0 -= go[13] * *cnV[13];
	m_A4 += gt[14];
	m_A4 += gt[15];
	m_A4 += gt[16];
	m_A4 += gt[17];
	m_A4 += gt[18];
	m_A4 += gt[19];
	m_A4 += gt[20];
	m_A4 += gt[21];
	m_A4 += gt[22];
	m_A4 += gt[23];
	m_A4 += gt[24];
	m_A4 += gt[25];
	m_A4 += gt[26];
	m_A4 += gt[27];
	m_A4 += go[14];
	m_A4 += go[15];
	m_A4 += go[16];
	m_A4 += go[17];
	m_A5 += go[18];
	m_A5 += go[19];
	m_A5 += go[20];
	m_A5 += go[21];
	m_A6 += go[22];
	double RHS1 = Idr[14];
	RHS1 += Idr[15];
	RHS1 += Idr[16];
	RHS1 += Idr[17];
	RHS1 += Idr[18];
	RHS1 += Idr[19];
	RHS1 += Idr[20];
	RHS1 += Idr[21];
	RHS1 += Idr[22];
	RHS1 += Idr[23];
	RHS1 += Idr[24];
	RHS1 += Idr[25];
	RHS1 += Idr[26];
	RHS1 += Idr[27];
	RHS1 -= go[23] * *cnV[23];
	RHS1 -= go[24] * *cnV[24];
	RHS1 -= go[25] * *cnV[25];
	RHS1 -= go[26] * *cnV[26];
	RHS1 -= go[27] * *cnV[27];
	m_A7 += gt[28];
	m_A7 += gt[29];
	m_A7 += gt[30];
	m_A7 += gt[31];
	m_A7 += gt[32];
	m_A7 += gt[33];
	m_A7 += gt[34];
	m_A7 += gt[35];
	m_A8 += go[28];
	m_A8 += go[29];
	m_A9 += go[30];
	m_A9 += go[31];
	m_A9 += go[32];
	m_A10 += go[33];
	m_A10 += go[34];
	m_A10 += go[35];
	double RHS2 = Idr[28];
	RHS2 += Idr[29];
	RHS2 += Idr[30];
	RHS2 += Idr[31];
	RHS2 += Idr[32];
	RHS2 += Idr[33];
	RHS2 += Idr[34];
	RHS2 += Idr[35];
	m_A11 += gt[36];
	m_A11 += gt[37];
	m_A11 += gt[38];
	m_A11 += gt[39];
	m_A11 += gt[40];
	m_A12 += go[36];
	m_A12 += go[37];
	m_A13 += go[38];
	m_A13 += go[39];
	double RHS3 = Idr[36];
	RHS3 += Idr[37];
	RHS3 += Idr[38];
	RHS3 += Idr[39];
	RHS3 += Idr[40];
	RHS3 -= go[40] * *cnV[40];
	m_A14 += gt[41];
	m_A14 += gt[42];
	m_A14 += gt[43];
	m_A14 += gt[44];
	m_A14 += gt[45];
	m_A14 += gt[46];
	m_A14 += gt[47];
	m_A14 += gt[48];
	m_A14 += gt[49];
	m_A14 += gt[50];
	m_A14 += gt[51];
	m_A14 += gt[52];
	m_A14 += gt[53];
	m_A14 += gt[54];
	m_A14 += go[41];
	m_A14 += go[42];
	m_A14 += go[43];
	m_A14 += go[44];
	m_A15 += go[45];
	m_A15 += go[46];
	m_A15 += go[47];
	m_A15 += go[48];
	m_A16 += go[49];
	double RHS4 = Idr[41];
	RHS4 += Idr[42];
	RHS4 += Idr[43];
	RHS4 += Idr[44];
	RHS4 += Idr[45];
	RHS4 += Idr[46];
	RHS4 += Idr[47];
	RHS4 += Idr[48];
	RHS4 += Idr[49];
	RHS4 += Idr[50];
	RHS4 += Idr[51];
	RHS4 += Idr[52];
	RHS4 += Idr[53];
	RHS4 += Idr[54];
	RHS4 -= go[50] * *cnV[50];
	RHS4 -= go[51] * *cnV[51];
	RHS4 -= go[52] * *cnV[52];
	RHS4 -= go[53] * *cnV[53];
	RHS4 -= go[54] * *cnV[54];
	m_A17 += gt[55];
	m_A17 += gt[56];
	m_A17 += gt[57];
	m_A17 += gt[58];
	m_A17 += gt[59];
	m_A17 += gt[60];
	m_A17 += gt[61];
	m_A17 += gt[62];
	m_A17 += gt[63];
	m_A17 += gt[64];
	m_A17 += gt[65];
	m_A17 += gt[66];
	m_A17 += gt[67];
	m_A17 += gt[68];
	m_A19 += go[55];
	m_A18 += go[56];
	m_A18 += go[57];
	m_A17 += go[58];
	m_A17 += go[59];
	m_A17 += go[60];
	m_A17 += go[61];
	m_A20 += go[62];
	m_A20 += go[63];
	double RHS5 = Idr[55];
	RHS5 += Idr[56];
	RHS5 += Idr[57];
	RHS5 += Idr[58];
	RHS5 += Idr[59];
	RHS5 += Idr[60];
	RHS5 += Idr[61];
	RHS5 += Idr[62];
	RHS5 += Idr[63];
	RHS5 += Idr[64];
	RHS5 += Idr[65];
	RHS5 += Idr[66];
	RHS5 += Idr[67];
	RHS5 += Idr[68];
	RHS5 -= go[64] * *cnV[64];
	RHS5 -= go[65] * *cnV[65];
	RHS5 -= go[66] * *cnV[66];
	RHS5 -= go[67] * *cnV[67];
	RHS5 -= go[68] * *cnV[68];
	m_A21 += gt[69];
	m_A21 += gt[70];
	m_A21 += gt[71];
	m_A21 += gt[72];
	m_A22 += go[69];
	double RHS6 = Idr[69];
	RHS6 += Idr[70];
	RHS6 += Idr[71];
	RHS6 += Idr[72];
	RHS6 -= go[70] * *cnV[70];
	RHS6 -= go[71] * *cnV[71];
	RHS6 -= go[72] * *cnV[72];
	m_A23 += gt[73];
	m_A23 += gt[74];
	m_A23 += gt[75];
	m_A23 += gt[76];
	m_A23 += gt[77];
	m_A23 += gt[78];
	m_A23 += gt[79];
	m_A23 += gt[80];
	m_A24 += go[73];
	m_A24 += go[74];
	m_A25 += go[75];
	m_A25 += go[76];
	m_A25 += go[77];
	m_A26 += go[78];
	m_A26 += go[79];
	m_A26 += go[80];
	double RHS7 = Idr[73];
	RHS7 += Idr[74];
	RHS7 += Idr[75];
	RHS7 += Idr[76];
	RHS7 += Idr[77];
	RHS7 += Idr[78];
	RHS7 += Idr[79];
	RHS7 += Idr[80];
	m_A27 += gt[81];
	m_A27 += gt[82];
	m_A27 += gt[83];
	m_A27 += gt[84];
	m_A27 += gt[85];
	m_A27 += gt[86];
	m_A27 += gt[87];
	m_A27 += gt[88];
	m_A27 += gt[89];
	m_A27 += gt[90];
	m_A27 += gt[91];
	m_A27 += gt[92];
	m_A29 += go[81];
	m_A28 += go[82];
	m_A28 += go[83];
	m_A27 += go[84];
	m_A27 += go[85];
	m_A27 += go[86];
	m_A27 += go[87];
	double RHS8 = Idr[81];
	RHS8 += Idr[82];
	RHS8 += Idr[83];
	RHS8 += Idr[84];
	RHS8 += Idr[85];
	RHS8 += Idr[86];
	RHS8 += Idr[87];
	RHS8 += Idr[88];
	RHS8 += Idr[89];
	RHS8 += Idr[90];
	RHS8 += Idr[91];
	RHS8 += Idr[92];
	RHS8 -= go[88] * *cnV[88];
	RHS8 -= go[89] * *cnV[89];
	RHS8 -= go[90] * *cnV[90];
	RHS8 -= go[91] * *cnV[91];
	RHS8 -= go[92] * *cnV[92];
	m_A30 += gt[93];
	m_A30 += gt[94];
	m_A30 += gt[95];
	m_A30 += gt[96];
	m_A30 += gt[97];
	m_A30 += gt[98];
	m_A30 += gt[99];
	m_A30 += gt[100];
	m_A33 += go[93];
	m_A32 += go[94];
	m_A32 += go[95];
	m_A31 += go[96];
	m_A31 += go[97];
	double RHS9 = Idr[93];
	RHS9 += Idr[94];
	RHS9 += Idr[95];
	RHS9 += Idr[96];
	RHS9 += Idr[97];
	RHS9 += Idr[98];
	RHS9 += Idr[99];
	RHS9 += Idr[100];
	RHS9 -= go[98] * *cnV[98];
	RHS9 -= go[99] * *cnV[99];
	RHS9 -= go[100] * *cnV[100];
	m_A34 += gt[101];
	m_A34 += gt[102];
	m_A34 += gt[103];
	m_A34 += gt[104];
	m_A34 += gt[105];
	m_A34 += gt[106];
	m_A34 += gt[107];
	m_A34 += gt[108];
	m_A34 += gt[109];
	m_A34 += gt[110];
	m_A34 += gt[111];
	m_A34 += gt[112];
	m_A36 += go[101];
	m_A35 += go[102];
	m_A35 += go[103];
	m_A34 += go[104];
	m_A34 += go[105];
	m_A34 += go[106];
	m_A34 += go[107];
	double RHS10 = Idr[101];
	RHS10 += Idr[102];
	RHS10 += Idr[103];
	RHS10 += Idr[104];
	RHS10 += Idr[105];
	RHS10 += Idr[106];
	RHS10 += Idr[107];
	RHS10 += Idr[108];
	RHS10 += Idr[109];
	RHS10 += Idr[110];
	RHS10 += Idr[111];
	RHS10 += Idr[112];
	RHS10 -= go[108] * *cnV[108];
	RHS10 -= go[109] * *cnV[109];
	RHS10 -= go[110] * *cnV[110];
	RHS10 -= go[111] * *cnV[111];
	RHS10 -= go[112] * *cnV[112];
	m_A37 += gt[113];
	m_A37 += gt[114];
	m_A37 += gt[115];
	m_A37 += gt[116];
	m_A37 += gt[117];
	m_A38 += go[113];
	m_A38 += go[114];
	m_A39 += go[115];
	m_A39 += go[116];
	double RHS11 = Idr[113];
	RHS11 += Idr[114];
	RHS11 += Idr[115];
	RHS11 += Idr[116];
	RHS11 += Idr[117];
	RHS11 -= go[117] * *cnV[117];
	m_A40 += gt[118];
	m_A40 += gt[119];
	m_A40 += gt[120];
	m_A40 += gt[121];
	m_A40 += gt[122];
	m_A40 += gt[123];
	m_A42 += go[118];
	m_A41 += go[119];
	m_A41 += go[120];
	m_A43 += go[121];
	m_A43 += go[122];
	double RHS12 = Idr[118];
	RHS12 += Idr[119];
	RHS12 += Idr[120];
	RHS12 += Idr[121];
	RHS12 += Idr[122];
	RHS12 += Idr[123];
	RHS12 -= go[123] * *cnV[123];
	m_A44 += gt[124];
	m_A44 += gt[125];
	m_A44 += gt[126];
	m_A44 += gt[127];
	m_A44 += gt[128];
	m_A44 += gt[129];
	m_A44 += gt[130];
	m_A45 += go[124];
	m_A46 += go[125];
	double RHS13 = Idr[124];
	RHS13 += Idr[125];
	RHS13 += Idr[126];
	RHS13 += Idr[127];
	RHS13 += Idr[128];
	RHS13 += Idr[129];
	RHS13 += Idr[130];
	RHS13 -= go[126] * *cnV[126];
	RHS13 -= go[127] * *cnV[127];
	RHS13 -= go[128] * *cnV[128];
	RHS13 -= go[129] * *cnV[129];
	RHS13 -= go[130] * *cnV[130];
	m_A47 += gt[131];
	m_A47 += gt[132];
	m_A47 += gt[133];
	m_A47 += gt[134];
	m_A48 += go[131];
	double RHS14 = Idr[131];
	RHS14 += Idr[132];
	RHS14 += Idr[133];
	RHS14 += Idr[134];
	RHS14 -= go[132] * *cnV[132];
	RHS14 -= go[133] * *cnV[133];
	RHS14 -= go[134] * *cnV[134];
	m_A49 += gt[135];
	m_A49 += gt[136];
	m_A50 += go[135];
	double RHS15 = Idr[135];
	RHS15 += Idr[136];
	RHS15 -= go[136] * *cnV[136];
	m_A51 += gt[137];
	m_A51 += gt[138];
	m_A51 += gt[139];
	m_A51 += gt[140];
	m_A51 += gt[141];
	m_A51 += gt[142];
	m_A51 += gt[143];
	m_A52 += go[137];
	double RHS16 = Idr[137];
	RHS16 += Idr[138];
	RHS16 += Idr[139];
	RHS16 += Idr[140];
	RHS16 += Idr[141];
	RHS16 += Idr[142];
	RHS16 += Idr[143];
	RHS16 -= go[138] * *cnV[138];
	RHS16 -= go[139] * *cnV[139];
	RHS16 -= go[140] * *cnV[140];
	RHS16 -= go[141] * *cnV[141];
	RHS16 -= go[142] * *cnV[142];
	RHS16 -= go[143] * *cnV[143];
	m_A53 += gt[144];
	m_A53 += gt[145];
	m_A53 += gt[146];
	m_A53 += gt[147];
	m_A53 += gt[148];
	m_A53 += gt[149];
	m_A53 += gt[150];
	m_A54 += go[144];
	m_A55 += go[145];
	double RHS17 = Idr[144];
	RHS17 += Idr[145];
	RHS17 += Idr[146];
	RHS17 += Idr[147];
	RHS17 += Idr[148];
	RHS17 += Idr[149];
	RHS17 += Idr[150];
	RHS17 -= go[146] * *cnV[146];
	RHS17 -= go[147] * *cnV[147];
	RHS17 -= go[148] * *cnV[148];
	RHS17 -= go[149] * *cnV[149];
	RHS17 -= go[150] * *cnV[150];
	m_A56 += gt[151];
	m_A56 += gt[152];
	m_A56 += gt[153];
	m_A57 += go[151];
	double RHS18 = Idr[151];
	RHS18 += Idr[152];
	RHS18 += Idr[153];
	RHS18 -= go[152] * *cnV[152];
	RHS18 -= go[153] * *cnV[153];
	m_A58 += gt[154];
	m_A58 += gt[155];
	m_A58 += gt[156];
	m_A58 += gt[157];
	m_A58 += gt[158];
	m_A58 += gt[159];
	m_A59 += go[154];
	m_A60 += go[155];
	m_A60 += go[156];
	m_A61 += go[157];
	m_A61 += go[158];
	double RHS19 = Idr[154];
	RHS19 += Idr[155];
	RHS19 += Idr[156];
	RHS19 += Idr[157];
	RHS19 += Idr[158];
	RHS19 += Idr[159];
	RHS19 -= go[159] * *cnV[159];
	m_A62 += gt[160];
	m_A62 += gt[161];
	m_A64 += go[160];
	m_A63 += go[161];
	double RHS20 = Idr[160];
	RHS20 += Idr[161];
	m_A65 += gt[162];
	m_A65 += gt[163];
	m_A65 += gt[164];
	m_A65 += gt[165];
	m_A65 += gt[166];
	m_A65 += gt[167];
	m_A65 += gt[168];
	m_A66 += go[162];
	double RHS21 = Idr[162];
	RHS21 += Idr[163];
	RHS21 += Idr[164];
	RHS21 += Idr[165];
	RHS21 += Idr[166];
	RHS21 += Idr[167];
	RHS21 += Idr[168];
	RHS21 -= go[163] * *cnV[163];
	RHS21 -= go[164] * *cnV[164];
	RHS21 -= go[165] * *cnV[165];
	RHS21 -= go[166] * *cnV[166];
	RHS21 -= go[167] * *cnV[167];
	RHS21 -= go[168] * *cnV[168];
	m_A67 += gt[169];
	m_A67 += gt[170];
	m_A68 += go[169];
	m_A69 += go[170];
	double RHS22 = Idr[169];
	RHS22 += Idr[170];
	m_A70 += gt[171];
	m_A70 += gt[172];
	m_A71 += go[171];
	double RHS23 = Idr[171];
	RHS23 += Idr[172];
	RHS23 -= go[172] * *cnV[172];
	m_A74 += gt[173];
	m_A74 += gt[174];
	m_A74 += gt[175];
	m_A74 += gt[176];
	m_A74 += gt[177];
	m_A74 += gt[178];
	m_A73 += go[173];
	m_A73 += go[174];
	m_A72 += go[175];
	double RHS24 = Idr[173];
	RHS24 += Idr[174];
	RHS24 += Idr[175];
	RHS24 += Idr[176];
	RHS24 += Idr[177];
	RHS24 += Idr[178];
	RHS24 -= go[176] * *cnV[176];
	RHS24 -= go[177] * *cnV[177];
	RHS24 -= go[178] * *cnV[178];
	m_A77 += gt[179];
	m_A77 += gt[180];
	m_A78 += go[179];
	m_A79 += go[180];
	double RHS25 = Idr[179];
	RHS25 += Idr[180];
	m_A82 += gt[181];
	m_A82 += gt[182];
	m_A82 += gt[183];
	m_A82 += gt[184];
	m_A82 += gt[185];
	m_A83 += go[181];
	m_A83 += go[182];
	m_A80 += go[183];
	m_A80 += go[184];
	double RHS26 = Idr[181];
	RHS26 += Idr[182];
	RHS26 += Idr[183];
	RHS26 += Idr[184];
	RHS26 += Idr[185];
	RHS26 -= go[185] * *cnV[185];
	m_A85 += gt[186];
	m_A85 += gt[187];
	m_A85 += gt[188];
	m_A85 += gt[189];
	m_A85 += gt[190];
	m_A85 += gt[191];
	m_A85 += gt[192];
	m_A85 += gt[193];
	m_A86 += go[186];
	m_A86 += go[187];
	m_A86 += go[188];
	m_A84 += go[189];
	m_A84 += go[190];
	m_A87 += go[191];
	m_A87 += go[192];
	m_A87 += go[193];
	double RHS27 = Idr[186];
	RHS27 += Idr[187];
	RHS27 += Idr[188];
	RHS27 += Idr[189];
	RHS27 += Idr[190];
	RHS27 += Idr[191];
	RHS27 += Idr[192];
	RHS27 += Idr[193];
	m_A89 += gt[194];
	m_A89 += gt[195];
	m_A89 += gt[196];
	m_A89 += gt[197];
	m_A89 += gt[198];
	m_A89 += gt[199];
	m_A89 += gt[200];
	m_A89 += gt[201];
	m_A89 += gt[202];
	m_A89 += gt[203];
	m_A89 += gt[204];
	m_A89 += gt[205];
	m_A89 += gt[206];
	m_A89 += gt[207];
	m_A89 += go[194];
	m_A89 += go[195];
	m_A89 += go[196];
	m_A89 += go[197];
	m_A88 += go[198];
	m_A88 += go[199];
	m_A90 += go[200];
	m_A90 += go[201];
	m_A91 += go[202];
	double RHS28 = Idr[194];
	RHS28 += Idr[195];
	RHS28 += Idr[196];
	RHS28 += Idr[197];
	RHS28 += Idr[198];
	RHS28 += Idr[199];
	RHS28 += Idr[200];
	RHS28 += Idr[201];
	RHS28 += Idr[202];
	RHS28 += Idr[203];
	RHS28 += Idr[204];
	RHS28 += Idr[205];
	RHS28 += Idr[206];
	RHS28 += Idr[207];
	RHS28 -= go[203] * *cnV[203];
	RHS28 -= go[204] * *cnV[204];
	RHS28 -= go[205] * *cnV[205];
	RHS28 -= go[206] * *cnV[206];
	RHS28 -= go[207] * *cnV[207];
	m_A94 += gt[208];
	m_A94 += gt[209];
	m_A94 += gt[210];
	m_A93 += go[208];
	m_A92 += go[209];
	double RHS29 = Idr[208];
	RHS29 += Idr[209];
	RHS29 += Idr[210];
	RHS29 -= go[210] * *cnV[210];
	m_A99 += gt[211];
	m_A99 += gt[212];
	m_A99 += gt[213];
	m_A99 += gt[214];
	m_A99 += gt[215];
	m_A99 += gt[216];
	m_A99 += gt[217];
	m_A99 += gt[218];
	m_A99 += gt[219];
	m_A96 += go[211];
	m_A96 += go[212];
	m_A98 += go[213];
	m_A98 += go[214];
	m_A102 += go[215];
	m_A103 += go[216];
	m_A97 += go[217];
	m_A97 += go[218];
	double RHS30 = Idr[211];
	RHS30 += Idr[212];
	RHS30 += Idr[213];
	RHS30 += Idr[214];
	RHS30 += Idr[215];
	RHS30 += Idr[216];
	RHS30 += Idr[217];
	RHS30 += Idr[218];
	RHS30 += Idr[219];
	RHS30 -= go[219] * *cnV[219];
	m_A105 += gt[220];
	m_A105 += gt[221];
	m_A105 += gt[222];
	m_A105 += gt[223];
	m_A105 += gt[224];
	m_A104 += go[220];
	m_A106 += go[221];
	m_A107 += go[222];
	double RHS31 = Idr[220];
	RHS31 += Idr[221];
	RHS31 += Idr[222];
	RHS31 += Idr[223];
	RHS31 += Idr[224];
	RHS31 -= go[223] * *cnV[223];
	RHS31 -= go[224] * *cnV[224];
	m_A111 += gt[225];
	m_A111 += gt[226];
	m_A111 += gt[227];
	m_A111 += gt[228];
	m_A111 += gt[229];
	m_A109 += go[225];
	m_A108 += go[226];
	m_A113 += go[227];
	double RHS32 = Idr[225];
	RHS32 += Idr[226];
	RHS32 += Idr[227];
	RHS32 += Idr[228];
	RHS32 += Idr[229];
	RHS32 -= go[228] * *cnV[228];
	RHS32 -= go[229] * *cnV[229];
	m_A119 += gt[230];
	m_A119 += gt[231];
	m_A119 += gt[232];
	m_A119 += gt[233];
	m_A119 += gt[234];
	m_A119 += gt[235];
	m_A119 += gt[236];
	m_A116 += go[230];
	m_A117 += go[231];
	m_A118 += go[232];
	m_A121 += go[233];
	m_A124 += go[234];
	double RHS33 = Idr[230];
	RHS33 += Idr[231];
	RHS33 += Idr[232];
	RHS33 += Idr[233];
	RHS33 += Idr[234];
	RHS33 += Idr[235];
	RHS33 += Idr[236];
	RHS33 -= go[235] * *cnV[235];
	RHS33 -= go[236] * *cnV[236];
	m_A126 += gt[237];
	m_A126 += gt[238];
	m_A126 += gt[239];
	m_A126 += gt[240];
	m_A126 += gt[241];
	m_A126 += gt[242];
	m_A126 += gt[243];
	m_A126 += gt[244];
	m_A127 += go[237];
	m_A127 += go[238];
	m_A127 += go[239];
	m_A125 += go[240];
	m_A125 += go[241];
	m_A128 += go[242];
	m_A128 += go[243];
	m_A128 += go[244];
	double RHS34 = Idr[237];
	RHS34 += Idr[238];
	RHS34 += Idr[239];
	RHS34 += Idr[240];
	RHS34 += Idr[241];
	RHS34 += Idr[242];
	RHS34 += Idr[243];
	RHS34 += Idr[244];
	m_A130 += gt[245];
	m_A130 += gt[246];
	m_A130 += gt[247];
	m_A130 += gt[248];
	m_A130 += gt[249];
	m_A130 += gt[250];
	m_A130 += gt[251];
	m_A130 += gt[252];
	m_A130 += gt[253];
	m_A130 += gt[254];
	m_A130 += gt[255];
	m_A130 += gt[256];
	m_A130 += gt[257];
	m_A130 += gt[258];
	m_A130 += go[245];
	m_A130 += go[246];
	m_A130 += go[247];
	m_A130 += go[248];
	m_A129 += go[249];
	m_A129 += go[250];
	m_A131 += go[251];
	m_A131 += go[252];
	m_A132 += go[253];
	double RHS35 = Idr[245];
	RHS35 += Idr[246];
	RHS35 += Idr[247];
	RHS35 += Idr[248];
	RHS35 += Idr[249];
	RHS35 += Idr[250];
	RHS35 += Idr[251];
	RHS35 += Idr[252];
	RHS35 += Idr[253];
	RHS35 += Idr[254];
	RHS35 += Idr[255];
	RHS35 += Idr[256];
	RHS35 += Idr[257];
	RHS35 += Idr[258];
	RHS35 -= go[254] * *cnV[254];
	RHS35 -= go[255] * *cnV[255];
	RHS35 -= go[256] * *cnV[256];
	RHS35 -= go[257] * *cnV[257];
	RHS35 -= go[258] * *cnV[258];
	m_A137 += gt[259];
	m_A137 += gt[260];
	m_A137 += gt[261];
	m_A137 += gt[262];
	m_A137 += gt[263];
	m_A137 += gt[264];
	m_A137 += gt[265];
	m_A137 += gt[266];
	m_A137 += gt[267];
	m_A134 += go[259];
	m_A134 += go[260];
	m_A135 += go[261];
	m_A135 += go[262];
	m_A140 += go[263];
	m_A143 += go[264];
	m_A133 += go[265];
	m_A133 += go[266];
	double RHS36 = Idr[259];
	RHS36 += Idr[260];
	RHS36 += Idr[261];
	RHS36 += Idr[262];
	RHS36 += Idr[263];
	RHS36 += Idr[264];
	RHS36 += Idr[265];
	RHS36 += Idr[266];
	RHS36 += Idr[267];
	RHS36 -= go[267] * *cnV[267];
	m_A145 += gt[268];
	m_A145 += gt[269];
	m_A146 += go[268];
	m_A144 += go[269];
	double RHS37 = Idr[268];
	RHS37 += Idr[269];
	m_A148 += gt[270];
	m_A148 += gt[271];
	m_A148 += gt[272];
	m_A148 += gt[273];
	m_A148 += gt[274];
	m_A148 += gt[275];
	m_A148 += gt[276];
	m_A147 += go[270];
	m_A149 += go[271];
	double RHS38 = Idr[270];
	RHS38 += Idr[271];
	RHS38 += Idr[272];
	RHS38 += Idr[273];
	RHS38 += Idr[274];
	RHS38 += Idr[275];
	RHS38 += Idr[276];
	RHS38 -= go[272] * *cnV[272];
	RHS38 -= go[273] * *cnV[273];
	RHS38 -= go[274] * *cnV[274];
	RHS38 -= go[275] * *cnV[275];
	RHS38 -= go[276] * *cnV[276];
	m_A158 += gt[277];
	m_A158 += gt[278];
	m_A158 += gt[279];
	m_A158 += gt[280];
	m_A158 += gt[281];
	m_A158 += gt[282];
	m_A154 += go[277];
	m_A154 += go[278];
	m_A151 += go[279];
	m_A152 += go[280];
	m_A150 += go[281];
	double RHS39 = Idr[277];
	RHS39 += Idr[278];
	RHS39 += Idr[279];
	RHS39 += Idr[280];
	RHS39 += Idr[281];
	RHS39 += Idr[282];
	RHS39 -= go[282] * *cnV[282];
	m_A172 += gt[283];
	m_A172 += gt[284];
	m_A172 += gt[285];
	m_A172 += gt[286];
	m_A172 += gt[287];
	m_A166 += go[283];
	m_A167 += go[284];
	m_A169 += go[285];
	m_A168 += go[286];
	double RHS40 = Idr[283];
	RHS40 += Idr[284];
	RHS40 += Idr[285];
	RHS40 += Idr[286];
	RHS40 += Idr[287];
	RHS40 -= go[287] * *cnV[287];
	m_A181 += gt[288];
	m_A181 += gt[289];
	m_A181 += gt[290];
	m_A181 += gt[291];
	m_A180 += go[288];
	m_A182 += go[289];
	double RHS41 = Idr[288];
	RHS41 += Idr[289];
	RHS41 += Idr[290];
	RHS41 += Idr[291];
	RHS41 -= go[290] * *cnV[290];
	RHS41 -= go[291] * *cnV[291];
	m_A186 += gt[292];
	m_A186 += gt[293];
	m_A186 += gt[294];
	m_A186 += gt[295];
	m_A186 += gt[296];
	m_A185 += go[292];
	m_A183 += go[293];
	m_A184 += go[294];
	double RHS42 = Idr[292];
	RHS42 += Idr[293];
	RHS42 += Idr[294];
	RHS42 += Idr[295];
	RHS42 += Idr[296];
	RHS42 -= go[295] * *cnV[295];
	RHS42 -= go[296] * *cnV[296];
	m_A195 += gt[297];
	m_A195 += gt[298];
	m_A195 += gt[299];
	m_A195 += gt[300];
	m_A195 += gt[301];
	m_A195 += gt[302];
	m_A195 += gt[303];
	m_A195 += gt[304];
	m_A195 += gt[305];
	m_A195 += gt[306];
	m_A195 += gt[307];
	m_A189 += go[297];
	m_A189 += go[298];
	m_A191 += go[299];
	m_A190 += go[300];
	m_A190 += go[301];
	m_A188 += go[302];
	m_A188 += go[303];
	m_A188 += go[304];
	m_A198 += go[305];
	m_A198 += go[306];
	double RHS43 = Idr[297];
	RHS43 += Idr[298];
	RHS43 += Idr[299];
	RHS43 += Idr[300];
	RHS43 += Idr[301];
	RHS43 += Idr[302];
	RHS43 += Idr[303];
	RHS43 += Idr[304];
	RHS43 += Idr[305];
	RHS43 += Idr[306];
	RHS43 += Idr[307];
	RHS43 -= go[307] * *cnV[307];
	m_A205 += gt[308];
	m_A205 += gt[309];
	m_A205 += gt[310];
	m_A205 += gt[311];
	m_A205 += gt[312];
	m_A205 += gt[313];
	m_A205 += gt[314];
	m_A205 += gt[315];
	m_A205 += gt[316];
	m_A205 += gt[317];
	m_A205 += gt[318];
	m_A205 += gt[319];
	m_A205 += gt[320];
	m_A203 += go[308];
	m_A203 += go[309];
	m_A203 += go[310];
	m_A203 += go[311];
	m_A204 += go[312];
	m_A204 += go[313];
	m_A204 += go[314];
	m_A202 += go[315];
	m_A207 += go[316];
	m_A207 += go[317];
	m_A206 += go[318];
	m_A206 += go[319];
	double RHS44 = Idr[308];
	RHS44 += Idr[309];
	RHS44 += Idr[310];
	RHS44 += Idr[311];
	RHS44 += Idr[312];
	RHS44 += Idr[313];
	RHS44 += Idr[314];
	RHS44 += Idr[315];
	RHS44 += Idr[316];
	RHS44 += Idr[317];
	RHS44 += Idr[318];
	RHS44 += Idr[319];
	RHS44 += Idr[320];
	RHS44 -= go[320] * *cnV[320];
	m_A211 += gt[321];
	m_A211 += gt[322];
	m_A211 += gt[323];
	m_A211 += gt[324];
	m_A211 += gt[325];
	m_A211 += gt[326];
	m_A211 += gt[327];
	m_A211 += gt[328];
	m_A211 += gt[329];
	m_A211 += gt[330];
	m_A211 += gt[331];
	m_A211 += gt[332];
	m_A211 += gt[333];
	m_A208 += go[321];
	m_A208 += go[322];
	m_A208 += go[323];
	m_A208 += go[324];
	m_A210 += go[325];
	m_A210 += go[326];
	m_A210 += go[327];
	m_A209 += go[328];
	m_A212 += go[329];
	m_A212 += go[330];
	m_A213 += go[331];
	m_A213 += go[332];
	double RHS45 = Idr[321];
	RHS45 += Idr[322];
	RHS45 += Idr[323];
	RHS45 += Idr[324];
	RHS45 += Idr[325];
	RHS45 += Idr[326];
	RHS45 += Idr[327];
	RHS45 += Idr[328];
	RHS45 += Idr[329];
	RHS45 += Idr[330];
	RHS45 += Idr[331];
	RHS45 += Idr[332];
	RHS45 += Idr[333];
	RHS45 -= go[333] * *cnV[333];
	m_A222 += gt[334];
	m_A222 += gt[335];
	m_A222 += gt[336];
	m_A222 += gt[337];
	m_A222 += gt[338];
	m_A222 += gt[339];
	m_A222 += gt[340];
	m_A222 += gt[341];
	m_A222 += gt[342];
	m_A222 += gt[343];
	m_A222 += gt[344];
	m_A215 += go[334];
	m_A215 += go[335];
	m_A218 += go[336];
	m_A217 += go[337];
	m_A217 += go[338];
	m_A214 += go[339];
	m_A214 += go[340];
	m_A214 += go[341];
	m_A227 += go[342];
	m_A227 += go[343];
	double RHS46 = Idr[334];
	RHS46 += Idr[335];
	RHS46 += Idr[336];
	RHS46 += Idr[337];
	RHS46 += Idr[338];
	RHS46 += Idr[339];
	RHS46 += Idr[340];
	RHS46 += Idr[341];
	RHS46 += Idr[342];
	RHS46 += Idr[343];
	RHS46 += Idr[344];
	RHS46 -= go[344] * *cnV[344];
	m_A241 += gt[345];
	m_A241 += gt[346];
	m_A241 += gt[347];
	m_A241 += gt[348];
	m_A241 += gt[349];
	m_A241 += gt[350];
	m_A237 += go[345];
	m_A230 += go[346];
	m_A229 += go[347];
	m_A228 += go[348];
	m_A234 += go[349];
	double RHS47 = Idr[345];
	RHS47 += Idr[346];
	RHS47 += Idr[347];
	RHS47 += Idr[348];
	RHS47 += Idr[349];
	RHS47 += Idr[350];
	RHS47 -= go[350] * *cnV[350];
	m_A257 += gt[351];
	m_A257 += gt[352];
	m_A257 += gt[353];
	m_A257 += gt[354];
	m_A257 += gt[355];
	m_A257 += gt[356];
	m_A257 += gt[357];
	m_A257 += gt[358];
	m_A257 += gt[359];
	m_A257 += gt[360];
	m_A257 += gt[361];
	m_A257 += gt[362];
	m_A249 += go[351];
	m_A246 += go[352];
	m_A248 += go[353];
	m_A247 += go[354];
	m_A247 += go[355];
	m_A247 += go[356];
	m_A253 += go[357];
	m_A253 += go[358];
	m_A254 += go[359];
	m_A254 += go[360];
	double RHS48 = Idr[351];
	RHS48 += Idr[352];
	RHS48 += Idr[353];
	RHS48 += Idr[354];
	RHS48 += Idr[355];
	RHS48 += Idr[356];
	RHS48 += Idr[357];
	RHS48 += Idr[358];
	RHS48 += Idr[359];
	RHS48 += Idr[360];
	RHS48 += Idr[361];
	RHS48 += Idr[362];
	RHS48 -= go[361] * *cnV[361];
	RHS48 -= go[362] * *cnV[362];
	m_A273 += gt[363];
	m_A273 += gt[364];
	m_A273 += gt[365];
	m_A273 += gt[366];
	m_A273 += gt[367];
	m_A273 += gt[368];
	m_A273 += gt[369];
	m_A273 += gt[370];
	m_A273 += gt[371];
	m_A273 += gt[372];
	m_A273 += gt[373];
	m_A262 += go[363];
	m_A262 += go[364];
	m_A264 += go[365];
	m_A269 += go[366];
	m_A269 += go[367];
	m_A263 += go[368];
	m_A263 += go[369];
	m_A263 += go[370];
	m_A261 += go[371];
	m_A261 += go[372];
	double RHS49 = Idr[363];
	RHS49 += Idr[364];
	RHS49 += Idr[365];
	RHS49 += Idr[366];
	RHS49 += Idr[367];
	RHS49 += Idr[368];
	RHS49 += Idr[369];
	RHS49 += Idr[370];
	RHS49 += Idr[371];
	RHS49 += Idr[372];
	RHS49 += Idr[373];
	RHS49 -= go[373] * *cnV[373];
	m_A288 += gt[374];
	m_A288 += gt[375];
	m_A288 += gt[376];
	m_A288 += gt[377];
	m_A288 += gt[378];
	m_A288 += gt[379];
	m_A288 += gt[380];
	m_A288 += gt[381];
	m_A288 += gt[382];
	m_A288 += gt[383];
	m_A288 += gt[384];
	m_A277 += go[374];
	m_A277 += go[375];
	m_A279 += go[376];
	m_A283 += go[377];
	m_A283 += go[378];
	m_A278 += go[379];
	m_A278 += go[380];
	m_A278 += go[381];
	m_A276 += go[382];
	m_A276 += go[383];
	double RHS50 = Idr[374];
	RHS50 += Idr[375];
	RHS50 += Idr[376];
	RHS50 += Idr[377];
	RHS50 += Idr[378];
	RHS50 += Idr[379];
	RHS50 += Idr[380];
	RHS50 += Idr[381];
	RHS50 += Idr[382];
	RHS50 += Idr[383];
	RHS50 += Idr[384];
	RHS50 -= go[384] * *cnV[384];
	m_A302 += gt[385];
	m_A302 += gt[386];
	m_A302 += gt[387];
	m_A302 += gt[388];
	m_A302 += gt[389];
	m_A302 += gt[390];
	m_A302 += gt[391];
	m_A302 += gt[392];
	m_A302 += gt[393];
	m_A302 += gt[394];
	m_A302 += gt[395];
	m_A302 += gt[396];
	m_A292 += go[385];
	m_A290 += go[386];
	m_A293 += go[387];
	m_A291 += go[388];
	m_A291 += go[389];
	m_A291 += go[390];
	m_A297 += go[391];
	m_A297 += go[392];
	m_A296 += go[393];
	m_A296 += go[394];
	double RHS51 = Idr[385];
	RHS51 += Idr[386];
	RHS51 += Idr[387];
	RHS51 += Idr[388];
	RHS51 += Idr[389];
	RHS51 += Idr[390];
	RHS51 += Idr[391];
	RHS51 += Idr[392];
	RHS51 += Idr[393];
	RHS51 += Idr[394];
	RHS51 += Idr[395];
	RHS51 += Idr[396];
	RHS51 -= go[395] * *cnV[395];
	RHS51 -= go[396] * *cnV[396];
	const double f0 = 1.0 / m_A0;
	const double f0_27 = -f0 * m_A84;
	m_A85 += m_A1 * f0_27;
	m_A86 += m_A2 * f0_27;
	m_A87 += m_A3 * f0_27;
	RHS27 += f0_27 * RHS0;
	const double f0_44 = -f0 * m_A202;
	m_A204 += m_A1 * f0_44;
	m_A205 += m_A2 * f0_44;
	m_A207 += m_A3 * f0_44;
	RHS44 += f0_44 * RHS0;
	const double f0_49 = -f0 * m_A261;
	m_A263 += m_A1 * f0_49;
	m_A269 += m_A2 * f0_49;
	m_A273 += m_A3 * f0_49;
	RHS49 += f0_49 * RHS0;
	const double f1 = 1.0 / m_A4;
	const double f1_44 = -f1 * m_A203;
	m_A205 += m_A5 * f1_44;
	m_A206 += m_A6 * f1_44;
	RHS44 += f1_44 * RHS1;
	const double f1_48 = -f1 * m_A246;
	m_A254 += m_A5 * f1_48;
	m_A257 += m_A6 * f1_48;
	RHS48 += f1_48 * RHS1;
	const double f2 = 1.0 / m_A7;
	const double f2_28 = -f2 * m_A88;
	m_A89 += m_A8 * f2_28;
	m_A90 += m_A9 * f2_28;
	m_A91 += m_A10 * f2_28;
	RHS28 += f2_28 * RHS2;
	const double f2_43 = -f2 * m_A188;
	m_A190 += m_A8 * f2_43;
	m_A195 += m_A9 * f2_43;
	m_A198 += m_A10 * f2_43;
	RHS43 += f2_43 * RHS2;
	const double f2_48 = -f2 * m_A247;
	m_A248 += m_A8 * f2_48;
	m_A253 += m_A9 * f2_48;
	m_A257 += m_A10 * f2_48;
	RHS48 += f2_48 * RHS2;
	const double f3 = 1.0 / m_A11;
	const double f3_30 = -f3 * m_A96;
	m_A99 += m_A12 * f3_30;
	m_A103 += m_A13 * f3_30;
	RHS30 += f3_30 * RHS3;
	const double f3_49 = -f3 * m_A262;
	m_A264 += m_A12 * f3_49;
	m_A273 += m_A13 * f3_49;
	RHS49 += f3_49 * RHS3;
	const double f4 = 1.0 / m_A14;
	const double f4_45 = -f4 * m_A208;
	m_A211 += m_A15 * f4_45;
	m_A213 += m_A16 * f4_45;
	RHS45 += f4_45 * RHS4;
	const double f4_51 = -f4 * m_A290;
	m_A296 += m_A15 * f4_51;
	m_A302 += m_A16 * f4_51;
	RHS51 += f4_51 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_34 = -f5 * m_A125;
	m_A126 += m_A18 * f5_34;
	m_A127 += m_A19 * f5_34;
	m_A128 += m_A20 * f5_34;
	RHS34 += f5_34 * RHS5;
	const double f5_45 = -f5 * m_A209;
	m_A210 += m_A18 * f5_45;
	m_A211 += m_A19 * f5_45;
	m_A212 += m_A20 * f5_45;
	RHS45 += f5_45 * RHS5;
	const double f5_50 = -f5 * m_A276;
	m_A278 += m_A18 * f5_50;
	m_A283 += m_A19 * f5_50;
	m_A288 += m_A20 * f5_50;
	RHS50 += f5_50 * RHS5;
	const double f6 = 1.0 / m_A21;
	const double f6_24 = -f6 * m_A72;
	m_A74 += m_A22 * f6_24;
	RHS24 += f6_24 * RHS6;
	const double f7 = 1.0 / m_A23;
	const double f7_35 = -f7 * m_A129;
	m_A130 += m_A24 * f7_35;
	m_A131 += m_A25 * f7_35;
	m_A132 += m_A26 * f7_35;
	RHS35 += f7_35 * RHS7;
	const double f7_46 = -f7 * m_A214;
	m_A217 += m_A24 * f7_46;
	m_A222 += m_A25 * f7_46;
	m_A227 += m_A26 * f7_46;
	RHS46 += f7_46 * RHS7;
	const double f7_51 = -f7 * m_A291;
	m_A293 += m_A24 * f7_51;
	m_A297 += m_A25 * f7_51;
	m_A302 += m_A26 * f7_51;
	RHS51 += f7_51 * RHS7;
	const double f8 = 1.0 / m_A27;
	const double f8_30 = -f8 * m_A97;
	m_A99 += m_A28 * f8_30;
	m_A101 += m_A29 * f8_30;
	RHS30 += f8_30 * RHS8;
	const double f8_39 = -f8 * m_A150;
	m_A155 += m_A28 * f8_39;
	m_A158 += m_A29 * f8_39;
	RHS39 += f8_39 * RHS8;
	const double f9 = 1.0 / m_A30;
	const double f9_24 = -f9 * m_A73;
	m_A74 += m_A31 * f9_24;
	m_A75 += m_A32 * f9_24;
	m_A76 += m_A33 * f9_24;
	RHS24 += f9_24 * RHS9;
	const double f9_26 = -f9 * m_A80;
	m_A81 += m_A31 * f9_26;
	m_A82 += m_A32 * f9_26;
	m_A83 += m_A33 * f9_26;
	RHS26 += f9_26 * RHS9;
	const double f9_39 = -f9 * m_A151;
	m_A153 += m_A31 * f9_39;
	m_A154 += m_A32 * f9_39;
	m_A158 += m_A33 * f9_39;
	RHS39 += f9_39 * RHS9;
	const double f10 = 1.0 / m_A34;
	const double f10_36 = -f10 * m_A133;
	m_A137 += m_A35 * f10_36;
	m_A138 += m_A36 * f10_36;
	RHS36 += f10_36 * RHS10;
	const double f10_39 = -f10 * m_A152;
	m_A157 += m_A35 * f10_39;
	m_A158 += m_A36 * f10_39;
	RHS39 += f10_39 * RHS10;
	const double f11 = 1.0 / m_A37;
	const double f11_36 = -f11 * m_A134;
	m_A137 += m_A38 * f11_36;
	m_A143 += m_A39 * f11_36;
	RHS36 += f11_36 * RHS11;
	const double f11_50 = -f11 * m_A277;
	m_A279 += m_A38 * f11_50;
	m_A288 += m_A39 * f11_50;
	RHS50 += f11_50 * RHS11;
	const double f12 = 1.0 / m_A40;
	const double f12_30 = -f12 * m_A98;
	m_A99 += m_A41 * f12_30;
	m_A100 += m_A42 * f12_30;
	m_A102 += m_A43 * f12_30;
	RHS30 += f12_30 * RHS12;
	const double f12_32 = -f12 * m_A108;
	m_A110 += m_A41 * f12_32;
	m_A111 += m_A42 * f12_32;
	m_A114 += m_A43 * f12_32;
	RHS32 += f12_32 * RHS12;
	const double f12_43 = -f12 * m_A189;
	m_A191 += m_A41 * f12_43;
	m_A192 += m_A42 * f12_43;
	m_A195 += m_A43 * f12_43;
	RHS43 += f12_43 * RHS12;
	const double f13 = 1.0 / m_A44;
	const double f13_31 = -f13 * m_A104;
	m_A105 += m_A45 * f13_31;
	m_A107 += m_A46 * f13_31;
	RHS31 += f13_31 * RHS13;
	const double f14 = 1.0 / m_A47;
	const double f14_37 = -f14 * m_A144;
	m_A145 += m_A48 * f14_37;
	RHS37 += f14_37 * RHS14;
	const double f15 = 1.0 / m_A49;
	const double f15_40 = -f15 * m_A166;
	m_A172 += m_A50 * f15_40;
	RHS40 += f15_40 * RHS15;
	const double f16 = 1.0 / m_A51;
	const double f16_32 = -f16 * m_A109;
	m_A113 += m_A52 * f16_32;
	RHS32 += f16_32 * RHS16;
	const double f17 = 1.0 / m_A53;
	const double f17_33 = -f17 * m_A116;
	m_A119 += m_A54 * f17_33;
	m_A124 += m_A55 * f17_33;
	RHS33 += f17_33 * RHS17;
	const double f18 = 1.0 / m_A56;
	const double f18_29 = -f18 * m_A92;
	m_A94 += m_A57 * f18_29;
	RHS29 += f18_29 * RHS18;
	const double f19 = 1.0 / m_A58;
	const double f19_33 = -f19 * m_A117;
	m_A119 += m_A59 * f19_33;
	m_A120 += m_A60 * f19_33;
	m_A122 += m_A61 * f19_33;
	RHS33 += f19_33 * RHS19;
	const double f19_36 = -f19 * m_A135;
	m_A136 += m_A59 * f19_36;
	m_A137 += m_A60 * f19_36;
	m_A140 += m_A61 * f19_36;
	RHS36 += f19_36 * RHS19;
	const double f19_46 = -f19 * m_A215;
	m_A216 += m_A59 * f19_46;
	m_A218 += m_A60 * f19_46;
	m_A222 += m_A61 * f19_46;
	RHS46 += f19_46 * RHS19;
	const double f20 = 1.0 / m_A62;
	const double f20_33 = -f20 * m_A118;
	m_A119 += m_A63 * f20_33;
	m_A123 += m_A64 * f20_33;
	RHS33 += f20_33 * RHS20;
	const double f20_47 = -f20 * m_A228;
	m_A232 += m_A63 * f20_47;
	m_A241 += m_A64 * f20_47;
	RHS47 += f20_47 * RHS20;
	const double f21 = 1.0 / m_A65;
	const double f21_41 = -f21 * m_A180;
	m_A182 += m_A66 * f21_41;
	RHS41 += f21_41 * RHS21;
	const double f22 = 1.0 / m_A67;
	const double f22_29 = -f22 * m_A93;
	m_A94 += m_A68 * f22_29;
	m_A95 += m_A69 * f22_29;
	RHS29 += f22_29 * RHS22;
	const double f22_47 = -f22 * m_A229;
	m_A231 += m_A68 * f22_47;
	m_A241 += m_A69 * f22_47;
	RHS47 += f22_47 * RHS22;
	const double f23 = 1.0 / m_A70;
	const double f23_38 = -f23 * m_A147;
	m_A149 += m_A71 * f23_38;
	RHS38 += f23_38 * RHS23;
	const double f23_42 = -f23 * m_A183;
	m_A186 += m_A71 * f23_42;
	RHS42 += f23_42 * RHS23;
	const double f24 = 1.0 / m_A74;
	const double f24_26 = -f24 * m_A81;
	m_A82 += m_A75 * f24_26;
	m_A83 += m_A76 * f24_26;
	RHS26 += f24_26 * RHS24;
	const double f24_39 = -f24 * m_A153;
	m_A154 += m_A75 * f24_39;
	m_A158 += m_A76 * f24_39;
	RHS39 += f24_39 * RHS24;
	const double f25 = 1.0 / m_A77;
	const double f25_42 = -f25 * m_A184;
	m_A186 += m_A78 * f25_42;
	m_A187 += m_A79 * f25_42;
	RHS42 += f25_42 * RHS25;
	const double f25_47 = -f25 * m_A230;
	m_A238 += m_A78 * f25_47;
	m_A241 += m_A79 * f25_47;
	RHS47 += f25_47 * RHS25;
	const double f26 = 1.0 / m_A82;
	const double f26_39 = -f26 * m_A154;
	m_A158 += m_A83 * f26_39;
	RHS39 += f26_39 * RHS26;
	const double f27 = 1.0 / m_A85;
	const double f27_44 = -f27 * m_A204;
	m_A205 += m_A86 * f27_44;
	m_A207 += m_A87 * f27_44;
	RHS44 += f27_44 * RHS27;
	const double f27_49 = -f27 * m_A263;
	m_A269 += m_A86 * f27_49;
	m_A273 += m_A87 * f27_49;
	RHS49 += f27_49 * RHS27;
	const double f28 = 1.0 / m_A89;
	const double f28_43 = -f28 * m_A190;
	m_A195 += m_A90 * f28_43;
	m_A198 += m_A91 * f28_43;
	RHS43 += f28_43 * RHS28;
	const double f28_48 = -f28 * m_A248;
	m_A253 += m_A90 * f28_48;
	m_A257 += m_A91 * f28_48;
	RHS48 += f28_48 * RHS28;
	const double f29 = 1.0 / m_A94;
	const double f29_47 = -f29 * m_A231;
	m_A241 += m_A95 * f29_47;
	RHS47 += f29_47 * RHS29;
	const double f30 = 1.0 / m_A99;
	const double f30_32 = -f30 * m_A110;
	m_A111 += m_A100 * f30_32;
	m_A112 += m_A101 * f30_32;
	m_A114 += m_A102 * f30_32;
	m_A115 += m_A103 * f30_32;
	RHS32 += f30_32 * RHS30;
	const double f30_39 = -f30 * m_A155;
	m_A156 += m_A100 * f30_39;
	m_A158 += m_A101 * f30_39;
	m_A160 += m_A102 * f30_39;
	m_A164 += m_A103 * f30_39;
	RHS39 += f30_39 * RHS30;
	const double f30_43 = -f30 * m_A191;
	m_A192 += m_A100 * f30_43;
	m_A193 += m_A101 * f30_43;
	m_A195 += m_A102 * f30_43;
	m_A199 += m_A103 * f30_43;
	RHS43 += f30_43 * RHS30;
	const double f30_49 = -f30 * m_A264;
	m_A265 += m_A100 * f30_49;
	m_A266 += m_A101 * f30_49;
	m_A268 += m_A102 * f30_49;
	m_A273 += m_A103 * f30_49;
	RHS49 += f30_49 * RHS30;
	const double f31 = 1.0 / m_A105;
	const double f31_40 = -f31 * m_A167;
	m_A172 += m_A106 * f31_40;
	m_A179 += m_A107 * f31_40;
	RHS40 += f31_40 * RHS31;
	const double f31_51 = -f31 * m_A292;
	m_A294 += m_A106 * f31_51;
	m_A302 += m_A107 * f31_51;
	RHS51 += f31_51 * RHS31;
	const double f32 = 1.0 / m_A111;
	const double f32_39 = -f32 * m_A156;
	m_A158 += m_A112 * f32_39;
	m_A159 += m_A113 * f32_39;
	m_A160 += m_A114 * f32_39;
	m_A164 += m_A115 * f32_39;
	RHS39 += f32_39 * RHS32;
	const double f32_40 = -f32 * m_A168;
	m_A171 += m_A112 * f32_40;
	m_A172 += m_A113 * f32_40;
	m_A173 += m_A114 * f32_40;
	m_A177 += m_A115 * f32_40;
	RHS40 += f32_40 * RHS32;
	const double f32_43 = -f32 * m_A192;
	m_A193 += m_A112 * f32_43;
	m_A194 += m_A113 * f32_43;
	m_A195 += m_A114 * f32_43;
	m_A199 += m_A115 * f32_43;
	RHS43 += f32_43 * RHS32;
	const double f32_49 = -f32 * m_A265;
	m_A266 += m_A112 * f32_49;
	m_A267 += m_A113 * f32_49;
	m_A268 += m_A114 * f32_49;
	m_A273 += m_A115 * f32_49;
	RHS49 += f32_49 * RHS32;
	const double f33 = 1.0 / m_A119;
	const double f33_36 = -f33 * m_A136;
	m_A137 += m_A120 * f33_36;
	m_A139 += m_A121 * f33_36;
	m_A140 += m_A122 * f33_36;
	m_A141 += m_A123 * f33_36;
	m_A142 += m_A124 * f33_36;
	RHS36 += f33_36 * RHS33;
	const double f33_40 = -f33 * m_A169;
	m_A170 += m_A120 * f33_40;
	m_A172 += m_A121 * f33_40;
	m_A174 += m_A122 * f33_40;
	m_A175 += m_A123 * f33_40;
	m_A176 += m_A124 * f33_40;
	RHS40 += f33_40 * RHS33;
	const double f33_46 = -f33 * m_A216;
	m_A218 += m_A120 * f33_46;
	m_A220 += m_A121 * f33_46;
	m_A222 += m_A122 * f33_46;
	m_A223 += m_A123 * f33_46;
	m_A224 += m_A124 * f33_46;
	RHS46 += f33_46 * RHS33;
	const double f33_47 = -f33 * m_A232;
	m_A233 += m_A120 * f33_47;
	m_A236 += m_A121 * f33_47;
	m_A240 += m_A122 * f33_47;
	m_A241 += m_A123 * f33_47;
	m_A242 += m_A124 * f33_47;
	RHS47 += f33_47 * RHS33;
	const double f33_48 = -f33 * m_A249;
	m_A250 += m_A120 * f33_48;
	m_A252 += m_A121 * f33_48;
	m_A255 += m_A122 * f33_48;
	m_A256 += m_A123 * f33_48;
	m_A257 += m_A124 * f33_48;
	RHS48 += f33_48 * RHS33;
	const double f34 = 1.0 / m_A126;
	const double f34_45 = -f34 * m_A210;
	m_A211 += m_A127 * f34_45;
	m_A212 += m_A128 * f34_45;
	RHS45 += f34_45 * RHS34;
	const double f34_50 = -f34 * m_A278;
	m_A283 += m_A127 * f34_50;
	m_A288 += m_A128 * f34_50;
	RHS50 += f34_50 * RHS34;
	const double f35 = 1.0 / m_A130;
	const double f35_46 = -f35 * m_A217;
	m_A222 += m_A131 * f35_46;
	m_A227 += m_A132 * f35_46;
	RHS46 += f35_46 * RHS35;
	const double f35_51 = -f35 * m_A293;
	m_A297 += m_A131 * f35_51;
	m_A302 += m_A132 * f35_51;
	RHS51 += f35_51 * RHS35;
	const double f36 = 1.0 / m_A137;
	const double f36_39 = -f36 * m_A157;
	m_A158 += m_A138 * f36_39;
	m_A159 += m_A139 * f36_39;
	m_A161 += m_A140 * f36_39;
	m_A162 += m_A141 * f36_39;
	m_A163 += m_A142 * f36_39;
	m_A165 += m_A143 * f36_39;
	RHS39 += f36_39 * RHS36;
	const double f36_40 = -f36 * m_A170;
	m_A171 += m_A138 * f36_40;
	m_A172 += m_A139 * f36_40;
	m_A174 += m_A140 * f36_40;
	m_A175 += m_A141 * f36_40;
	m_A176 += m_A142 * f36_40;
	m_A178 += m_A143 * f36_40;
	RHS40 += f36_40 * RHS36;
	const double f36_46 = -f36 * m_A218;
	m_A219 += m_A138 * f36_46;
	m_A220 += m_A139 * f36_46;
	m_A222 += m_A140 * f36_46;
	m_A223 += m_A141 * f36_46;
	m_A224 += m_A142 * f36_46;
	m_A226 += m_A143 * f36_46;
	RHS46 += f36_46 * RHS36;
	const double f36_47 = -f36 * m_A233;
	m_A235 += m_A138 * f36_47;
	m_A236 += m_A139 * f36_47;
	m_A240 += m_A140 * f36_47;
	m_A241 += m_A141 * f36_47;
	m_A242 += m_A142 * f36_47;
	m_A244 += m_A143 * f36_47;
	RHS47 += f36_47 * RHS36;
	const double f36_48 = -f36 * m_A250;
	m_A251 += m_A138 * f36_48;
	m_A252 += m_A139 * f36_48;
	m_A255 += m_A140 * f36_48;
	m_A256 += m_A141 * f36_48;
	m_A257 += m_A142 * f36_48;
	m_A259 += m_A143 * f36_48;
	RHS48 += f36_48 * RHS36;
	const double f36_50 = -f36 * m_A279;
	m_A280 += m_A138 * f36_50;
	m_A281 += m_A139 * f36_50;
	m_A284 += m_A140 * f36_50;
	m_A285 += m_A141 * f36_50;
	m_A286 += m_A142 * f36_50;
	m_A288 += m_A143 * f36_50;
	RHS50 += f36_50 * RHS36;
	const double f37 = 1.0 / m_A145;
	const double f37_47 = -f37 * m_A234;
	m_A241 += m_A146 * f37_47;
	RHS47 += f37_47 * RHS37;
	const double f38 = 1.0 / m_A148;
	const double f38_42 = -f38 * m_A185;
	m_A186 += m_A149 * f38_42;
	RHS42 += f38_42 * RHS38;
	const double f39 = 1.0 / m_A158;
	const double f39_40 = -f39 * m_A171;
	m_A172 += m_A159 * f39_40;
	m_A173 += m_A160 * f39_40;
	m_A174 += m_A161 * f39_40;
	m_A175 += m_A162 * f39_40;
	m_A176 += m_A163 * f39_40;
	m_A177 += m_A164 * f39_40;
	m_A178 += m_A165 * f39_40;
	RHS40 += f39_40 * RHS39;
	const double f39_43 = -f39 * m_A193;
	m_A194 += m_A159 * f39_43;
	m_A195 += m_A160 * f39_43;
	m_A196 += m_A161 * f39_43;
	m_A197 += m_A162 * f39_43;
	m_A198 += m_A163 * f39_43;
	m_A199 += m_A164 * f39_43;
	m_A200 += m_A165 * f39_43;
	RHS43 += f39_43 * RHS39;
	const double f39_46 = -f39 * m_A219;
	m_A220 += m_A159 * f39_46;
	m_A221 += m_A160 * f39_46;
	m_A222 += m_A161 * f39_46;
	m_A223 += m_A162 * f39_46;
	m_A224 += m_A163 * f39_46;
	m_A225 += m_A164 * f39_46;
	m_A226 += m_A165 * f39_46;
	RHS46 += f39_46 * RHS39;
	const double f39_47 = -f39 * m_A235;
	m_A236 += m_A159 * f39_47;
	m_A239 += m_A160 * f39_47;
	m_A240 += m_A161 * f39_47;
	m_A241 += m_A162 * f39_47;
	m_A242 += m_A163 * f39_47;
	m_A243 += m_A164 * f39_47;
	m_A244 += m_A165 * f39_47;
	RHS47 += f39_47 * RHS39;
	const double f39_48 = -f39 * m_A251;
	m_A252 += m_A159 * f39_48;
	m_A253 += m_A160 * f39_48;
	m_A255 += m_A161 * f39_48;
	m_A256 += m_A162 * f39_48;
	m_A257 += m_A163 * f39_48;
	m_A258 += m_A164 * f39_48;
	m_A259 += m_A165 * f39_48;
	RHS48 += f39_48 * RHS39;
	const double f39_49 = -f39 * m_A266;
	m_A267 += m_A159 * f39_49;
	m_A268 += m_A160 * f39_49;
	m_A270 += m_A161 * f39_49;
	m_A271 += m_A162 * f39_49;
	m_A272 += m_A163 * f39_49;
	m_A273 += m_A164 * f39_49;
	m_A274 += m_A165 * f39_49;
	RHS49 += f39_49 * RHS39;
	const double f39_50 = -f39 * m_A280;
	m_A281 += m_A159 * f39_50;
	m_A282 += m_A160 * f39_50;
	m_A284 += m_A161 * f39_50;
	m_A285 += m_A162 * f39_50;
	m_A286 += m_A163 * f39_50;
	m_A287 += m_A164 * f39_50;
	m_A288 += m_A165 * f39_50;
	RHS50 += f39_50 * RHS39;
	const double f40 = 1.0 / m_A172;
	const double f40_43 = -f40 * m_A194;
	m_A195 += m_A173 * f40_43;
	m_A196 += m_A174 * f40_43;
	m_A197 += m_A175 * f40_43;
	m_A198 += m_A176 * f40_43;
	m_A199 += m_A177 * f40_43;
	m_A200 += m_A178 * f40_43;
	m_A201 += m_A179 * f40_43;
	RHS43 += f40_43 * RHS40;
	const double f40_46 = -f40 * m_A220;
	m_A221 += m_A173 * f40_46;
	m_A222 += m_A174 * f40_46;
	m_A223 += m_A175 * f40_46;
	m_A224 += m_A176 * f40_46;
	m_A225 += m_A177 * f40_46;
	m_A226 += m_A178 * f40_46;
	m_A227 += m_A179 * f40_46;
	RHS46 += f40_46 * RHS40;
	const double f40_47 = -f40 * m_A236;
	m_A239 += m_A173 * f40_47;
	m_A240 += m_A174 * f40_47;
	m_A241 += m_A175 * f40_47;
	m_A242 += m_A176 * f40_47;
	m_A243 += m_A177 * f40_47;
	m_A244 += m_A178 * f40_47;
	m_A245 += m_A179 * f40_47;
	RHS47 += f40_47 * RHS40;
	const double f40_48 = -f40 * m_A252;
	m_A253 += m_A173 * f40_48;
	m_A255 += m_A174 * f40_48;
	m_A256 += m_A175 * f40_48;
	m_A257 += m_A176 * f40_48;
	m_A258 += m_A177 * f40_48;
	m_A259 += m_A178 * f40_48;
	m_A260 += m_A179 * f40_48;
	RHS48 += f40_48 * RHS40;
	const double f40_49 = -f40 * m_A267;
	m_A268 += m_A173 * f40_49;
	m_A270 += m_A174 * f40_49;
	m_A271 += m_A175 * f40_49;
	m_A272 += m_A176 * f40_49;
	m_A273 += m_A177 * f40_49;
	m_A274 += m_A178 * f40_49;
	m_A275 += m_A179 * f40_49;
	RHS49 += f40_49 * RHS40;
	const double f40_50 = -f40 * m_A281;
	m_A282 += m_A173 * f40_50;
	m_A284 += m_A174 * f40_50;
	m_A285 += m_A175 * f40_50;
	m_A286 += m_A176 * f40_50;
	m_A287 += m_A177 * f40_50;
	m_A288 += m_A178 * f40_50;
	m_A289 += m_A179 * f40_50;
	RHS50 += f40_50 * RHS40;
	const double f40_51 = -f40 * m_A294;
	m_A295 += m_A173 * f40_51;
	m_A297 += m_A174 * f40_51;
	m_A298 += m_A175 * f40_51;
	m_A299 += m_A176 * f40_51;
	m_A300 += m_A177 * f40_51;
	m_A301 += m_A178 * f40_51;
	m_A302 += m_A179 * f40_51;
	RHS51 += f40_51 * RHS40;
	const double f41 = 1.0 / m_A181;
	const double f41_47 = -f41 * m_A237;
	m_A241 += m_A182 * f41_47;
	RHS47 += f41_47 * RHS41;
	const double f42 = 1.0 / m_A186;
	const double f42_47 = -f42 * m_A238;
	m_A241 += m_A187 * f42_47;
	RHS47 += f42_47 * RHS42;
	const double f43 = 1.0 / m_A195;
	const double f43_46 = -f43 * m_A221;
	m_A222 += m_A196 * f43_46;
	m_A223 += m_A197 * f43_46;
	m_A224 += m_A198 * f43_46;
	m_A225 += m_A199 * f43_46;
	m_A226 += m_A200 * f43_46;
	m_A227 += m_A201 * f43_46;
	RHS46 += f43_46 * RHS43;
	const double f43_47 = -f43 * m_A239;
	m_A240 += m_A196 * f43_47;
	m_A241 += m_A197 * f43_47;
	m_A242 += m_A198 * f43_47;
	m_A243 += m_A199 * f43_47;
	m_A244 += m_A200 * f43_47;
	m_A245 += m_A201 * f43_47;
	RHS47 += f43_47 * RHS43;
	const double f43_48 = -f43 * m_A253;
	m_A255 += m_A196 * f43_48;
	m_A256 += m_A197 * f43_48;
	m_A257 += m_A198 * f43_48;
	m_A258 += m_A199 * f43_48;
	m_A259 += m_A200 * f43_48;
	m_A260 += m_A201 * f43_48;
	RHS48 += f43_48 * RHS43;
	const double f43_49 = -f43 * m_A268;
	m_A270 += m_A196 * f43_49;
	m_A271 += m_A197 * f43_49;
	m_A272 += m_A198 * f43_49;
	m_A273 += m_A199 * f43_49;
	m_A274 += m_A200 * f43_49;
	m_A275 += m_A201 * f43_49;
	RHS49 += f43_49 * RHS43;
	const double f43_50 = -f43 * m_A282;
	m_A284 += m_A196 * f43_50;
	m_A285 += m_A197 * f43_50;
	m_A286 += m_A198 * f43_50;
	m_A287 += m_A199 * f43_50;
	m_A288 += m_A200 * f43_50;
	m_A289 += m_A201 * f43_50;
	RHS50 += f43_50 * RHS43;
	const double f43_51 = -f43 * m_A295;
	m_A297 += m_A196 * f43_51;
	m_A298 += m_A197 * f43_51;
	m_A299 += m_A198 * f43_51;
	m_A300 += m_A199 * f43_51;
	m_A301 += m_A200 * f43_51;
	m_A302 += m_A201 * f43_51;
	RHS51 += f43_51 * RHS43;
	const double f44 = 1.0 / m_A205;
	const double f44_48 = -f44 * m_A254;
	m_A257 += m_A206 * f44_48;
	m_A258 += m_A207 * f44_48;
	RHS48 += f44_48 * RHS44;
	const double f44_49 = -f44 * m_A269;
	m_A272 += m_A206 * f44_49;
	m_A273 += m_A207 * f44_49;
	RHS49 += f44_49 * RHS44;
	const double f45 = 1.0 / m_A211;
	const double f45_50 = -f45 * m_A283;
	m_A288 += m_A212 * f45_50;
	m_A289 += m_A213 * f45_50;
	RHS50 += f45_50 * RHS45;
	const double f45_51 = -f45 * m_A296;
	m_A301 += m_A212 * f45_51;
	m_A302 += m_A213 * f45_51;
	RHS51 += f45_51 * RHS45;
	const double f46 = 1.0 / m_A222;
	const double f46_47 = -f46 * m_A240;
	m_A241 += m_A223 * f46_47;
	m_A242 += m_A224 * f46_47;
	m_A243 += m_A225 * f46_47;
	m_A244 += m_A226 * f46_47;
	m_A245 += m_A227 * f46_47;
	RHS47 += f46_47 * RHS46;
	const double f46_48 = -f46 * m_A255;
	m_A256 += m_A223 * f46_48;
	m_A257 += m_A224 * f46_48;
	m_A258 += m_A225 * f46_48;
	m_A259 += m_A226 * f46_48;
	m_A260 += m_A227 * f46_48;
	RHS48 += f46_48 * RHS46;
	const double f46_49 = -f46 * m_A270;
	m_A271 += m_A223 * f46_49;
	m_A272 += m_A224 * f46_49;
	m_A273 += m_A225 * f46_49;
	m_A274 += m_A226 * f46_49;
	m_A275 += m_A227 * f46_49;
	RHS49 += f46_49 * RHS46;
	const double f46_50 = -f46 * m_A284;
	m_A285 += m_A223 * f46_50;
	m_A286 += m_A224 * f46_50;
	m_A287 += m_A225 * f46_50;
	m_A288 += m_A226 * f46_50;
	m_A289 += m_A227 * f46_50;
	RHS50 += f46_50 * RHS46;
	const double f46_51 = -f46 * m_A297;
	m_A298 += m_A223 * f46_51;
	m_A299 += m_A224 * f46_51;
	m_A300 += m_A225 * f46_51;
	m_A301 += m_A226 * f46_51;
	m_A302 += m_A227 * f46_51;
	RHS51 += f46_51 * RHS46;
	const double f47 = 1.0 / m_A241;
	const double f47_48 = -f47 * m_A256;
	m_A257 += m_A242 * f47_48;
	m_A258 += m_A243 * f47_48;
	m_A259 += m_A244 * f47_48;
	m_A260 += m_A245 * f47_48;
	RHS48 += f47_48 * RHS47;
	const double f47_49 = -f47 * m_A271;
	m_A272 += m_A242 * f47_49;
	m_A273 += m_A243 * f47_49;
	m_A274 += m_A244 * f47_49;
	m_A275 += m_A245 * f47_49;
	RHS49 += f47_49 * RHS47;
	const double f47_50 = -f47 * m_A285;
	m_A286 += m_A242 * f47_50;
	m_A287 += m_A243 * f47_50;
	m_A288 += m_A244 * f47_50;
	m_A289 += m_A245 * f47_50;
	RHS50 += f47_50 * RHS47;
	const double f47_51 = -f47 * m_A298;
	m_A299 += m_A242 * f47_51;
	m_A300 += m_A243 * f47_51;
	m_A301 += m_A244 * f47_51;
	m_A302 += m_A245 * f47_51;
	RHS51 += f47_51 * RHS47;
	const double f48 = 1.0 / m_A257;
	const double f48_49 = -f48 * m_A272;
	m_A273 += m_A258 * f48_49;
	m_A274 += m_A259 * f48_49;
	m_A275 += m_A260 * f48_49;
	RHS49 += f48_49 * RHS48;
	const double f48_50 = -f48 * m_A286;
	m_A287 += m_A258 * f48_50;
	m_A288 += m_A259 * f48_50;
	m_A289 += m_A260 * f48_50;
	RHS50 += f48_50 * RHS48;
	const double f48_51 = -f48 * m_A299;
	m_A300 += m_A258 * f48_51;
	m_A301 += m_A259 * f48_51;
	m_A302 += m_A260 * f48_51;
	RHS51 += f48_51 * RHS48;
	const double f49 = 1.0 / m_A273;
	const double f49_50 = -f49 * m_A287;
	m_A288 += m_A274 * f49_50;
	m_A289 += m_A275 * f49_50;
	RHS50 += f49_50 * RHS49;
	const double f49_51 = -f49 * m_A300;
	m_A301 += m_A274 * f49_51;
	m_A302 += m_A275 * f49_51;
	RHS51 += f49_51 * RHS49;
	const double f50 = 1.0 / m_A288;
	const double f50_51 = -f50 * m_A301;
	m_A302 += m_A289 * f50_51;
	RHS51 += f50_51 * RHS50;
	V[51] = RHS51 / m_A302;
	double tmp50 = 0.0;
	tmp50 += m_A289 * V[51];
	V[50] = (RHS50 - tmp50) / m_A288;
	double tmp49 = 0.0;
	tmp49 += m_A274 * V[50];
	tmp49 += m_A275 * V[51];
	V[49] = (RHS49 - tmp49) / m_A273;
	double tmp48 = 0.0;
	tmp48 += m_A258 * V[49];
	tmp48 += m_A259 * V[50];
	tmp48 += m_A260 * V[51];
	V[48] = (RHS48 - tmp48) / m_A257;
	double tmp47 = 0.0;
	tmp47 += m_A242 * V[48];
	tmp47 += m_A243 * V[49];
	tmp47 += m_A244 * V[50];
	tmp47 += m_A245 * V[51];
	V[47] = (RHS47 - tmp47) / m_A241;
	double tmp46 = 0.0;
	tmp46 += m_A223 * V[47];
	tmp46 += m_A224 * V[48];
	tmp46 += m_A225 * V[49];
	tmp46 += m_A226 * V[50];
	tmp46 += m_A227 * V[51];
	V[46] = (RHS46 - tmp46) / m_A222;
	double tmp45 = 0.0;
	tmp45 += m_A212 * V[50];
	tmp45 += m_A213 * V[51];
	V[45] = (RHS45 - tmp45) / m_A211;
	double tmp44 = 0.0;
	tmp44 += m_A206 * V[48];
	tmp44 += m_A207 * V[49];
	V[44] = (RHS44 - tmp44) / m_A205;
	double tmp43 = 0.0;
	tmp43 += m_A196 * V[46];
	tmp43 += m_A197 * V[47];
	tmp43 += m_A198 * V[48];
	tmp43 += m_A199 * V[49];
	tmp43 += m_A200 * V[50];
	tmp43 += m_A201 * V[51];
	V[43] = (RHS43 - tmp43) / m_A195;
	double tmp42 = 0.0;
	tmp42 += m_A187 * V[47];
	V[42] = (RHS42 - tmp42) / m_A186;
	double tmp41 = 0.0;
	tmp41 += m_A182 * V[47];
	V[41] = (RHS41 - tmp41) / m_A181;
	double tmp40 = 0.0;
	tmp40 += m_A173 * V[43];
	tmp40 += m_A174 * V[46];
	tmp40 += m_A175 * V[47];
	tmp40 += m_A176 * V[48];
	tmp40 += m_A177 * V[49];
	tmp40 += m_A178 * V[50];
	tmp40 += m_A179 * V[51];
	V[40] = (RHS40 - tmp40) / m_A172;
	double tmp39 = 0.0;
	tmp39 += m_A159 * V[40];
	tmp39 += m_A160 * V[43];
	tmp39 += m_A161 * V[46];
	tmp39 += m_A162 * V[47];
	tmp39 += m_A163 * V[48];
	tmp39 += m_A164 * V[49];
	tmp39 += m_A165 * V[50];
	V[39] = (RHS39 - tmp39) / m_A158;
	double tmp38 = 0.0;
	tmp38 += m_A149 * V[42];
	V[38] = (RHS38 - tmp38) / m_A148;
	double tmp37 = 0.0;
	tmp37 += m_A146 * V[47];
	V[37] = (RHS37 - tmp37) / m_A145;
	double tmp36 = 0.0;
	tmp36 += m_A138 * V[39];
	tmp36 += m_A139 * V[40];
	tmp36 += m_A140 * V[46];
	tmp36 += m_A141 * V[47];
	tmp36 += m_A142 * V[48];
	tmp36 += m_A143 * V[50];
	V[36] = (RHS36 - tmp36) / m_A137;
	double tmp35 = 0.0;
	tmp35 += m_A131 * V[46];
	tmp35 += m_A132 * V[51];
	V[35] = (RHS35 - tmp35) / m_A130;
	double tmp34 = 0.0;
	tmp34 += m_A127 * V[45];
	tmp34 += m_A128 * V[50];
	V[34] = (RHS34 - tmp34) / m_A126;
	double tmp33 = 0.0;
	tmp33 += m_A120 * V[36];
	tmp33 += m_A121 * V[40];
	tmp33 += m_A122 * V[46];
	tmp33 += m_A123 * V[47];
	tmp33 += m_A124 * V[48];
	V[33] = (RHS33 - tmp33) / m_A119;
	double tmp32 = 0.0;
	tmp32 += m_A112 * V[39];
	tmp32 += m_A113 * V[40];
	tmp32 += m_A114 * V[43];
	tmp32 += m_A115 * V[49];
	V[32] = (RHS32 - tmp32) / m_A111;
	double tmp31 = 0.0;
	tmp31 += m_A106 * V[40];
	tmp31 += m_A107 * V[51];
	V[31] = (RHS31 - tmp31) / m_A105;
	double tmp30 = 0.0;
	tmp30 += m_A100 * V[32];
	tmp30 += m_A101 * V[39];
	tmp30 += m_A102 * V[43];
	tmp30 += m_A103 * V[49];
	V[30] = (RHS30 - tmp30) / m_A99;
	double tmp29 = 0.0;
	tmp29 += m_A95 * V[47];
	V[29] = (RHS29 - tmp29) / m_A94;
	double tmp28 = 0.0;
	tmp28 += m_A90 * V[43];
	tmp28 += m_A91 * V[48];
	V[28] = (RHS28 - tmp28) / m_A89;
	double tmp27 = 0.0;
	tmp27 += m_A86 * V[44];
	tmp27 += m_A87 * V[49];
	V[27] = (RHS27 - tmp27) / m_A85;
	double tmp26 = 0.0;
	tmp26 += m_A83 * V[39];
	V[26] = (RHS26 - tmp26) / m_A82;
	double tmp25 = 0.0;
	tmp25 += m_A78 * V[42];
	tmp25 += m_A79 * V[47];
	V[25] = (RHS25 - tmp25) / m_A77;
	double tmp24 = 0.0;
	tmp24 += m_A75 * V[26];
	tmp24 += m_A76 * V[39];
	V[24] = (RHS24 - tmp24) / m_A74;
	double tmp23 = 0.0;
	tmp23 += m_A71 * V[42];
	V[23] = (RHS23 - tmp23) / m_A70;
	double tmp22 = 0.0;
	tmp22 += m_A68 * V[29];
	tmp22 += m_A69 * V[47];
	V[22] = (RHS22 - tmp22) / m_A67;
	double tmp21 = 0.0;
	tmp21 += m_A66 * V[47];
	V[21] = (RHS21 - tmp21) / m_A65;
	double tmp20 = 0.0;
	tmp20 += m_A63 * V[33];
	tmp20 += m_A64 * V[47];
	V[20] = (RHS20 - tmp20) / m_A62;
	double tmp19 = 0.0;
	tmp19 += m_A59 * V[33];
	tmp19 += m_A60 * V[36];
	tmp19 += m_A61 * V[46];
	V[19] = (RHS19 - tmp19) / m_A58;
	double tmp18 = 0.0;
	tmp18 += m_A57 * V[29];
	V[18] = (RHS18 - tmp18) / m_A56;
	double tmp17 = 0.0;
	tmp17 += m_A54 * V[33];
	tmp17 += m_A55 * V[48];
	V[17] = (RHS17 - tmp17) / m_A53;
	double tmp16 = 0.0;
	tmp16 += m_A52 * V[40];
	V[16] = (RHS16 - tmp16) / m_A51;
	double tmp15 = 0.0;
	tmp15 += m_A50 * V[40];
	V[15] = (RHS15 - tmp15) / m_A49;
	double tmp14 = 0.0;
	tmp14 += m_A48 * V[37];
	V[14] = (RHS14 - tmp14) / m_A47;
	double tmp13 = 0.0;
	tmp13 += m_A45 * V[31];
	tmp13 += m_A46 * V[51];
	V[13] = (RHS13 - tmp13) / m_A44;
	double tmp12 = 0.0;
	tmp12 += m_A41 * V[30];
	tmp12 += m_A42 * V[32];
	tmp12 += m_A43 * V[43];
	V[12] = (RHS12 - tmp12) / m_A40;
	double tmp11 = 0.0;
	tmp11 += m_A38 * V[36];
	tmp11 += m_A39 * V[50];
	V[11] = (RHS11 - tmp11) / m_A37;
	double tmp10 = 0.0;
	tmp10 += m_A35 * V[36];
	tmp10 += m_A36 * V[39];
	V[10] = (RHS10 - tmp10) / m_A34;
	double tmp9 = 0.0;
	tmp9 += m_A31 * V[24];
	tmp9 += m_A32 * V[26];
	tmp9 += m_A33 * V[39];
	V[9] = (RHS9 - tmp9) / m_A30;
	double tmp8 = 0.0;
	tmp8 += m_A28 * V[30];
	tmp8 += m_A29 * V[39];
	V[8] = (RHS8 - tmp8) / m_A27;
	double tmp7 = 0.0;
	tmp7 += m_A24 * V[35];
	tmp7 += m_A25 * V[46];
	tmp7 += m_A26 * V[51];
	V[7] = (RHS7 - tmp7) / m_A23;
	double tmp6 = 0.0;
	tmp6 += m_A22 * V[24];
	V[6] = (RHS6 - tmp6) / m_A21;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[34];
	tmp5 += m_A19 * V[45];
	tmp5 += m_A20 * V[50];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A15 * V[45];
	tmp4 += m_A16 * V[51];
	V[4] = (RHS4 - tmp4) / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A12 * V[30];
	tmp3 += m_A13 * V[49];
	V[3] = (RHS3 - tmp3) / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A8 * V[28];
	tmp2 += m_A9 * V[43];
	tmp2 += m_A10 * V[48];
	V[2] = (RHS2 - tmp2) / m_A7;
	double tmp1 = 0.0;
	tmp1 += m_A5 * V[44];
	tmp1 += m_A6 * V[48];
	V[1] = (RHS1 - tmp1) / m_A4;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[27];
	tmp0 += m_A2 * V[44];
	tmp0 += m_A3 * V[49];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// konami1x
static void nl_gcr_62b99b9904a8c804_49_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A9 += go[8];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 -= go[9] * *cnV[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A11 += go[10];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 -= go[11] * *cnV[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A13 += go[12];
	double RHS6 = Idr[12];
	RHS6 += Idr[13];
	RHS6 -= go[13] * *cnV[13];
	m_A14 += gt[14];
	m_A14 += gt[15];
	m_A15 += go[14];
	double RHS7 = Idr[14];
	RHS7 += Idr[15];
	RHS7 -= go[15] * *cnV[15];
	m_A16 += gt[16];
	m_A16 += gt[17];
	m_A16 += gt[18];
	m_A16 += gt[19];
	m_A16 += gt[20];
	m_A16 += gt[21];
	m_A16 += gt[22];
	m_A17 += go[16];
	double RHS8 = Idr[16];
	RHS8 += Idr[17];
	RHS8 += Idr[18];
	RHS8 += Idr[19];
	RHS8 += Idr[20];
	RHS8 += Idr[21];
	RHS8 += Idr[22];
	RHS8 -= go[17] * *cnV[17];
	RHS8 -= go[18] * *cnV[18];
	RHS8 -= go[19] * *cnV[19];
	RHS8 -= go[20] * *cnV[20];
	RHS8 -= go[21] * *cnV[21];
	RHS8 -= go[22] * *cnV[22];
	m_A18 += gt[23];
	m_A18 += gt[24];
	m_A19 += go[23];
	double RHS9 = Idr[23];
	RHS9 += Idr[24];
	RHS9 -= go[24] * *cnV[24];
	m_A20 += gt[25];
	m_A20 += gt[26];
	m_A21 += go[25];
	double RHS10 = Idr[25];
	RHS10 += Idr[26];
	RHS10 -= go[26] * *cnV[26];
	m_A25 += gt[27];
	m_A25 += gt[28];
	m_A25 += gt[29];
	m_A25 += gt[30];
	m_A26 += go[27];
	m_A24 += go[28];
	m_A23 += go[29];
	m_A22 += go[30];
	double RHS11 = Idr[27];
	RHS11 += Idr[28];
	RHS11 += Idr[29];
	RHS11 += Idr[30];
	m_A30 += gt[31];
	m_A30 += gt[32];
	m_A30 += gt[33];
	m_A30 += gt[34];
	m_A31 += go[31];
	m_A29 += go[32];
	m_A28 += go[33];
	m_A27 += go[34];
	double RHS12 = Idr[31];
	RHS12 += Idr[32];
	RHS12 += Idr[33];
	RHS12 += Idr[34];
	m_A35 += gt[35];
	m_A35 += gt[36];
	m_A35 += gt[37];
	m_A35 += gt[38];
	m_A36 += go[35];
	m_A34 += go[36];
	m_A33 += go[37];
	m_A32 += go[38];
	double RHS13 = Idr[35];
	RHS13 += Idr[36];
	RHS13 += Idr[37];
	RHS13 += Idr[38];
	m_A38 += gt[39];
	m_A38 += gt[40];
	m_A38 += gt[41];
	m_A37 += go[39];
	m_A39 += go[40];
	double RHS14 = Idr[39];
	RHS14 += Idr[40];
	RHS14 += Idr[41];
	RHS14 -= go[41] * *cnV[41];
	m_A43 += gt[42];
	m_A43 += gt[43];
	m_A43 += gt[44];
	m_A43 += gt[45];
	m_A43 += gt[46];
	m_A44 += go[42];
	m_A42 += go[43];
	m_A41 += go[44];
	m_A40 += go[45];
	double RHS15 = Idr[42];
	RHS15 += Idr[43];
	RHS15 += Idr[44];
	RHS15 += Idr[45];
	RHS15 += Idr[46];
	RHS15 -= go[46] * *cnV[46];
	m_A48 += gt[47];
	m_A48 += gt[48];
	m_A48 += gt[49];
	m_A48 += gt[50];
	m_A48 += gt[51];
	m_A45 += go[47];
	m_A46 += go[48];
	m_A47 += go[49];
	double RHS16 = Idr[47];
	RHS16 += Idr[48];
	RHS16 += Idr[49];
	RHS16 += Idr[50];
	RHS16 += Idr[51];
	RHS16 -= go[50] * *cnV[50];
	RHS16 -= go[51] * *cnV[51];
	const double f0 = 1.0 / m_A0;
	const double f0_11 = -f0 * m_A22;
	m_A25 += m_A1 * f0_11;
	RHS11 += f0_11 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_11 = -f1 * m_A23;
	m_A25 += m_A3 * f1_11;
	RHS11 += f1_11 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_11 = -f2 * m_A24;
	m_A25 += m_A5 * f2_11;
	RHS11 += f2_11 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_12 = -f3 * m_A27;
	m_A30 += m_A7 * f3_12;
	RHS12 += f3_12 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_12 = -f4 * m_A28;
	m_A30 += m_A9 * f4_12;
	RHS12 += f4_12 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_12 = -f5 * m_A29;
	m_A30 += m_A11 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_13 = -f6 * m_A32;
	m_A35 += m_A13 * f6_13;
	RHS13 += f6_13 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_13 = -f7 * m_A33;
	m_A35 += m_A15 * f7_13;
	RHS13 += f7_13 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_16 = -f8 * m_A45;
	m_A47 += m_A17 * f8_16;
	RHS16 += f8_16 * RHS8;
	const double f9 = 1.0 / m_A18;
	const double f9_13 = -f9 * m_A34;
	m_A35 += m_A19 * f9_13;
	RHS13 += f9_13 * RHS9;
	const double f10 = 1.0 / m_A20;
	const double f10_14 = -f10 * m_A37;
	m_A38 += m_A21 * f10_14;
	RHS14 += f10_14 * RHS10;
	const double f11 = 1.0 / m_A25;
	const double f11_15 = -f11 * m_A40;
	m_A43 += m_A26 * f11_15;
	RHS15 += f11_15 * RHS11;
	const double f12 = 1.0 / m_A30;
	const double f12_15 = -f12 * m_A41;
	m_A43 += m_A31 * f12_15;
	RHS15 += f12_15 * RHS12;
	const double f13 = 1.0 / m_A35;
	const double f13_15 = -f13 * m_A42;
	m_A43 += m_A36 * f13_15;
	RHS15 += f13_15 * RHS13;
	const double f14 = 1.0 / m_A38;
	const double f14_16 = -f14 * m_A46;
	m_A48 += m_A39 * f14_16;
	RHS16 += f14_16 * RHS14;
	const double f15 = 1.0 / m_A43;
	const double f15_16 = -f15 * m_A47;
	m_A48 += m_A44 * f15_16;
	RHS16 += f15_16 * RHS15;
	V[16] = RHS16 / m_A48;
	double tmp15 = 0.0;
	tmp15 += m_A44 * V[16];
	V[15] = (RHS15 - tmp15) / m_A43;
	double tmp14 = 0.0;
	tmp14 += m_A39 * V[16];
	V[14] = (RHS14 - tmp14) / m_A38;
	double tmp13 = 0.0;
	tmp13 += m_A36 * V[15];
	V[13] = (RHS13 - tmp13) / m_A35;
	double tmp12 = 0.0;
	tmp12 += m_A31 * V[15];
	V[12] = (RHS12 - tmp12) / m_A30;
	double tmp11 = 0.0;
	tmp11 += m_A26 * V[15];
	V[11] = (RHS11 - tmp11) / m_A25;
	double tmp10 = 0.0;
	tmp10 += m_A21 * V[14];
	V[10] = (RHS10 - tmp10) / m_A20;
	double tmp9 = 0.0;
	tmp9 += m_A19 * V[13];
	V[9] = (RHS9 - tmp9) / m_A18;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[15];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[13];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[13];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[12];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[12];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[12];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[11];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[11];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[11];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// armora
static void nl_gcr_64e460d8f716cd89_58_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A4 += go[4];
	m_A3 += go[5];
	m_A3 += go[6];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A5 += gt[13];
	m_A6 += go[10];
	m_A6 += go[11];
	m_A7 += go[12];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[13] * *cnV[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A9 += go[14];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	RHS3 -= go[17] * *cnV[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A10 += gt[20];
	m_A10 += gt[21];
	m_A10 += gt[22];
	m_A10 += gt[23];
	m_A12 += go[18];
	m_A11 += go[19];
	m_A11 += go[20];
	double RHS4 = Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 -= go[21] * *cnV[21];
	RHS4 -= go[22] * *cnV[22];
	RHS4 -= go[23] * *cnV[23];
	m_A13 += gt[24];
	m_A13 += gt[25];
	m_A13 += gt[26];
	m_A13 += gt[27];
	m_A14 += go[24];
	m_A14 += go[25];
	m_A15 += go[26];
	double RHS5 = Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 -= go[27] * *cnV[27];
	m_A16 += gt[28];
	m_A16 += gt[29];
	m_A16 += gt[30];
	m_A16 += gt[31];
	m_A16 += gt[32];
	m_A16 += gt[33];
	m_A17 += go[28];
	double RHS6 = Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 += Idr[33];
	RHS6 -= go[29] * *cnV[29];
	RHS6 -= go[30] * *cnV[30];
	RHS6 -= go[31] * *cnV[31];
	RHS6 -= go[32] * *cnV[32];
	RHS6 -= go[33] * *cnV[33];
	m_A18 += gt[34];
	m_A18 += gt[35];
	m_A18 += gt[36];
	m_A18 += gt[37];
	m_A18 += gt[38];
	m_A18 += gt[39];
	m_A20 += go[34];
	m_A19 += go[35];
	m_A19 += go[36];
	double RHS7 = Idr[34];
	RHS7 += Idr[35];
	RHS7 += Idr[36];
	RHS7 += Idr[37];
	RHS7 += Idr[38];
	RHS7 += Idr[39];
	RHS7 -= go[37] * *cnV[37];
	RHS7 -= go[38] * *cnV[38];
	RHS7 -= go[39] * *cnV[39];
	m_A21 += gt[40];
	m_A21 += gt[41];
	m_A21 += gt[42];
	m_A21 += gt[43];
	m_A23 += go[40];
	m_A23 += go[41];
	m_A22 += go[42];
	double RHS8 = Idr[40];
	RHS8 += Idr[41];
	RHS8 += Idr[42];
	RHS8 += Idr[43];
	RHS8 -= go[43] * *cnV[43];
	m_A26 += gt[44];
	m_A26 += gt[45];
	m_A26 += gt[46];
	m_A26 += gt[47];
	m_A26 += gt[48];
	m_A26 += gt[49];
	m_A25 += go[44];
	m_A25 += go[45];
	m_A24 += go[46];
	double RHS9 = Idr[44];
	RHS9 += Idr[45];
	RHS9 += Idr[46];
	RHS9 += Idr[47];
	RHS9 += Idr[48];
	RHS9 += Idr[49];
	RHS9 -= go[47] * *cnV[47];
	RHS9 -= go[48] * *cnV[48];
	RHS9 -= go[49] * *cnV[49];
	m_A31 += gt[50];
	m_A31 += gt[51];
	m_A31 += gt[52];
	m_A31 += gt[53];
	m_A31 += gt[54];
	m_A29 += go[50];
	m_A29 += go[51];
	m_A28 += go[52];
	double RHS10 = Idr[50];
	RHS10 += Idr[51];
	RHS10 += Idr[52];
	RHS10 += Idr[53];
	RHS10 += Idr[54];
	RHS10 -= go[53] * *cnV[53];
	RHS10 -= go[54] * *cnV[54];
	m_A35 += gt[55];
	m_A35 += gt[56];
	m_A35 += gt[57];
	m_A35 += gt[58];
	m_A35 += gt[59];
	m_A35 += gt[60];
	m_A34 += go[55];
	m_A34 += go[56];
	m_A33 += go[57];
	double RHS11 = Idr[55];
	RHS11 += Idr[56];
	RHS11 += Idr[57];
	RHS11 += Idr[58];
	RHS11 += Idr[59];
	RHS11 += Idr[60];
	RHS11 -= go[58] * *cnV[58];
	RHS11 -= go[59] * *cnV[59];
	RHS11 -= go[60] * *cnV[60];
	m_A40 += gt[61];
	m_A40 += gt[62];
	m_A40 += gt[63];
	m_A40 += gt[64];
	m_A40 += gt[65];
	m_A38 += go[61];
	m_A38 += go[62];
	m_A37 += go[63];
	double RHS12 = Idr[61];
	RHS12 += Idr[62];
	RHS12 += Idr[63];
	RHS12 += Idr[64];
	RHS12 += Idr[65];
	RHS12 -= go[64] * *cnV[64];
	RHS12 -= go[65] * *cnV[65];
	m_A44 += gt[66];
	m_A44 += gt[67];
	m_A44 += gt[68];
	m_A44 += gt[69];
	m_A44 += gt[70];
	m_A44 += gt[71];
	m_A43 += go[66];
	m_A43 += go[67];
	m_A42 += go[68];
	double RHS13 = Idr[66];
	RHS13 += Idr[67];
	RHS13 += Idr[68];
	RHS13 += Idr[69];
	RHS13 += Idr[70];
	RHS13 += Idr[71];
	RHS13 -= go[69] * *cnV[69];
	RHS13 -= go[70] * *cnV[70];
	RHS13 -= go[71] * *cnV[71];
	m_A51 += gt[72];
	m_A51 += gt[73];
	m_A51 += gt[74];
	m_A51 += gt[75];
	m_A51 += gt[76];
	m_A51 += gt[77];
	m_A48 += go[72];
	m_A47 += go[73];
	m_A46 += go[74];
	double RHS14 = Idr[72];
	RHS14 += Idr[73];
	RHS14 += Idr[74];
	RHS14 += Idr[75];
	RHS14 += Idr[76];
	RHS14 += Idr[77];
	RHS14 -= go[75] * *cnV[75];
	RHS14 -= go[76] * *cnV[76];
	RHS14 -= go[77] * *cnV[77];
	m_A57 += gt[78];
	m_A57 += gt[79];
	m_A57 += gt[80];
	m_A57 += gt[81];
	m_A57 += gt[82];
	m_A54 += go[78];
	m_A54 += go[79];
	m_A53 += go[80];
	double RHS15 = Idr[78];
	RHS15 += Idr[79];
	RHS15 += Idr[80];
	RHS15 += Idr[81];
	RHS15 += Idr[82];
	RHS15 -= go[81] * *cnV[81];
	RHS15 -= go[82] * *cnV[82];
	const double f0 = 1.0 / m_A0;
	const double f0_9 = -f0 * m_A24;
	m_A26 += m_A1 * f0_9;
	RHS9 += f0_9 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_9 = -f1 * m_A25;
	m_A26 += m_A3 * f1_9;
	m_A27 += m_A4 * f1_9;
	RHS9 += f1_9 * RHS1;
	const double f1_10 = -f1 * m_A28;
	m_A30 += m_A3 * f1_10;
	m_A31 += m_A4 * f1_10;
	RHS10 += f1_10 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_10 = -f2 * m_A29;
	m_A31 += m_A6 * f2_10;
	m_A32 += m_A7 * f2_10;
	RHS10 += f2_10 * RHS2;
	const double f2_14 = -f2 * m_A46;
	m_A49 += m_A6 * f2_14;
	m_A51 += m_A7 * f2_14;
	RHS14 += f2_14 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_11 = -f3 * m_A33;
	m_A35 += m_A9 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_11 = -f4 * m_A34;
	m_A35 += m_A11 * f4_11;
	m_A36 += m_A12 * f4_11;
	RHS11 += f4_11 * RHS4;
	const double f4_12 = -f4 * m_A37;
	m_A39 += m_A11 * f4_12;
	m_A40 += m_A12 * f4_12;
	RHS12 += f4_12 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_12 = -f5 * m_A38;
	m_A40 += m_A14 * f5_12;
	m_A41 += m_A15 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f5_14 = -f5 * m_A47;
	m_A50 += m_A14 * f5_14;
	m_A51 += m_A15 * f5_14;
	RHS14 += f5_14 * RHS5;
	const double f6 = 1.0 / m_A16;
	const double f6_13 = -f6 * m_A42;
	m_A44 += m_A17 * f6_13;
	RHS13 += f6_13 * RHS6;
	const double f7 = 1.0 / m_A18;
	const double f7_13 = -f7 * m_A43;
	m_A44 += m_A19 * f7_13;
	m_A45 += m_A20 * f7_13;
	RHS13 += f7_13 * RHS7;
	const double f7_15 = -f7 * m_A53;
	m_A55 += m_A19 * f7_15;
	m_A57 += m_A20 * f7_15;
	RHS15 += f7_15 * RHS7;
	const double f8 = 1.0 / m_A21;
	const double f8_14 = -f8 * m_A48;
	m_A51 += m_A22 * f8_14;
	m_A52 += m_A23 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f8_15 = -f8 * m_A54;
	m_A56 += m_A22 * f8_15;
	m_A57 += m_A23 * f8_15;
	RHS15 += f8_15 * RHS8;
	const double f9 = 1.0 / m_A26;
	const double f9_10 = -f9 * m_A30;
	m_A31 += m_A27 * f9_10;
	RHS10 += f9_10 * RHS9;
	const double f10 = 1.0 / m_A31;
	const double f10_14 = -f10 * m_A49;
	m_A51 += m_A32 * f10_14;
	RHS14 += f10_14 * RHS10;
	const double f11 = 1.0 / m_A35;
	const double f11_12 = -f11 * m_A39;
	m_A40 += m_A36 * f11_12;
	RHS12 += f11_12 * RHS11;
	const double f12 = 1.0 / m_A40;
	const double f12_14 = -f12 * m_A50;
	m_A51 += m_A41 * f12_14;
	RHS14 += f12_14 * RHS12;
	const double f13 = 1.0 / m_A44;
	const double f13_15 = -f13 * m_A55;
	m_A57 += m_A45 * f13_15;
	RHS15 += f13_15 * RHS13;
	const double f14 = 1.0 / m_A51;
	const double f14_15 = -f14 * m_A56;
	m_A57 += m_A52 * f14_15;
	RHS15 += f14_15 * RHS14;
	V[15] = RHS15 / m_A57;
	double tmp14 = 0.0;
	tmp14 += m_A52 * V[15];
	V[14] = (RHS14 - tmp14) / m_A51;
	double tmp13 = 0.0;
	tmp13 += m_A45 * V[15];
	V[13] = (RHS13 - tmp13) / m_A44;
	double tmp12 = 0.0;
	tmp12 += m_A41 * V[14];
	V[12] = (RHS12 - tmp12) / m_A40;
	double tmp11 = 0.0;
	tmp11 += m_A36 * V[12];
	V[11] = (RHS11 - tmp11) / m_A35;
	double tmp10 = 0.0;
	tmp10 += m_A32 * V[14];
	V[10] = (RHS10 - tmp10) / m_A31;
	double tmp9 = 0.0;
	tmp9 += m_A27 * V[10];
	V[9] = (RHS9 - tmp9) / m_A26;
	double tmp8 = 0.0;
	tmp8 += m_A22 * V[14];
	tmp8 += m_A23 * V[15];
	V[8] = (RHS8 - tmp8) / m_A21;
	double tmp7 = 0.0;
	tmp7 += m_A19 * V[13];
	tmp7 += m_A20 * V[15];
	V[7] = (RHS7 - tmp7) / m_A18;
	double tmp6 = 0.0;
	tmp6 += m_A17 * V[13];
	V[6] = (RHS6 - tmp6) / m_A16;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[12];
	tmp5 += m_A15 * V[14];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[11];
	tmp4 += m_A12 * V[12];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[11];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[10];
	tmp2 += m_A7 * V[14];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[9];
	tmp1 += m_A4 * V[10];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[9];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// solarq
static void nl_gcr_66496d6073aca98e_20_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A4 += go[4];
	m_A3 += go[5];
	m_A3 += go[6];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A5 += gt[13];
	m_A7 += go[10];
	m_A6 += go[11];
	m_A6 += go[12];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[13] * *cnV[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A9 += go[14];
	m_A9 += go[15];
	m_A8 += go[16];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A15 += gt[22];
	m_A15 += gt[23];
	m_A15 += gt[24];
	m_A13 += go[20];
	m_A13 += go[21];
	m_A12 += go[22];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 -= go[23] * *cnV[23];
	RHS4 -= go[24] * *cnV[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A19 += gt[27];
	m_A19 += gt[28];
	m_A19 += gt[29];
	m_A17 += go[25];
	double RHS5 = Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 -= go[26] * *cnV[26];
	RHS5 -= go[27] * *cnV[27];
	RHS5 -= go[28] * *cnV[28];
	RHS5 -= go[29] * *cnV[29];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_4 = -f1 * m_A12;
	m_A14 += m_A3 * f1_4;
	m_A15 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A13;
	m_A15 += m_A6 * f2_4;
	m_A16 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A17;
	m_A18 += m_A6 * f2_5;
	m_A19 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_4 = -f3 * m_A14;
	m_A15 += m_A11 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f4 = 1.0 / m_A15;
	const double f4_5 = -f4 * m_A18;
	m_A19 += m_A16 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A19;
	double tmp4 = 0.0;
	tmp4 += m_A16 * V[5];
	V[4] = (RHS4 - tmp4) / m_A15;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[4];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	tmp1 += m_A4 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starhawk
static void nl_gcr_67838e11f714c455_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A4 += go[2];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A7 += go[6];
	m_A7 += go[7];
	m_A5 += go[8];
	m_A5 += go[9];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[10] * *cnV[10];
	m_A11 += gt[11];
	m_A11 += gt[12];
	m_A11 += gt[13];
	m_A11 += gt[14];
	m_A11 += gt[15];
	m_A11 += gt[16];
	m_A10 += go[11];
	m_A10 += go[12];
	m_A9 += go[13];
	m_A8 += go[14];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A11 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	m_A7 += m_A4 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_698d5dd47fb16d5_16_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A7 += gt[6];
	m_A7 += gt[7];
	m_A6 += go[6];
	m_A8 += go[7];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	m_A10 += gt[8];
	m_A10 += gt[9];
	m_A9 += go[8];
	m_A11 += go[9];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	m_A15 += gt[10];
	m_A15 += gt[11];
	m_A15 += gt[12];
	m_A15 += gt[13];
	m_A14 += go[10];
	m_A13 += go[11];
	m_A12 += go[12];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 += Idr[12];
	RHS5 += Idr[13];
	RHS5 -= go[13] * *cnV[13];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A12;
	m_A15 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A6;
	m_A7 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A9;
	m_A10 += m_A5 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_5 = -f3 * m_A13;
	m_A15 += m_A8 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_5 = -f4 * m_A14;
	m_A15 += m_A11 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A15;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[5];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[5];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// barrier
static void nl_gcr_6ef39a62161d596c_47_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A5 += go[9];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[10] * *cnV[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A7 += go[11];
	m_A7 += go[12];
	m_A7 += go[13];
	m_A9 += go[14];
	m_A8 += go[15];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[16] * *cnV[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A11 += go[17];
	m_A12 += go[18];
	double RHS4 = Idr[17];
	RHS4 += Idr[18];
	m_A13 += gt[19];
	m_A13 += gt[20];
	m_A13 += gt[21];
	m_A13 += gt[22];
	m_A13 += gt[23];
	m_A13 += gt[24];
	m_A13 += gt[25];
	m_A14 += go[19];
	double RHS5 = Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	RHS5 -= go[23] * *cnV[23];
	RHS5 -= go[24] * *cnV[24];
	RHS5 -= go[25] * *cnV[25];
	m_A16 += gt[26];
	m_A16 += gt[27];
	m_A16 += gt[28];
	m_A16 += gt[29];
	m_A16 += gt[30];
	m_A15 += go[26];
	m_A15 += go[27];
	m_A15 += go[28];
	double RHS6 = Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 -= go[29] * *cnV[29];
	RHS6 -= go[30] * *cnV[30];
	m_A20 += gt[31];
	m_A20 += gt[32];
	m_A20 += gt[33];
	m_A20 += gt[34];
	m_A19 += go[31];
	m_A21 += go[32];
	m_A21 += go[33];
	double RHS7 = Idr[31];
	RHS7 += Idr[32];
	RHS7 += Idr[33];
	RHS7 += Idr[34];
	RHS7 -= go[34] * *cnV[34];
	m_A23 += gt[35];
	m_A23 += gt[36];
	m_A22 += go[35];
	m_A24 += go[36];
	double RHS8 = Idr[35];
	RHS8 += Idr[36];
	m_A26 += gt[37];
	m_A26 += gt[38];
	m_A26 += gt[39];
	m_A28 += go[37];
	m_A25 += go[38];
	double RHS9 = Idr[37];
	RHS9 += Idr[38];
	RHS9 += Idr[39];
	RHS9 -= go[39] * *cnV[39];
	m_A33 += gt[40];
	m_A33 += gt[41];
	m_A33 += gt[42];
	m_A33 += gt[43];
	m_A33 += gt[44];
	m_A33 += gt[45];
	m_A33 += gt[46];
	m_A29 += go[40];
	m_A30 += go[41];
	m_A32 += go[42];
	m_A32 += go[43];
	double RHS10 = Idr[40];
	RHS10 += Idr[41];
	RHS10 += Idr[42];
	RHS10 += Idr[43];
	RHS10 += Idr[44];
	RHS10 += Idr[45];
	RHS10 += Idr[46];
	RHS10 -= go[44] * *cnV[44];
	RHS10 -= go[45] * *cnV[45];
	RHS10 -= go[46] * *cnV[46];
	m_A41 += gt[47];
	m_A41 += gt[48];
	m_A41 += gt[49];
	m_A41 += gt[50];
	m_A41 += gt[51];
	m_A41 += gt[52];
	m_A36 += go[47];
	m_A35 += go[48];
	m_A38 += go[49];
	double RHS11 = Idr[47];
	RHS11 += Idr[48];
	RHS11 += Idr[49];
	RHS11 += Idr[50];
	RHS11 += Idr[51];
	RHS11 += Idr[52];
	RHS11 -= go[50] * *cnV[50];
	RHS11 -= go[51] * *cnV[51];
	RHS11 -= go[52] * *cnV[52];
	m_A46 += gt[53];
	m_A46 += gt[54];
	m_A46 += gt[55];
	m_A46 += gt[56];
	m_A46 += gt[57];
	m_A43 += go[53];
	m_A44 += go[54];
	double RHS12 = Idr[53];
	RHS12 += Idr[54];
	RHS12 += Idr[55];
	RHS12 += Idr[56];
	RHS12 += Idr[57];
	RHS12 -= go[55] * *cnV[55];
	RHS12 -= go[56] * *cnV[56];
	RHS12 -= go[57] * *cnV[57];
	const double f0 = 1.0 / m_A0;
	const double f0_7 = -f0 * m_A19;
	m_A20 += m_A1 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_10 = -f1 * m_A29;
	m_A32 += m_A3 * f1_10;
	RHS10 += f1_10 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_8 = -f2 * m_A22;
	m_A23 += m_A5 * f2_8;
	RHS8 += f2_8 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_6 = -f3 * m_A15;
	m_A16 += m_A7 * f3_6;
	m_A17 += m_A8 * f3_6;
	m_A18 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f3_10 = -f3 * m_A30;
	m_A31 += m_A7 * f3_10;
	m_A33 += m_A8 * f3_10;
	m_A34 += m_A9 * f3_10;
	RHS10 += f3_10 * RHS3;
	const double f3_11 = -f3 * m_A35;
	m_A37 += m_A7 * f3_11;
	m_A40 += m_A8 * f3_11;
	m_A41 += m_A9 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_9 = -f4 * m_A25;
	m_A26 += m_A11 * f4_9;
	m_A27 += m_A12 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f4_11 = -f4 * m_A36;
	m_A39 += m_A11 * f4_11;
	m_A41 += m_A12 * f4_11;
	RHS11 += f4_11 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_12 = -f5 * m_A43;
	m_A44 += m_A14 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f6 = 1.0 / m_A16;
	const double f6_10 = -f6 * m_A31;
	m_A33 += m_A17 * f6_10;
	m_A34 += m_A18 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f6_11 = -f6 * m_A37;
	m_A40 += m_A17 * f6_11;
	m_A41 += m_A18 * f6_11;
	RHS11 += f6_11 * RHS6;
	const double f7 = 1.0 / m_A20;
	const double f7_10 = -f7 * m_A32;
	m_A33 += m_A21 * f7_10;
	RHS10 += f7_10 * RHS7;
	const double f8 = 1.0 / m_A23;
	const double f8_11 = -f8 * m_A38;
	m_A41 += m_A24 * f8_11;
	RHS11 += f8_11 * RHS8;
	const double f9 = 1.0 / m_A26;
	const double f9_11 = -f9 * m_A39;
	m_A41 += m_A27 * f9_11;
	m_A42 += m_A28 * f9_11;
	RHS11 += f9_11 * RHS9;
	const double f9_12 = -f9 * m_A44;
	m_A45 += m_A27 * f9_12;
	m_A46 += m_A28 * f9_12;
	RHS12 += f9_12 * RHS9;
	const double f10 = 1.0 / m_A33;
	const double f10_11 = -f10 * m_A40;
	m_A41 += m_A34 * f10_11;
	RHS11 += f10_11 * RHS10;
	const double f11 = 1.0 / m_A41;
	const double f11_12 = -f11 * m_A45;
	m_A46 += m_A42 * f11_12;
	RHS12 += f11_12 * RHS11;
	V[12] = RHS12 / m_A46;
	double tmp11 = 0.0;
	tmp11 += m_A42 * V[12];
	V[11] = (RHS11 - tmp11) / m_A41;
	double tmp10 = 0.0;
	tmp10 += m_A34 * V[11];
	V[10] = (RHS10 - tmp10) / m_A33;
	double tmp9 = 0.0;
	tmp9 += m_A27 * V[11];
	tmp9 += m_A28 * V[12];
	V[9] = (RHS9 - tmp9) / m_A26;
	double tmp8 = 0.0;
	tmp8 += m_A24 * V[11];
	V[8] = (RHS8 - tmp8) / m_A23;
	double tmp7 = 0.0;
	tmp7 += m_A21 * V[10];
	V[7] = (RHS7 - tmp7) / m_A20;
	double tmp6 = 0.0;
	tmp6 += m_A17 * V[10];
	tmp6 += m_A18 * V[11];
	V[6] = (RHS6 - tmp6) / m_A16;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[9];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[9];
	tmp4 += m_A12 * V[11];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[6];
	tmp3 += m_A8 * V[10];
	tmp3 += m_A9 * V[11];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[8];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[7];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starhawk
static void nl_gcr_723fa454468a93d_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A6 += gt[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A5 += go[5];
	m_A4 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// cheekyms
static void nl_gcr_733c72a820fdbd1f_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	m_A1 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A5 += go[6];
	m_A4 += go[7];
	m_A4 += go[8];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tailg
static void nl_gcr_7388106355fb27c3_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A4 += go[2];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[7];
	m_A7 += go[8];
	m_A5 += go[9];
	m_A5 += go[10];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A11 += gt[12];
	m_A11 += gt[13];
	m_A11 += gt[14];
	m_A11 += gt[15];
	m_A10 += go[12];
	m_A10 += go[13];
	m_A9 += go[14];
	m_A8 += go[15];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A11 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	m_A7 += m_A4 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tp1985
static void nl_gcr_73f2ba8ad4a45b26_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A5 += gt[6];
	m_A5 += gt[7];
	m_A6 += go[6];
	m_A4 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A7 += go[8];
	m_A8 += go[9];
	double RHS3 = Idr[8];
	RHS3 += Idr[9];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A5 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A6 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[3];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// zac1b11142
static void nl_gcr_7425594cec8024ad_30_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A3 += go[7];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[10];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A7 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A9 += go[15];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	m_A11 += gt[18];
	m_A11 += gt[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A11 += gt[22];
	m_A11 += gt[23];
	m_A10 += go[18];
	m_A12 += go[19];
	m_A12 += go[20];
	double RHS5 = Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	RHS5 -= go[23] * *cnV[23];
	m_A16 += gt[24];
	m_A16 += gt[25];
	m_A15 += go[24];
	m_A14 += go[25];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	m_A18 += gt[26];
	m_A18 += gt[27];
	m_A19 += go[26];
	m_A17 += go[27];
	double RHS7 = Idr[26];
	RHS7 += Idr[27];
	m_A25 += gt[28];
	m_A25 += gt[29];
	m_A25 += gt[30];
	m_A25 += gt[31];
	m_A25 += gt[32];
	m_A25 += gt[33];
	m_A23 += go[28];
	m_A22 += go[29];
	m_A22 += go[30];
	m_A24 += go[31];
	m_A21 += go[32];
	m_A20 += go[33];
	double RHS8 = Idr[28];
	RHS8 += Idr[29];
	RHS8 += Idr[30];
	RHS8 += Idr[31];
	RHS8 += Idr[32];
	RHS8 += Idr[33];
	m_A29 += gt[34];
	m_A29 += gt[35];
	m_A29 += gt[36];
	m_A29 += gt[37];
	m_A28 += go[34];
	m_A27 += go[35];
	double RHS9 = Idr[34];
	RHS9 += Idr[35];
	RHS9 += Idr[36];
	RHS9 += Idr[37];
	RHS9 -= go[36] * *cnV[36];
	RHS9 -= go[37] * *cnV[37];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A10;
	m_A13 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_7 = -f1 * m_A17;
	m_A18 += m_A3 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_6 = -f2 * m_A14;
	m_A16 += m_A5 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f2_8 = -f2 * m_A20;
	m_A23 += m_A5 * f2_8;
	RHS8 += f2_8 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_6 = -f3 * m_A15;
	m_A16 += m_A7 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_8 = -f4 * m_A21;
	m_A25 += m_A9 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f4_9 = -f4 * m_A27;
	m_A28 += m_A9 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_8 = -f5 * m_A22;
	m_A25 += m_A12 * f5_8;
	m_A26 += m_A13 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A16;
	const double f6_8 = -f6 * m_A23;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A18;
	const double f7_8 = -f7 * m_A24;
	m_A25 += m_A19 * f7_8;
	RHS8 += f7_8 * RHS7;
	const double f8 = 1.0 / m_A25;
	const double f8_9 = -f8 * m_A28;
	m_A29 += m_A26 * f8_9;
	RHS9 += f8_9 * RHS8;
	V[9] = RHS9 / m_A29;
	double tmp8 = 0.0;
	tmp8 += m_A26 * V[9];
	V[8] = (RHS8 - tmp8) / m_A25;
	double tmp7 = 0.0;
	tmp7 += m_A19 * V[8];
	V[7] = (RHS7 - tmp7) / m_A18;
	double tmp6 = 0.0;
	V[6] = (RHS6 - tmp6) / m_A16;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[8];
	tmp5 += m_A13 * V[9];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[8];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[6];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[6];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[7];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[9];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tp1985
static void nl_gcr_74349e9889a2630b_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A5 += go[6];
	m_A4 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[8] * *cnV[8];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// gunfight
static void nl_gcr_743595e64cee0a5e_112_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A9 += go[8];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 -= go[9] * *cnV[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A12 += go[10];
	m_A11 += go[11];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	m_A13 += gt[12];
	m_A13 += gt[13];
	m_A15 += go[12];
	m_A14 += go[13];
	double RHS6 = Idr[12];
	RHS6 += Idr[13];
	m_A17 += gt[14];
	m_A17 += gt[15];
	m_A17 += gt[16];
	m_A16 += go[14];
	m_A18 += go[15];
	double RHS7 = Idr[14];
	RHS7 += Idr[15];
	RHS7 += Idr[16];
	RHS7 -= go[16] * *cnV[16];
	m_A21 += gt[17];
	m_A21 += gt[18];
	m_A21 += gt[19];
	m_A20 += go[17];
	m_A22 += go[18];
	double RHS8 = Idr[17];
	RHS8 += Idr[18];
	RHS8 += Idr[19];
	RHS8 -= go[19] * *cnV[19];
	m_A25 += gt[20];
	m_A25 += gt[21];
	m_A25 += gt[22];
	m_A24 += go[20];
	m_A26 += go[21];
	double RHS9 = Idr[20];
	RHS9 += Idr[21];
	RHS9 += Idr[22];
	RHS9 -= go[22] * *cnV[22];
	m_A29 += gt[23];
	m_A29 += gt[24];
	m_A29 += gt[25];
	m_A28 += go[23];
	m_A30 += go[24];
	double RHS10 = Idr[23];
	RHS10 += Idr[24];
	RHS10 += Idr[25];
	RHS10 -= go[25] * *cnV[25];
	m_A32 += gt[26];
	m_A32 += gt[27];
	m_A32 += gt[28];
	m_A34 += go[26];
	m_A33 += go[27];
	double RHS11 = Idr[26];
	RHS11 += Idr[27];
	RHS11 += Idr[28];
	RHS11 -= go[28] * *cnV[28];
	m_A35 += gt[29];
	m_A35 += gt[30];
	m_A35 += gt[31];
	m_A37 += go[29];
	m_A36 += go[30];
	double RHS12 = Idr[29];
	RHS12 += Idr[30];
	RHS12 += Idr[31];
	RHS12 -= go[31] * *cnV[31];
	m_A40 += gt[32];
	m_A40 += gt[33];
	m_A38 += go[32];
	m_A39 += go[33];
	double RHS13 = Idr[32];
	RHS13 += Idr[33];
	m_A44 += gt[34];
	m_A44 += gt[35];
	m_A42 += go[34];
	m_A43 += go[35];
	double RHS14 = Idr[34];
	RHS14 += Idr[35];
	m_A47 += gt[36];
	m_A47 += gt[37];
	m_A47 += gt[38];
	m_A46 += go[36];
	m_A48 += go[37];
	double RHS15 = Idr[36];
	RHS15 += Idr[37];
	RHS15 += Idr[38];
	RHS15 -= go[38] * *cnV[38];
	m_A50 += gt[39];
	m_A50 += gt[40];
	m_A49 += go[39];
	m_A51 += go[40];
	double RHS16 = Idr[39];
	RHS16 += Idr[40];
	m_A52 += gt[41];
	m_A52 += gt[42];
	m_A52 += gt[43];
	m_A52 += gt[44];
	m_A52 += gt[45];
	m_A53 += go[41];
	m_A54 += go[42];
	m_A54 += go[43];
	double RHS17 = Idr[41];
	RHS17 += Idr[42];
	RHS17 += Idr[43];
	RHS17 += Idr[44];
	RHS17 += Idr[45];
	RHS17 -= go[44] * *cnV[44];
	RHS17 -= go[45] * *cnV[45];
	m_A56 += gt[46];
	m_A56 += gt[47];
	m_A56 += gt[48];
	m_A56 += gt[49];
	m_A57 += go[46];
	m_A58 += go[47];
	m_A55 += go[48];
	double RHS18 = Idr[46];
	RHS18 += Idr[47];
	RHS18 += Idr[48];
	RHS18 += Idr[49];
	RHS18 -= go[49] * *cnV[49];
	m_A60 += gt[50];
	m_A60 += gt[51];
	m_A60 += gt[52];
	m_A60 += gt[53];
	m_A61 += go[50];
	m_A62 += go[51];
	m_A59 += go[52];
	double RHS19 = Idr[50];
	RHS19 += Idr[51];
	RHS19 += Idr[52];
	RHS19 += Idr[53];
	RHS19 -= go[53] * *cnV[53];
	m_A63 += gt[54];
	m_A63 += gt[55];
	m_A63 += gt[56];
	m_A63 += gt[57];
	m_A63 += gt[58];
	m_A64 += go[54];
	m_A65 += go[55];
	m_A65 += go[56];
	double RHS20 = Idr[54];
	RHS20 += Idr[55];
	RHS20 += Idr[56];
	RHS20 += Idr[57];
	RHS20 += Idr[58];
	RHS20 -= go[57] * *cnV[57];
	RHS20 -= go[58] * *cnV[58];
	m_A66 += gt[59];
	m_A66 += gt[60];
	m_A66 += gt[61];
	m_A66 += gt[62];
	m_A67 += go[59];
	m_A68 += go[60];
	m_A68 += go[61];
	double RHS21 = Idr[59];
	RHS21 += Idr[60];
	RHS21 += Idr[61];
	RHS21 += Idr[62];
	RHS21 -= go[62] * *cnV[62];
	m_A71 += gt[63];
	m_A71 += gt[64];
	m_A71 += gt[65];
	m_A71 += gt[66];
	m_A71 += gt[67];
	m_A69 += go[63];
	m_A70 += go[64];
	m_A72 += go[65];
	m_A72 += go[66];
	double RHS22 = Idr[63];
	RHS22 += Idr[64];
	RHS22 += Idr[65];
	RHS22 += Idr[66];
	RHS22 += Idr[67];
	RHS22 -= go[67] * *cnV[67];
	m_A76 += gt[68];
	m_A76 += gt[69];
	m_A76 += gt[70];
	m_A76 += gt[71];
	m_A76 += gt[72];
	m_A73 += go[68];
	m_A75 += go[69];
	m_A78 += go[70];
	m_A78 += go[71];
	m_A74 += go[72];
	double RHS23 = Idr[68];
	RHS23 += Idr[69];
	RHS23 += Idr[70];
	RHS23 += Idr[71];
	RHS23 += Idr[72];
	m_A82 += gt[73];
	m_A82 += gt[74];
	m_A82 += gt[75];
	m_A82 += gt[76];
	m_A82 += gt[77];
	m_A79 += go[73];
	m_A81 += go[74];
	m_A83 += go[75];
	m_A83 += go[76];
	m_A80 += go[77];
	double RHS24 = Idr[73];
	RHS24 += Idr[74];
	RHS24 += Idr[75];
	RHS24 += Idr[76];
	RHS24 += Idr[77];
	m_A90 += gt[78];
	m_A90 += gt[79];
	m_A90 += gt[80];
	m_A90 += gt[81];
	m_A90 += gt[82];
	m_A90 += gt[83];
	m_A90 += gt[84];
	m_A90 += gt[85];
	m_A89 += go[78];
	m_A89 += go[79];
	m_A88 += go[80];
	m_A88 += go[81];
	m_A85 += go[82];
	m_A87 += go[83];
	double RHS25 = Idr[78];
	RHS25 += Idr[79];
	RHS25 += Idr[80];
	RHS25 += Idr[81];
	RHS25 += Idr[82];
	RHS25 += Idr[83];
	RHS25 += Idr[84];
	RHS25 += Idr[85];
	RHS25 -= go[84] * *cnV[84];
	RHS25 -= go[85] * *cnV[85];
	m_A103 += gt[86];
	m_A103 += gt[87];
	m_A103 += gt[88];
	m_A103 += gt[89];
	m_A103 += gt[90];
	m_A103 += gt[91];
	m_A103 += gt[92];
	m_A103 += gt[93];
	m_A99 += go[86];
	m_A99 += go[87];
	m_A98 += go[88];
	m_A98 += go[89];
	m_A92 += go[90];
	m_A93 += go[91];
	double RHS26 = Idr[86];
	RHS26 += Idr[87];
	RHS26 += Idr[88];
	RHS26 += Idr[89];
	RHS26 += Idr[90];
	RHS26 += Idr[91];
	RHS26 += Idr[92];
	RHS26 += Idr[93];
	RHS26 -= go[92] * *cnV[92];
	RHS26 -= go[93] * *cnV[93];
	m_A111 += gt[94];
	m_A111 += gt[95];
	m_A111 += gt[96];
	m_A111 += gt[97];
	m_A111 += gt[98];
	m_A111 += gt[99];
	m_A111 += gt[100];
	m_A111 += gt[101];
	m_A109 += go[94];
	m_A109 += go[95];
	m_A108 += go[96];
	m_A108 += go[97];
	m_A105 += go[98];
	m_A107 += go[99];
	double RHS27 = Idr[94];
	RHS27 += Idr[95];
	RHS27 += Idr[96];
	RHS27 += Idr[97];
	RHS27 += Idr[98];
	RHS27 += Idr[99];
	RHS27 += Idr[100];
	RHS27 += Idr[101];
	RHS27 -= go[100] * *cnV[100];
	RHS27 -= go[101] * *cnV[101];
	const double f0 = 1.0 / m_A0;
	const double f0_15 = -f0 * m_A46;
	m_A47 += m_A1 * f0_15;
	RHS15 += f0_15 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_13 = -f1 * m_A38;
	m_A40 += m_A3 * f1_13;
	RHS13 += f1_13 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_14 = -f2 * m_A42;
	m_A44 += m_A5 * f2_14;
	RHS14 += f2_14 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_18 = -f3 * m_A55;
	m_A56 += m_A7 * f3_18;
	RHS18 += f3_18 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_19 = -f4 * m_A59;
	m_A60 += m_A9 * f4_19;
	RHS19 += f4_19 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_7 = -f5 * m_A16;
	m_A17 += m_A11 * f5_7;
	m_A19 += m_A12 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_26 = -f5 * m_A92;
	m_A94 += m_A11 * f5_26;
	m_A103 += m_A12 * f5_26;
	RHS26 += f5_26 * RHS5;
	const double f6 = 1.0 / m_A13;
	const double f6_8 = -f6 * m_A20;
	m_A21 += m_A14 * f6_8;
	m_A23 += m_A15 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f6_26 = -f6 * m_A93;
	m_A95 += m_A14 * f6_26;
	m_A103 += m_A15 * f6_26;
	RHS26 += f6_26 * RHS6;
	const double f7 = 1.0 / m_A17;
	const double f7_9 = -f7 * m_A24;
	m_A25 += m_A18 * f7_9;
	m_A27 += m_A19 * f7_9;
	RHS9 += f7_9 * RHS7;
	const double f7_26 = -f7 * m_A94;
	m_A96 += m_A18 * f7_26;
	m_A103 += m_A19 * f7_26;
	RHS26 += f7_26 * RHS7;
	const double f8 = 1.0 / m_A21;
	const double f8_10 = -f8 * m_A28;
	m_A29 += m_A22 * f8_10;
	m_A31 += m_A23 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f8_26 = -f8 * m_A95;
	m_A97 += m_A22 * f8_26;
	m_A103 += m_A23 * f8_26;
	RHS26 += f8_26 * RHS8;
	const double f9 = 1.0 / m_A25;
	const double f9_23 = -f9 * m_A73;
	m_A76 += m_A26 * f9_23;
	m_A77 += m_A27 * f9_23;
	RHS23 += f9_23 * RHS9;
	const double f9_26 = -f9 * m_A96;
	m_A100 += m_A26 * f9_26;
	m_A103 += m_A27 * f9_26;
	RHS26 += f9_26 * RHS9;
	const double f10 = 1.0 / m_A29;
	const double f10_24 = -f10 * m_A79;
	m_A82 += m_A30 * f10_24;
	m_A84 += m_A31 * f10_24;
	RHS24 += f10_24 * RHS10;
	const double f10_26 = -f10 * m_A97;
	m_A101 += m_A30 * f10_26;
	m_A103 += m_A31 * f10_26;
	RHS26 += f10_26 * RHS10;
	const double f11 = 1.0 / m_A32;
	const double f11_13 = -f11 * m_A39;
	m_A40 += m_A33 * f11_13;
	m_A41 += m_A34 * f11_13;
	RHS13 += f11_13 * RHS11;
	const double f11_27 = -f11 * m_A105;
	m_A106 += m_A33 * f11_27;
	m_A111 += m_A34 * f11_27;
	RHS27 += f11_27 * RHS11;
	const double f12 = 1.0 / m_A35;
	const double f12_14 = -f12 * m_A43;
	m_A44 += m_A36 * f12_14;
	m_A45 += m_A37 * f12_14;
	RHS14 += f12_14 * RHS12;
	const double f12_25 = -f12 * m_A85;
	m_A86 += m_A36 * f12_25;
	m_A90 += m_A37 * f12_25;
	RHS25 += f12_25 * RHS12;
	const double f13 = 1.0 / m_A40;
	const double f13_27 = -f13 * m_A106;
	m_A111 += m_A41 * f13_27;
	RHS27 += f13_27 * RHS13;
	const double f14 = 1.0 / m_A44;
	const double f14_25 = -f14 * m_A86;
	m_A90 += m_A45 * f14_25;
	RHS25 += f14_25 * RHS14;
	const double f15 = 1.0 / m_A47;
	const double f15_16 = -f15 * m_A49;
	m_A50 += m_A48 * f15_16;
	RHS16 += f15_16 * RHS15;
	const double f16 = 1.0 / m_A50;
	const double f16_22 = -f16 * m_A69;
	m_A71 += m_A51 * f16_22;
	RHS22 += f16_22 * RHS16;
	const double f17 = 1.0 / m_A52;
	const double f17_22 = -f17 * m_A70;
	m_A71 += m_A53 * f17_22;
	m_A72 += m_A54 * f17_22;
	RHS22 += f17_22 * RHS17;
	const double f17_26 = -f17 * m_A98;
	m_A99 += m_A53 * f17_26;
	m_A103 += m_A54 * f17_26;
	RHS26 += f17_26 * RHS17;
	const double f18 = 1.0 / m_A56;
	const double f18_23 = -f18 * m_A74;
	m_A76 += m_A57 * f18_23;
	m_A78 += m_A58 * f18_23;
	RHS23 += f18_23 * RHS18;
	const double f18_27 = -f18 * m_A107;
	m_A109 += m_A57 * f18_27;
	m_A111 += m_A58 * f18_27;
	RHS27 += f18_27 * RHS18;
	const double f19 = 1.0 / m_A60;
	const double f19_24 = -f19 * m_A80;
	m_A82 += m_A61 * f19_24;
	m_A83 += m_A62 * f19_24;
	RHS24 += f19_24 * RHS19;
	const double f19_25 = -f19 * m_A87;
	m_A89 += m_A61 * f19_25;
	m_A90 += m_A62 * f19_25;
	RHS25 += f19_25 * RHS19;
	const double f20 = 1.0 / m_A63;
	const double f20_23 = -f20 * m_A75;
	m_A76 += m_A64 * f20_23;
	m_A78 += m_A65 * f20_23;
	RHS23 += f20_23 * RHS20;
	const double f20_27 = -f20 * m_A108;
	m_A109 += m_A64 * f20_27;
	m_A111 += m_A65 * f20_27;
	RHS27 += f20_27 * RHS20;
	const double f21 = 1.0 / m_A66;
	const double f21_24 = -f21 * m_A81;
	m_A82 += m_A67 * f21_24;
	m_A83 += m_A68 * f21_24;
	RHS24 += f21_24 * RHS21;
	const double f21_25 = -f21 * m_A88;
	m_A89 += m_A67 * f21_25;
	m_A90 += m_A68 * f21_25;
	RHS25 += f21_25 * RHS21;
	const double f22 = 1.0 / m_A71;
	const double f22_26 = -f22 * m_A99;
	m_A103 += m_A72 * f22_26;
	RHS26 += f22_26 * RHS22;
	const double f23 = 1.0 / m_A76;
	const double f23_26 = -f23 * m_A100;
	m_A103 += m_A77 * f23_26;
	m_A104 += m_A78 * f23_26;
	RHS26 += f23_26 * RHS23;
	const double f23_27 = -f23 * m_A109;
	m_A110 += m_A77 * f23_27;
	m_A111 += m_A78 * f23_27;
	RHS27 += f23_27 * RHS23;
	const double f24 = 1.0 / m_A82;
	const double f24_25 = -f24 * m_A89;
	m_A90 += m_A83 * f24_25;
	m_A91 += m_A84 * f24_25;
	RHS25 += f24_25 * RHS24;
	const double f24_26 = -f24 * m_A101;
	m_A102 += m_A83 * f24_26;
	m_A103 += m_A84 * f24_26;
	RHS26 += f24_26 * RHS24;
	const double f25 = 1.0 / m_A90;
	const double f25_26 = -f25 * m_A102;
	m_A103 += m_A91 * f25_26;
	RHS26 += f25_26 * RHS25;
	const double f26 = 1.0 / m_A103;
	const double f26_27 = -f26 * m_A110;
	m_A111 += m_A104 * f26_27;
	RHS27 += f26_27 * RHS26;
	V[27] = RHS27 / m_A111;
	double tmp26 = 0.0;
	tmp26 += m_A104 * V[27];
	V[26] = (RHS26 - tmp26) / m_A103;
	double tmp25 = 0.0;
	tmp25 += m_A91 * V[26];
	V[25] = (RHS25 - tmp25) / m_A90;
	double tmp24 = 0.0;
	tmp24 += m_A83 * V[25];
	tmp24 += m_A84 * V[26];
	V[24] = (RHS24 - tmp24) / m_A82;
	double tmp23 = 0.0;
	tmp23 += m_A77 * V[26];
	tmp23 += m_A78 * V[27];
	V[23] = (RHS23 - tmp23) / m_A76;
	double tmp22 = 0.0;
	tmp22 += m_A72 * V[26];
	V[22] = (RHS22 - tmp22) / m_A71;
	double tmp21 = 0.0;
	tmp21 += m_A67 * V[24];
	tmp21 += m_A68 * V[25];
	V[21] = (RHS21 - tmp21) / m_A66;
	double tmp20 = 0.0;
	tmp20 += m_A64 * V[23];
	tmp20 += m_A65 * V[27];
	V[20] = (RHS20 - tmp20) / m_A63;
	double tmp19 = 0.0;
	tmp19 += m_A61 * V[24];
	tmp19 += m_A62 * V[25];
	V[19] = (RHS19 - tmp19) / m_A60;
	double tmp18 = 0.0;
	tmp18 += m_A57 * V[23];
	tmp18 += m_A58 * V[27];
	V[18] = (RHS18 - tmp18) / m_A56;
	double tmp17 = 0.0;
	tmp17 += m_A53 * V[22];
	tmp17 += m_A54 * V[26];
	V[17] = (RHS17 - tmp17) / m_A52;
	double tmp16 = 0.0;
	tmp16 += m_A51 * V[22];
	V[16] = (RHS16 - tmp16) / m_A50;
	double tmp15 = 0.0;
	tmp15 += m_A48 * V[16];
	V[15] = (RHS15 - tmp15) / m_A47;
	double tmp14 = 0.0;
	tmp14 += m_A45 * V[25];
	V[14] = (RHS14 - tmp14) / m_A44;
	double tmp13 = 0.0;
	tmp13 += m_A41 * V[27];
	V[13] = (RHS13 - tmp13) / m_A40;
	double tmp12 = 0.0;
	tmp12 += m_A36 * V[14];
	tmp12 += m_A37 * V[25];
	V[12] = (RHS12 - tmp12) / m_A35;
	double tmp11 = 0.0;
	tmp11 += m_A33 * V[13];
	tmp11 += m_A34 * V[27];
	V[11] = (RHS11 - tmp11) / m_A32;
	double tmp10 = 0.0;
	tmp10 += m_A30 * V[24];
	tmp10 += m_A31 * V[26];
	V[10] = (RHS10 - tmp10) / m_A29;
	double tmp9 = 0.0;
	tmp9 += m_A26 * V[23];
	tmp9 += m_A27 * V[26];
	V[9] = (RHS9 - tmp9) / m_A25;
	double tmp8 = 0.0;
	tmp8 += m_A22 * V[10];
	tmp8 += m_A23 * V[26];
	V[8] = (RHS8 - tmp8) / m_A21;
	double tmp7 = 0.0;
	tmp7 += m_A18 * V[9];
	tmp7 += m_A19 * V[26];
	V[7] = (RHS7 - tmp7) / m_A17;
	double tmp6 = 0.0;
	tmp6 += m_A14 * V[8];
	tmp6 += m_A15 * V[26];
	V[6] = (RHS6 - tmp6) / m_A13;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[7];
	tmp5 += m_A12 * V[26];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[19];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[18];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[14];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[13];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[15];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_76c9e236353caed1_35_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A3 += go[0];
	m_A2 += go[1];
	m_A1 += go[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[5];
	double RHS1 = Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A10 += go[12];
	m_A9 += go[13];
	m_A8 += go[14];
	m_A7 += go[15];
	double RHS2 = Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 += Idr[15];
	RHS2 += Idr[16];
	RHS2 -= go[16] * *cnV[16];
	m_A13 += gt[17];
	m_A13 += gt[18];
	m_A13 += gt[19];
	m_A13 += gt[20];
	m_A12 += go[17];
	m_A11 += go[18];
	double RHS3 = Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 += Idr[20];
	RHS3 -= go[19] * *cnV[19];
	RHS3 -= go[20] * *cnV[20];
	m_A20 += gt[21];
	m_A20 += gt[22];
	m_A20 += gt[23];
	m_A20 += gt[24];
	m_A18 += go[21];
	m_A17 += go[22];
	double RHS4 = Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 -= go[23] * *cnV[23];
	RHS4 -= go[24] * *cnV[24];
	m_A27 += gt[25];
	m_A27 += gt[26];
	m_A27 += gt[27];
	m_A27 += gt[28];
	m_A24 += go[25];
	m_A23 += go[26];
	double RHS5 = Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 -= go[27] * *cnV[27];
	RHS5 -= go[28] * *cnV[28];
	m_A34 += gt[29];
	m_A34 += gt[30];
	m_A34 += gt[31];
	m_A34 += gt[32];
	m_A34 += gt[33];
	m_A34 += gt[34];
	m_A29 += go[29];
	m_A30 += go[30];
	double RHS6 = Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 += Idr[33];
	RHS6 += Idr[34];
	RHS6 -= go[31] * *cnV[31];
	RHS6 -= go[32] * *cnV[32];
	RHS6 -= go[33] * *cnV[33];
	RHS6 -= go[34] * *cnV[34];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A11;
	m_A13 += m_A1 * f0_3;
	m_A14 += m_A2 * f0_3;
	m_A15 += m_A3 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f0_4 = -f0 * m_A17;
	m_A19 += m_A1 * f0_4;
	m_A20 += m_A2 * f0_4;
	m_A21 += m_A3 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f0_5 = -f0 * m_A23;
	m_A25 += m_A1 * f0_5;
	m_A26 += m_A2 * f0_5;
	m_A27 += m_A3 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A4;
	const double f1_6 = -f1 * m_A29;
	m_A30 += m_A5 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A12;
	m_A13 += m_A7 * f2_3;
	m_A14 += m_A8 * f2_3;
	m_A15 += m_A9 * f2_3;
	m_A16 += m_A10 * f2_3;
	RHS3 += f2_3 * RHS2;
	const double f2_4 = -f2 * m_A18;
	m_A19 += m_A7 * f2_4;
	m_A20 += m_A8 * f2_4;
	m_A21 += m_A9 * f2_4;
	m_A22 += m_A10 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A24;
	m_A25 += m_A7 * f2_5;
	m_A26 += m_A8 * f2_5;
	m_A27 += m_A9 * f2_5;
	m_A28 += m_A10 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f2_6 = -f2 * m_A30;
	m_A31 += m_A7 * f2_6;
	m_A32 += m_A8 * f2_6;
	m_A33 += m_A9 * f2_6;
	m_A34 += m_A10 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A13;
	const double f3_4 = -f3 * m_A19;
	m_A20 += m_A14 * f3_4;
	m_A21 += m_A15 * f3_4;
	m_A22 += m_A16 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A25;
	m_A26 += m_A14 * f3_5;
	m_A27 += m_A15 * f3_5;
	m_A28 += m_A16 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f3_6 = -f3 * m_A31;
	m_A32 += m_A14 * f3_6;
	m_A33 += m_A15 * f3_6;
	m_A34 += m_A16 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A20;
	const double f4_5 = -f4 * m_A26;
	m_A27 += m_A21 * f4_5;
	m_A28 += m_A22 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f4_6 = -f4 * m_A32;
	m_A33 += m_A21 * f4_6;
	m_A34 += m_A22 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A27;
	const double f5_6 = -f5 * m_A33;
	m_A34 += m_A28 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A34;
	double tmp5 = 0.0;
	tmp5 += m_A28 * V[6];
	V[5] = (RHS5 - tmp5) / m_A27;
	double tmp4 = 0.0;
	tmp4 += m_A21 * V[5];
	tmp4 += m_A22 * V[6];
	V[4] = (RHS4 - tmp4) / m_A20;
	double tmp3 = 0.0;
	tmp3 += m_A14 * V[4];
	tmp3 += m_A15 * V[5];
	tmp3 += m_A16 * V[6];
	V[3] = (RHS3 - tmp3) / m_A13;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	tmp2 += m_A8 * V[4];
	tmp2 += m_A9 * V[5];
	tmp2 += m_A10 * V[6];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A5 * V[2];
	V[1] = (RHS1 - tmp1) / m_A4;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	tmp0 += m_A2 * V[4];
	tmp0 += m_A3 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// gamemachine
static void nl_gcr_782d79b5cbe953b1_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	m_A1 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A5 += go[7];
	m_A5 += go[8];
	m_A4 += go[9];
	m_A4 += go[10];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// barrier
static void nl_gcr_79e756c5892cf87d_31_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[5] * *cnV[5];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A8 += go[11];
	m_A9 += go[12];
	m_A7 += go[13];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A11 += go[16];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 -= go[17] * *cnV[17];
	RHS4 -= go[18] * *cnV[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A12 += go[19];
	m_A13 += go[20];
	double RHS5 = Idr[19];
	RHS5 += Idr[20];
	m_A18 += gt[21];
	m_A18 += gt[22];
	m_A18 += gt[23];
	m_A17 += go[21];
	m_A19 += go[22];
	double RHS6 = Idr[21];
	RHS6 += Idr[22];
	RHS6 += Idr[23];
	RHS6 -= go[23] * *cnV[23];
	m_A23 += gt[24];
	m_A23 += gt[25];
	m_A21 += go[24];
	m_A20 += go[25];
	double RHS7 = Idr[24];
	RHS7 += Idr[25];
	m_A30 += gt[26];
	m_A30 += gt[27];
	m_A30 += gt[28];
	m_A30 += gt[29];
	m_A30 += gt[30];
	m_A25 += go[26];
	m_A26 += go[27];
	m_A28 += go[28];
	double RHS8 = Idr[26];
	RHS8 += Idr[27];
	RHS8 += Idr[28];
	RHS8 += Idr[29];
	RHS8 += Idr[30];
	RHS8 -= go[29] * *cnV[29];
	RHS8 -= go[30] * *cnV[30];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A12;
	m_A14 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_6 = -f1 * m_A17;
	m_A18 += m_A3 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_8 = -f2 * m_A25;
	m_A28 += m_A5 * f2_8;
	RHS8 += f2_8 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_5 = -f3 * m_A13;
	m_A14 += m_A7 * f3_5;
	m_A15 += m_A8 * f3_5;
	m_A16 += m_A9 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f3_7 = -f3 * m_A20;
	m_A22 += m_A7 * f3_7;
	m_A23 += m_A8 * f3_7;
	m_A24 += m_A9 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f3_8 = -f3 * m_A26;
	m_A27 += m_A7 * f3_8;
	m_A29 += m_A8 * f3_8;
	m_A30 += m_A9 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_7 = -f4 * m_A21;
	m_A23 += m_A11 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f5 = 1.0 / m_A14;
	const double f5_7 = -f5 * m_A22;
	m_A23 += m_A15 * f5_7;
	m_A24 += m_A16 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_8 = -f5 * m_A27;
	m_A29 += m_A15 * f5_8;
	m_A30 += m_A16 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A18;
	const double f6_8 = -f6 * m_A28;
	m_A30 += m_A19 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A23;
	const double f7_8 = -f7 * m_A29;
	m_A30 += m_A24 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A30;
	double tmp7 = 0.0;
	tmp7 += m_A24 * V[8];
	V[7] = (RHS7 - tmp7) / m_A23;
	double tmp6 = 0.0;
	tmp6 += m_A19 * V[8];
	V[6] = (RHS6 - tmp6) / m_A18;
	double tmp5 = 0.0;
	tmp5 += m_A15 * V[7];
	tmp5 += m_A16 * V[8];
	V[5] = (RHS5 - tmp5) / m_A14;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[7];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[5];
	tmp3 += m_A8 * V[7];
	tmp3 += m_A9 * V[8];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[6];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// breakout
static void nl_gcr_7a42b97d838ca073_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A5 += go[7];
	m_A4 += go[8];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[9] * *cnV[9];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// 280zzzap
static void nl_gcr_7afaac594132b463_104_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A5 += go[2];
	m_A4 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A7 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A8 += gt[9];
	m_A8 += gt[10];
	m_A9 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 -= go[10] * *cnV[10];
	m_A10 += gt[11];
	m_A10 += gt[12];
	m_A10 += gt[13];
	m_A12 += go[11];
	m_A11 += go[12];
	double RHS4 = Idr[11];
	RHS4 += Idr[12];
	RHS4 += Idr[13];
	RHS4 -= go[13] * *cnV[13];
	m_A13 += gt[14];
	m_A13 += gt[15];
	m_A14 += go[14];
	double RHS5 = Idr[14];
	RHS5 += Idr[15];
	RHS5 -= go[15] * *cnV[15];
	m_A15 += gt[16];
	m_A15 += gt[17];
	m_A15 += gt[18];
	m_A15 += gt[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A15 += gt[22];
	m_A19 += go[16];
	m_A18 += go[17];
	m_A17 += go[18];
	m_A16 += go[19];
	double RHS6 = Idr[16];
	RHS6 += Idr[17];
	RHS6 += Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 += Idr[21];
	RHS6 += Idr[22];
	RHS6 -= go[20] * *cnV[20];
	RHS6 -= go[21] * *cnV[21];
	RHS6 -= go[22] * *cnV[22];
	m_A20 += gt[23];
	m_A20 += gt[24];
	m_A20 += gt[25];
	m_A20 += gt[26];
	m_A20 += gt[27];
	m_A20 += gt[28];
	m_A20 += gt[29];
	m_A24 += go[23];
	m_A23 += go[24];
	m_A22 += go[25];
	m_A21 += go[26];
	double RHS7 = Idr[23];
	RHS7 += Idr[24];
	RHS7 += Idr[25];
	RHS7 += Idr[26];
	RHS7 += Idr[27];
	RHS7 += Idr[28];
	RHS7 += Idr[29];
	RHS7 -= go[27] * *cnV[27];
	RHS7 -= go[28] * *cnV[28];
	RHS7 -= go[29] * *cnV[29];
	m_A25 += gt[30];
	m_A25 += gt[31];
	m_A25 += gt[32];
	m_A26 += go[30];
	m_A27 += go[31];
	double RHS8 = Idr[30];
	RHS8 += Idr[31];
	RHS8 += Idr[32];
	RHS8 -= go[32] * *cnV[32];
	m_A28 += gt[33];
	m_A28 += gt[34];
	m_A29 += go[33];
	double RHS9 = Idr[33];
	RHS9 += Idr[34];
	RHS9 -= go[34] * *cnV[34];
	m_A30 += gt[35];
	m_A30 += gt[36];
	m_A30 += gt[37];
	m_A30 += gt[38];
	m_A31 += go[35];
	double RHS10 = Idr[35];
	RHS10 += Idr[36];
	RHS10 += Idr[37];
	RHS10 += Idr[38];
	RHS10 -= go[36] * *cnV[36];
	RHS10 -= go[37] * *cnV[37];
	RHS10 -= go[38] * *cnV[38];
	m_A32 += gt[39];
	m_A32 += gt[40];
	m_A33 += go[39];
	double RHS11 = Idr[39];
	RHS11 += Idr[40];
	RHS11 -= go[40] * *cnV[40];
	m_A36 += gt[41];
	m_A36 += gt[42];
	m_A36 += gt[43];
	m_A36 += gt[44];
	m_A35 += go[41];
	m_A34 += go[42];
	double RHS12 = Idr[41];
	RHS12 += Idr[42];
	RHS12 += Idr[43];
	RHS12 += Idr[44];
	RHS12 -= go[43] * *cnV[43];
	RHS12 -= go[44] * *cnV[44];
	m_A42 += gt[45];
	m_A42 += gt[46];
	m_A42 += gt[47];
	m_A42 += gt[48];
	m_A40 += go[45];
	m_A41 += go[46];
	m_A43 += go[47];
	m_A39 += go[48];
	double RHS13 = Idr[45];
	RHS13 += Idr[46];
	RHS13 += Idr[47];
	RHS13 += Idr[48];
	m_A45 += gt[49];
	m_A45 += gt[50];
	m_A45 += gt[51];
	m_A45 += gt[52];
	m_A44 += go[49];
	m_A46 += go[50];
	double RHS14 = Idr[49];
	RHS14 += Idr[50];
	RHS14 += Idr[51];
	RHS14 += Idr[52];
	RHS14 -= go[51] * *cnV[51];
	RHS14 -= go[52] * *cnV[52];
	m_A50 += gt[53];
	m_A50 += gt[54];
	m_A50 += gt[55];
	m_A50 += gt[56];
	m_A48 += go[53];
	m_A47 += go[54];
	double RHS15 = Idr[53];
	RHS15 += Idr[54];
	RHS15 += Idr[55];
	RHS15 += Idr[56];
	RHS15 -= go[55] * *cnV[55];
	RHS15 -= go[56] * *cnV[56];
	m_A57 += gt[57];
	m_A57 += gt[58];
	m_A57 += gt[59];
	m_A57 += gt[60];
	m_A56 += go[57];
	m_A55 += go[58];
	m_A58 += go[59];
	double RHS16 = Idr[57];
	RHS16 += Idr[58];
	RHS16 += Idr[59];
	RHS16 += Idr[60];
	RHS16 -= go[60] * *cnV[60];
	m_A63 += gt[61];
	m_A63 += gt[62];
	m_A63 += gt[63];
	m_A63 += gt[64];
	m_A66 += go[61];
	m_A60 += go[62];
	m_A59 += go[63];
	double RHS17 = Idr[61];
	RHS17 += Idr[62];
	RHS17 += Idr[63];
	RHS17 += Idr[64];
	RHS17 -= go[64] * *cnV[64];
	m_A74 += gt[65];
	m_A74 += gt[66];
	m_A74 += gt[67];
	m_A74 += gt[68];
	m_A74 += gt[69];
	m_A74 += gt[70];
	m_A77 += go[65];
	m_A70 += go[66];
	m_A69 += go[67];
	m_A68 += go[68];
	m_A71 += go[69];
	double RHS18 = Idr[65];
	RHS18 += Idr[66];
	RHS18 += Idr[67];
	RHS18 += Idr[68];
	RHS18 += Idr[69];
	RHS18 += Idr[70];
	RHS18 -= go[70] * *cnV[70];
	m_A85 += gt[71];
	m_A85 += gt[72];
	m_A85 += gt[73];
	m_A85 += gt[74];
	m_A85 += gt[75];
	m_A85 += gt[76];
	m_A82 += go[71];
	m_A87 += go[72];
	m_A79 += go[73];
	m_A80 += go[74];
	m_A78 += go[75];
	double RHS19 = Idr[71];
	RHS19 += Idr[72];
	RHS19 += Idr[73];
	RHS19 += Idr[74];
	RHS19 += Idr[75];
	RHS19 += Idr[76];
	RHS19 -= go[76] * *cnV[76];
	m_A93 += gt[77];
	m_A93 += gt[78];
	m_A93 += gt[79];
	m_A93 += gt[80];
	m_A93 += gt[81];
	m_A89 += go[77];
	m_A88 += go[78];
	m_A90 += go[79];
	double RHS20 = Idr[77];
	RHS20 += Idr[78];
	RHS20 += Idr[79];
	RHS20 += Idr[80];
	RHS20 += Idr[81];
	RHS20 -= go[80] * *cnV[80];
	RHS20 -= go[81] * *cnV[81];
	m_A103 += gt[82];
	m_A103 += gt[83];
	m_A103 += gt[84];
	m_A103 += gt[85];
	m_A103 += gt[86];
	m_A103 += gt[87];
	m_A103 += gt[88];
	m_A97 += go[82];
	m_A96 += go[83];
	m_A101 += go[84];
	m_A95 += go[85];
	m_A100 += go[86];
	double RHS21 = Idr[82];
	RHS21 += Idr[83];
	RHS21 += Idr[84];
	RHS21 += Idr[85];
	RHS21 += Idr[86];
	RHS21 += Idr[87];
	RHS21 += Idr[88];
	RHS21 -= go[87] * *cnV[87];
	RHS21 -= go[88] * *cnV[88];
	const double f0 = 1.0 / m_A0;
	const double f0_12 = -f0 * m_A34;
	m_A36 += m_A1 * f0_12;
	RHS12 += f0_12 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_12 = -f1 * m_A35;
	m_A36 += m_A3 * f1_12;
	m_A37 += m_A4 * f1_12;
	m_A38 += m_A5 * f1_12;
	RHS12 += f1_12 * RHS1;
	const double f1_15 = -f1 * m_A47;
	m_A49 += m_A3 * f1_15;
	m_A50 += m_A4 * f1_15;
	m_A51 += m_A5 * f1_15;
	RHS15 += f1_15 * RHS1;
	const double f1_17 = -f1 * m_A59;
	m_A61 += m_A3 * f1_17;
	m_A62 += m_A4 * f1_17;
	m_A63 += m_A5 * f1_17;
	RHS17 += f1_17 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_13 = -f2 * m_A39;
	m_A42 += m_A7 * f2_13;
	RHS13 += f2_13 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_13 = -f3 * m_A40;
	m_A42 += m_A9 * f3_13;
	RHS13 += f3_13 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_13 = -f4 * m_A41;
	m_A42 += m_A11 * f4_13;
	m_A43 += m_A12 * f4_13;
	RHS13 += f4_13 * RHS4;
	const double f4_18 = -f4 * m_A68;
	m_A71 += m_A11 * f4_18;
	m_A74 += m_A12 * f4_18;
	RHS18 += f4_18 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_14 = -f5 * m_A44;
	m_A45 += m_A14 * f5_14;
	RHS14 += f5_14 * RHS5;
	const double f6 = 1.0 / m_A15;
	const double f6_15 = -f6 * m_A48;
	m_A50 += m_A16 * f6_15;
	m_A52 += m_A17 * f6_15;
	m_A53 += m_A18 * f6_15;
	m_A54 += m_A19 * f6_15;
	RHS15 += f6_15 * RHS6;
	const double f6_18 = -f6 * m_A69;
	m_A72 += m_A16 * f6_18;
	m_A74 += m_A17 * f6_18;
	m_A75 += m_A18 * f6_18;
	m_A77 += m_A19 * f6_18;
	RHS18 += f6_18 * RHS6;
	const double f6_19 = -f6 * m_A78;
	m_A81 += m_A16 * f6_19;
	m_A84 += m_A17 * f6_19;
	m_A85 += m_A18 * f6_19;
	m_A87 += m_A19 * f6_19;
	RHS19 += f6_19 * RHS6;
	const double f6_21 = -f6 * m_A95;
	m_A98 += m_A16 * f6_21;
	m_A100 += m_A17 * f6_21;
	m_A101 += m_A18 * f6_21;
	m_A103 += m_A19 * f6_21;
	RHS21 += f6_21 * RHS6;
	const double f7 = 1.0 / m_A20;
	const double f7_17 = -f7 * m_A60;
	m_A63 += m_A21 * f7_17;
	m_A64 += m_A22 * f7_17;
	m_A65 += m_A23 * f7_17;
	m_A67 += m_A24 * f7_17;
	RHS17 += f7_17 * RHS7;
	const double f7_18 = -f7 * m_A70;
	m_A73 += m_A21 * f7_18;
	m_A74 += m_A22 * f7_18;
	m_A75 += m_A23 * f7_18;
	m_A77 += m_A24 * f7_18;
	RHS18 += f7_18 * RHS7;
	const double f7_19 = -f7 * m_A79;
	m_A83 += m_A21 * f7_19;
	m_A84 += m_A22 * f7_19;
	m_A85 += m_A23 * f7_19;
	m_A87 += m_A24 * f7_19;
	RHS19 += f7_19 * RHS7;
	const double f7_21 = -f7 * m_A96;
	m_A99 += m_A21 * f7_21;
	m_A100 += m_A22 * f7_21;
	m_A101 += m_A23 * f7_21;
	m_A103 += m_A24 * f7_21;
	RHS21 += f7_21 * RHS7;
	const double f8 = 1.0 / m_A25;
	const double f8_16 = -f8 * m_A55;
	m_A57 += m_A26 * f8_16;
	m_A58 += m_A27 * f8_16;
	RHS16 += f8_16 * RHS8;
	const double f8_19 = -f8 * m_A80;
	m_A82 += m_A26 * f8_19;
	m_A85 += m_A27 * f8_19;
	RHS19 += f8_19 * RHS8;
	const double f9 = 1.0 / m_A28;
	const double f9_16 = -f9 * m_A56;
	m_A57 += m_A29 * f9_16;
	RHS16 += f9_16 * RHS9;
	const double f10 = 1.0 / m_A30;
	const double f10_20 = -f10 * m_A88;
	m_A93 += m_A31 * f10_20;
	RHS20 += f10_20 * RHS10;
	const double f11 = 1.0 / m_A32;
	const double f11_20 = -f11 * m_A89;
	m_A93 += m_A33 * f11_20;
	RHS20 += f11_20 * RHS11;
	const double f12 = 1.0 / m_A36;
	const double f12_15 = -f12 * m_A49;
	m_A50 += m_A37 * f12_15;
	m_A51 += m_A38 * f12_15;
	RHS15 += f12_15 * RHS12;
	const double f12_17 = -f12 * m_A61;
	m_A62 += m_A37 * f12_17;
	m_A63 += m_A38 * f12_17;
	RHS17 += f12_17 * RHS12;
	const double f13 = 1.0 / m_A42;
	const double f13_18 = -f13 * m_A71;
	m_A74 += m_A43 * f13_18;
	RHS18 += f13_18 * RHS13;
	const double f14 = 1.0 / m_A45;
	const double f14_21 = -f14 * m_A97;
	m_A103 += m_A46 * f14_21;
	RHS21 += f14_21 * RHS14;
	const double f15 = 1.0 / m_A50;
	const double f15_17 = -f15 * m_A62;
	m_A63 += m_A51 * f15_17;
	m_A64 += m_A52 * f15_17;
	m_A65 += m_A53 * f15_17;
	m_A67 += m_A54 * f15_17;
	RHS17 += f15_17 * RHS15;
	const double f15_18 = -f15 * m_A72;
	m_A73 += m_A51 * f15_18;
	m_A74 += m_A52 * f15_18;
	m_A75 += m_A53 * f15_18;
	m_A77 += m_A54 * f15_18;
	RHS18 += f15_18 * RHS15;
	const double f15_19 = -f15 * m_A81;
	m_A83 += m_A51 * f15_19;
	m_A84 += m_A52 * f15_19;
	m_A85 += m_A53 * f15_19;
	m_A87 += m_A54 * f15_19;
	RHS19 += f15_19 * RHS15;
	const double f15_21 = -f15 * m_A98;
	m_A99 += m_A51 * f15_21;
	m_A100 += m_A52 * f15_21;
	m_A101 += m_A53 * f15_21;
	m_A103 += m_A54 * f15_21;
	RHS21 += f15_21 * RHS15;
	const double f16 = 1.0 / m_A57;
	const double f16_19 = -f16 * m_A82;
	m_A85 += m_A58 * f16_19;
	RHS19 += f16_19 * RHS16;
	const double f17 = 1.0 / m_A63;
	const double f17_18 = -f17 * m_A73;
	m_A74 += m_A64 * f17_18;
	m_A75 += m_A65 * f17_18;
	m_A76 += m_A66 * f17_18;
	m_A77 += m_A67 * f17_18;
	RHS18 += f17_18 * RHS17;
	const double f17_19 = -f17 * m_A83;
	m_A84 += m_A64 * f17_19;
	m_A85 += m_A65 * f17_19;
	m_A86 += m_A66 * f17_19;
	m_A87 += m_A67 * f17_19;
	RHS19 += f17_19 * RHS17;
	const double f17_20 = -f17 * m_A90;
	m_A91 += m_A64 * f17_20;
	m_A92 += m_A65 * f17_20;
	m_A93 += m_A66 * f17_20;
	m_A94 += m_A67 * f17_20;
	RHS20 += f17_20 * RHS17;
	const double f17_21 = -f17 * m_A99;
	m_A100 += m_A64 * f17_21;
	m_A101 += m_A65 * f17_21;
	m_A102 += m_A66 * f17_21;
	m_A103 += m_A67 * f17_21;
	RHS21 += f17_21 * RHS17;
	const double f18 = 1.0 / m_A74;
	const double f18_19 = -f18 * m_A84;
	m_A85 += m_A75 * f18_19;
	m_A86 += m_A76 * f18_19;
	m_A87 += m_A77 * f18_19;
	RHS19 += f18_19 * RHS18;
	const double f18_20 = -f18 * m_A91;
	m_A92 += m_A75 * f18_20;
	m_A93 += m_A76 * f18_20;
	m_A94 += m_A77 * f18_20;
	RHS20 += f18_20 * RHS18;
	const double f18_21 = -f18 * m_A100;
	m_A101 += m_A75 * f18_21;
	m_A102 += m_A76 * f18_21;
	m_A103 += m_A77 * f18_21;
	RHS21 += f18_21 * RHS18;
	const double f19 = 1.0 / m_A85;
	const double f19_20 = -f19 * m_A92;
	m_A93 += m_A86 * f19_20;
	m_A94 += m_A87 * f19_20;
	RHS20 += f19_20 * RHS19;
	const double f19_21 = -f19 * m_A101;
	m_A102 += m_A86 * f19_21;
	m_A103 += m_A87 * f19_21;
	RHS21 += f19_21 * RHS19;
	const double f20 = 1.0 / m_A93;
	const double f20_21 = -f20 * m_A102;
	m_A103 += m_A94 * f20_21;
	RHS21 += f20_21 * RHS20;
	V[21] = RHS21 / m_A103;
	double tmp20 = 0.0;
	tmp20 += m_A94 * V[21];
	V[20] = (RHS20 - tmp20) / m_A93;
	double tmp19 = 0.0;
	tmp19 += m_A86 * V[20];
	tmp19 += m_A87 * V[21];
	V[19] = (RHS19 - tmp19) / m_A85;
	double tmp18 = 0.0;
	tmp18 += m_A75 * V[19];
	tmp18 += m_A76 * V[20];
	tmp18 += m_A77 * V[21];
	V[18] = (RHS18 - tmp18) / m_A74;
	double tmp17 = 0.0;
	tmp17 += m_A64 * V[18];
	tmp17 += m_A65 * V[19];
	tmp17 += m_A66 * V[20];
	tmp17 += m_A67 * V[21];
	V[17] = (RHS17 - tmp17) / m_A63;
	double tmp16 = 0.0;
	tmp16 += m_A58 * V[19];
	V[16] = (RHS16 - tmp16) / m_A57;
	double tmp15 = 0.0;
	tmp15 += m_A51 * V[17];
	tmp15 += m_A52 * V[18];
	tmp15 += m_A53 * V[19];
	tmp15 += m_A54 * V[21];
	V[15] = (RHS15 - tmp15) / m_A50;
	double tmp14 = 0.0;
	tmp14 += m_A46 * V[21];
	V[14] = (RHS14 - tmp14) / m_A45;
	double tmp13 = 0.0;
	tmp13 += m_A43 * V[18];
	V[13] = (RHS13 - tmp13) / m_A42;
	double tmp12 = 0.0;
	tmp12 += m_A37 * V[15];
	tmp12 += m_A38 * V[17];
	V[12] = (RHS12 - tmp12) / m_A36;
	double tmp11 = 0.0;
	tmp11 += m_A33 * V[20];
	V[11] = (RHS11 - tmp11) / m_A32;
	double tmp10 = 0.0;
	tmp10 += m_A31 * V[20];
	V[10] = (RHS10 - tmp10) / m_A30;
	double tmp9 = 0.0;
	tmp9 += m_A29 * V[16];
	V[9] = (RHS9 - tmp9) / m_A28;
	double tmp8 = 0.0;
	tmp8 += m_A26 * V[16];
	tmp8 += m_A27 * V[19];
	V[8] = (RHS8 - tmp8) / m_A25;
	double tmp7 = 0.0;
	tmp7 += m_A21 * V[17];
	tmp7 += m_A22 * V[18];
	tmp7 += m_A23 * V[19];
	tmp7 += m_A24 * V[21];
	V[7] = (RHS7 - tmp7) / m_A20;
	double tmp6 = 0.0;
	tmp6 += m_A16 * V[15];
	tmp6 += m_A17 * V[18];
	tmp6 += m_A18 * V[19];
	tmp6 += m_A19 * V[21];
	V[6] = (RHS6 - tmp6) / m_A15;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[14];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[13];
	tmp4 += m_A12 * V[18];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[13];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[13];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[12];
	tmp1 += m_A4 * V[15];
	tmp1 += m_A5 * V[17];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[12];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// cheekyms
static void nl_gcr_7c86a9bc1c6aef4c_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A6 += gt[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A5 += go[5];
	m_A4 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// solarq
static void nl_gcr_7caaa135bff3d9f3_15_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A4 += go[2];
	m_A3 += go[3];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A5 += gt[5];
	m_A5 += gt[6];
	m_A6 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 -= go[6] * *cnV[6];
	m_A9 += gt[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A8 += go[7];
	m_A7 += go[8];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 += Idr[9];
	RHS3 -= go[9] * *cnV[9];
	m_A14 += gt[10];
	m_A14 += gt[11];
	m_A14 += gt[12];
	m_A12 += go[10];
	m_A11 += go[11];
	double RHS4 = Idr[10];
	RHS4 += Idr[11];
	RHS4 += Idr[12];
	RHS4 -= go[12] * *cnV[12];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A7;
	m_A9 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A8;
	m_A9 += m_A3 * f1_3;
	m_A10 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_4 = -f1 * m_A11;
	m_A13 += m_A3 * f1_4;
	m_A14 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A12;
	m_A14 += m_A6 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_4 = -f3 * m_A13;
	m_A14 += m_A10 * f3_4;
	RHS4 += f3_4 * RHS3;
	V[4] = RHS4 / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[4];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	tmp1 += m_A4 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// warrior
static void nl_gcr_8003d4625273fa4d_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	m_A5 += gt[5];
	m_A5 += gt[6];
	m_A5 += gt[7];
	m_A6 += go[5];
	m_A4 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[7] * *cnV[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A7 += go[8];
	m_A8 += go[9];
	double RHS3 = Idr[8];
	RHS3 += Idr[9];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A5 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A6 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[3];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// kidniki
static void nl_gcr_8046625a0fe0959_21_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A1 += go[0];
	m_A2 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A3 += gt[7];
	m_A3 += gt[8];
	m_A3 += gt[9];
	m_A5 += go[7];
	m_A4 += go[8];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[9] * *cnV[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[10];
	m_A8 += go[11];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	m_A10 += gt[12];
	m_A10 += gt[13];
	m_A10 += gt[14];
	m_A9 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	m_A14 += gt[15];
	m_A14 += gt[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A12 += go[15];
	m_A15 += go[16];
	m_A13 += go[17];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	m_A20 += gt[21];
	m_A20 += gt[22];
	m_A20 += gt[23];
	m_A17 += go[21];
	m_A16 += go[22];
	m_A19 += go[23];
	double RHS5 = Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A12;
	m_A13 += m_A1 * f0_4;
	m_A14 += m_A2 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_4 = -f1 * m_A13;
	m_A14 += m_A4 * f1_4;
	m_A15 += m_A5 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f1_5 = -f1 * m_A16;
	m_A19 += m_A4 * f1_5;
	m_A20 += m_A5 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A9;
	m_A10 += m_A7 * f2_3;
	m_A11 += m_A8 * f2_3;
	RHS3 += f2_3 * RHS2;
	const double f2_5 = -f2 * m_A17;
	m_A18 += m_A7 * f2_5;
	m_A20 += m_A8 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_5 = -f3 * m_A18;
	m_A20 += m_A11 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A14;
	const double f4_5 = -f4 * m_A19;
	m_A20 += m_A15 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A20;
	double tmp4 = 0.0;
	tmp4 += m_A15 * V[5];
	V[4] = (RHS4 - tmp4) / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[5];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	tmp2 += m_A8 * V[5];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[4];
	tmp1 += m_A5 * V[5];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[1];
	tmp0 += m_A2 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// mario
static void nl_gcr_80b4b1e5cc58d303_29_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A8 += go[9];
	m_A7 += go[10];
	m_A7 += go[11];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 -= go[12] * *cnV[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A10 += go[13];
	double RHS4 = Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 -= go[14] * *cnV[14];
	RHS4 -= go[15] * *cnV[15];
	m_A11 += gt[16];
	m_A11 += gt[17];
	m_A12 += go[16];
	double RHS5 = Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[17] * *cnV[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A14 += gt[24];
	m_A16 += go[18];
	m_A16 += go[19];
	m_A13 += go[20];
	m_A13 += go[21];
	m_A15 += go[22];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 += Idr[21];
	RHS6 += Idr[22];
	RHS6 += Idr[23];
	RHS6 += Idr[24];
	RHS6 -= go[23] * *cnV[23];
	RHS6 -= go[24] * *cnV[24];
	m_A22 += gt[25];
	m_A22 += gt[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A22 += gt[30];
	m_A20 += go[25];
	m_A21 += go[26];
	m_A19 += go[27];
	m_A18 += go[28];
	m_A17 += go[29];
	double RHS7 = Idr[25];
	RHS7 += Idr[26];
	RHS7 += Idr[27];
	RHS7 += Idr[28];
	RHS7 += Idr[29];
	RHS7 += Idr[30];
	RHS7 -= go[30] * *cnV[30];
	m_A28 += gt[31];
	m_A28 += gt[32];
	m_A28 += gt[33];
	m_A28 += gt[34];
	m_A28 += gt[35];
	m_A28 += gt[36];
	m_A25 += go[31];
	m_A24 += go[32];
	m_A26 += go[33];
	m_A26 += go[34];
	double RHS8 = Idr[31];
	RHS8 += Idr[32];
	RHS8 += Idr[33];
	RHS8 += Idr[34];
	RHS8 += Idr[35];
	RHS8 += Idr[36];
	RHS8 -= go[35] * *cnV[35];
	RHS8 -= go[36] * *cnV[36];
	const double f0 = 1.0 / m_A0;
	const double f0_7 = -f0 * m_A17;
	m_A22 += m_A1 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_7 = -f1 * m_A18;
	m_A22 += m_A3 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_7 = -f2 * m_A19;
	m_A22 += m_A5 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_6 = -f3 * m_A13;
	m_A14 += m_A7 * f3_6;
	m_A16 += m_A8 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f3_8 = -f3 * m_A24;
	m_A26 += m_A7 * f3_8;
	m_A28 += m_A8 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_8 = -f4 * m_A25;
	m_A28 += m_A10 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_7 = -f5 * m_A20;
	m_A22 += m_A12 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A14;
	const double f6_7 = -f6 * m_A21;
	m_A22 += m_A15 * f6_7;
	m_A23 += m_A16 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f6_8 = -f6 * m_A26;
	m_A27 += m_A15 * f6_8;
	m_A28 += m_A16 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A22;
	const double f7_8 = -f7 * m_A27;
	m_A28 += m_A23 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A28;
	double tmp7 = 0.0;
	tmp7 += m_A23 * V[8];
	V[7] = (RHS7 - tmp7) / m_A22;
	double tmp6 = 0.0;
	tmp6 += m_A15 * V[7];
	tmp6 += m_A16 * V[8];
	V[6] = (RHS6 - tmp6) / m_A14;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[7];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[8];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[6];
	tmp3 += m_A8 * V[8];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[7];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[7];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// sundance
static void nl_gcr_8446e63d7842f6a6_70_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 += Idr[8];
	RHS3 -= go[7] * *cnV[7];
	RHS3 -= go[8] * *cnV[8];
	m_A8 += gt[9];
	m_A8 += gt[10];
	m_A10 += go[9];
	m_A9 += go[10];
	double RHS4 = Idr[9];
	RHS4 += Idr[10];
	m_A11 += gt[11];
	m_A11 += gt[12];
	m_A11 += gt[13];
	m_A12 += go[11];
	m_A13 += go[12];
	double RHS5 = Idr[11];
	RHS5 += Idr[12];
	RHS5 += Idr[13];
	RHS5 -= go[13] * *cnV[13];
	m_A14 += gt[14];
	m_A14 += gt[15];
	m_A14 += gt[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A15 += go[14];
	double RHS6 = Idr[14];
	RHS6 += Idr[15];
	RHS6 += Idr[16];
	RHS6 += Idr[17];
	RHS6 += Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 -= go[15] * *cnV[15];
	RHS6 -= go[16] * *cnV[16];
	RHS6 -= go[17] * *cnV[17];
	RHS6 -= go[18] * *cnV[18];
	RHS6 -= go[19] * *cnV[19];
	RHS6 -= go[20] * *cnV[20];
	m_A16 += gt[21];
	m_A16 += gt[22];
	m_A16 += gt[23];
	m_A16 += gt[24];
	m_A18 += go[21];
	m_A18 += go[22];
	m_A17 += go[23];
	double RHS7 = Idr[21];
	RHS7 += Idr[22];
	RHS7 += Idr[23];
	RHS7 += Idr[24];
	RHS7 -= go[24] * *cnV[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A21 += go[25];
	m_A20 += go[26];
	double RHS8 = Idr[25];
	RHS8 += Idr[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A24 += go[27];
	m_A23 += go[28];
	double RHS9 = Idr[27];
	RHS9 += Idr[28];
	RHS9 += Idr[29];
	RHS9 -= go[29] * *cnV[29];
	m_A27 += gt[30];
	m_A27 += gt[31];
	m_A26 += go[30];
	m_A25 += go[31];
	double RHS10 = Idr[30];
	RHS10 += Idr[31];
	m_A31 += gt[32];
	m_A31 += gt[33];
	m_A31 += gt[34];
	m_A32 += go[32];
	m_A30 += go[33];
	double RHS11 = Idr[32];
	RHS11 += Idr[33];
	RHS11 += Idr[34];
	RHS11 -= go[34] * *cnV[34];
	m_A35 += gt[35];
	m_A35 += gt[36];
	m_A35 += gt[37];
	m_A34 += go[35];
	m_A33 += go[36];
	double RHS12 = Idr[35];
	RHS12 += Idr[36];
	RHS12 += Idr[37];
	RHS12 -= go[37] * *cnV[37];
	m_A40 += gt[38];
	m_A40 += gt[39];
	m_A40 += gt[40];
	m_A40 += gt[41];
	m_A43 += go[38];
	m_A38 += go[39];
	m_A37 += go[40];
	double RHS13 = Idr[38];
	RHS13 += Idr[39];
	RHS13 += Idr[40];
	RHS13 += Idr[41];
	RHS13 -= go[41] * *cnV[41];
	m_A50 += gt[42];
	m_A50 += gt[43];
	m_A50 += gt[44];
	m_A50 += gt[45];
	m_A50 += gt[46];
	m_A50 += gt[47];
	m_A44 += go[42];
	m_A46 += go[43];
	m_A45 += go[44];
	m_A45 += go[45];
	double RHS14 = Idr[42];
	RHS14 += Idr[43];
	RHS14 += Idr[44];
	RHS14 += Idr[45];
	RHS14 += Idr[46];
	RHS14 += Idr[47];
	RHS14 -= go[46] * *cnV[46];
	RHS14 -= go[47] * *cnV[47];
	m_A55 += gt[48];
	m_A55 += gt[49];
	m_A55 += gt[50];
	m_A54 += go[48];
	m_A53 += go[49];
	double RHS15 = Idr[48];
	RHS15 += Idr[49];
	RHS15 += Idr[50];
	RHS15 -= go[50] * *cnV[50];
	m_A62 += gt[51];
	m_A62 += gt[52];
	m_A62 += gt[53];
	m_A62 += gt[54];
	m_A57 += go[51];
	m_A58 += go[52];
	m_A59 += go[53];
	double RHS16 = Idr[51];
	RHS16 += Idr[52];
	RHS16 += Idr[53];
	RHS16 += Idr[54];
	RHS16 -= go[54] * *cnV[54];
	m_A69 += gt[55];
	m_A69 += gt[56];
	m_A64 += go[55];
	m_A65 += go[56];
	double RHS17 = Idr[55];
	RHS17 += Idr[56];
	const double f0 = 1.0 / m_A0;
	const double f0_15 = -f0 * m_A53;
	m_A55 += m_A1 * f0_15;
	RHS15 += f0_15 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_12 = -f1 * m_A33;
	m_A35 += m_A3 * f1_12;
	RHS12 += f1_12 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_11 = -f2 * m_A30;
	m_A31 += m_A5 * f2_11;
	RHS11 += f2_11 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_16 = -f3 * m_A57;
	m_A62 += m_A7 * f3_16;
	RHS16 += f3_16 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_13 = -f4 * m_A37;
	m_A40 += m_A9 * f4_13;
	m_A42 += m_A10 * f4_13;
	RHS13 += f4_13 * RHS4;
	const double f4_16 = -f4 * m_A58;
	m_A60 += m_A9 * f4_16;
	m_A62 += m_A10 * f4_16;
	RHS16 += f4_16 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_10 = -f5 * m_A25;
	m_A27 += m_A12 * f5_10;
	m_A28 += m_A13 * f5_10;
	RHS10 += f5_10 * RHS5;
	const double f5_13 = -f5 * m_A38;
	m_A39 += m_A12 * f5_13;
	m_A40 += m_A13 * f5_13;
	RHS13 += f5_13 * RHS5;
	const double f6 = 1.0 / m_A14;
	const double f6_14 = -f6 * m_A44;
	m_A45 += m_A15 * f6_14;
	RHS14 += f6_14 * RHS6;
	const double f7 = 1.0 / m_A16;
	const double f7_10 = -f7 * m_A26;
	m_A27 += m_A17 * f7_10;
	m_A29 += m_A18 * f7_10;
	RHS10 += f7_10 * RHS7;
	const double f7_14 = -f7 * m_A45;
	m_A47 += m_A17 * f7_14;
	m_A50 += m_A18 * f7_14;
	RHS14 += f7_14 * RHS7;
	const double f8 = 1.0 / m_A19;
	const double f8_12 = -f8 * m_A34;
	m_A35 += m_A20 * f8_12;
	m_A36 += m_A21 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f8_14 = -f8 * m_A46;
	m_A48 += m_A20 * f8_14;
	m_A50 += m_A21 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f9 = 1.0 / m_A22;
	const double f9_15 = -f9 * m_A54;
	m_A55 += m_A23 * f9_15;
	m_A56 += m_A24 * f9_15;
	RHS15 += f9_15 * RHS9;
	const double f9_17 = -f9 * m_A64;
	m_A67 += m_A23 * f9_17;
	m_A69 += m_A24 * f9_17;
	RHS17 += f9_17 * RHS9;
	const double f10 = 1.0 / m_A27;
	const double f10_13 = -f10 * m_A39;
	m_A40 += m_A28 * f10_13;
	m_A41 += m_A29 * f10_13;
	RHS13 += f10_13 * RHS10;
	const double f10_14 = -f10 * m_A47;
	m_A49 += m_A28 * f10_14;
	m_A50 += m_A29 * f10_14;
	RHS14 += f10_14 * RHS10;
	const double f11 = 1.0 / m_A31;
	const double f11_16 = -f11 * m_A59;
	m_A62 += m_A32 * f11_16;
	RHS16 += f11_16 * RHS11;
	const double f12 = 1.0 / m_A35;
	const double f12_14 = -f12 * m_A48;
	m_A50 += m_A36 * f12_14;
	RHS14 += f12_14 * RHS12;
	const double f13 = 1.0 / m_A40;
	const double f13_14 = -f13 * m_A49;
	m_A50 += m_A41 * f13_14;
	m_A51 += m_A42 * f13_14;
	m_A52 += m_A43 * f13_14;
	RHS14 += f13_14 * RHS13;
	const double f13_16 = -f13 * m_A60;
	m_A61 += m_A41 * f13_16;
	m_A62 += m_A42 * f13_16;
	m_A63 += m_A43 * f13_16;
	RHS16 += f13_16 * RHS13;
	const double f13_17 = -f13 * m_A65;
	m_A66 += m_A41 * f13_17;
	m_A68 += m_A42 * f13_17;
	m_A69 += m_A43 * f13_17;
	RHS17 += f13_17 * RHS13;
	const double f14 = 1.0 / m_A50;
	const double f14_16 = -f14 * m_A61;
	m_A62 += m_A51 * f14_16;
	m_A63 += m_A52 * f14_16;
	RHS16 += f14_16 * RHS14;
	const double f14_17 = -f14 * m_A66;
	m_A68 += m_A51 * f14_17;
	m_A69 += m_A52 * f14_17;
	RHS17 += f14_17 * RHS14;
	const double f15 = 1.0 / m_A55;
	const double f15_17 = -f15 * m_A67;
	m_A69 += m_A56 * f15_17;
	RHS17 += f15_17 * RHS15;
	const double f16 = 1.0 / m_A62;
	const double f16_17 = -f16 * m_A68;
	m_A69 += m_A63 * f16_17;
	RHS17 += f16_17 * RHS16;
	V[17] = RHS17 / m_A69;
	double tmp16 = 0.0;
	tmp16 += m_A63 * V[17];
	V[16] = (RHS16 - tmp16) / m_A62;
	double tmp15 = 0.0;
	tmp15 += m_A56 * V[17];
	V[15] = (RHS15 - tmp15) / m_A55;
	double tmp14 = 0.0;
	tmp14 += m_A51 * V[16];
	tmp14 += m_A52 * V[17];
	V[14] = (RHS14 - tmp14) / m_A50;
	double tmp13 = 0.0;
	tmp13 += m_A41 * V[14];
	tmp13 += m_A42 * V[16];
	tmp13 += m_A43 * V[17];
	V[13] = (RHS13 - tmp13) / m_A40;
	double tmp12 = 0.0;
	tmp12 += m_A36 * V[14];
	V[12] = (RHS12 - tmp12) / m_A35;
	double tmp11 = 0.0;
	tmp11 += m_A32 * V[16];
	V[11] = (RHS11 - tmp11) / m_A31;
	double tmp10 = 0.0;
	tmp10 += m_A28 * V[13];
	tmp10 += m_A29 * V[14];
	V[10] = (RHS10 - tmp10) / m_A27;
	double tmp9 = 0.0;
	tmp9 += m_A23 * V[15];
	tmp9 += m_A24 * V[17];
	V[9] = (RHS9 - tmp9) / m_A22;
	double tmp8 = 0.0;
	tmp8 += m_A20 * V[12];
	tmp8 += m_A21 * V[14];
	V[8] = (RHS8 - tmp8) / m_A19;
	double tmp7 = 0.0;
	tmp7 += m_A17 * V[10];
	tmp7 += m_A18 * V[14];
	V[7] = (RHS7 - tmp7) / m_A16;
	double tmp6 = 0.0;
	tmp6 += m_A15 * V[7];
	V[6] = (RHS6 - tmp6) / m_A14;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[10];
	tmp5 += m_A13 * V[13];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[13];
	tmp4 += m_A10 * V[16];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[16];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[11];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[12];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[15];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// dpatrol
static void nl_gcr_85652d3e3ada285a_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A9 += gt[11];
	m_A9 += gt[12];
	m_A8 += go[9];
	m_A7 += go[10];
	m_A6 += go[11];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 -= go[12] * *cnV[12];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A6;
	m_A9 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A5 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// zac1b11142
static void nl_gcr_861d39f81d29d51_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A4 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	m_A7 += gt[5];
	m_A7 += gt[6];
	m_A6 += go[5];
	m_A5 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	m_A11 += gt[7];
	m_A11 += gt[8];
	m_A9 += go[7];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 -= go[8] * *cnV[8];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A5;
	m_A7 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A6;
	m_A7 += m_A3 * f1_2;
	m_A8 += m_A4 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A7;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A8 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A8 * V[3];
	V[2] = (RHS2 - tmp2) / m_A7;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// 280zzzap
static void nl_gcr_864a61c57bac9c38_123_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	double m_A119(0.0);
	double m_A120(0.0);
	double m_A121(0.0);
	double m_A122(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A7 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A9 += go[15];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	m_A10 += gt[22];
	m_A10 += gt[23];
	m_A11 += go[22];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[23] * *cnV[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A14 += go[24];
	m_A13 += go[25];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	m_A15 += gt[26];
	m_A15 += gt[27];
	m_A16 += go[26];
	double RHS7 = Idr[26];
	RHS7 += Idr[27];
	RHS7 -= go[27] * *cnV[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A18 += go[28];
	double RHS8 = Idr[28];
	RHS8 += Idr[29];
	RHS8 -= go[29] * *cnV[29];
	m_A19 += gt[30];
	m_A19 += gt[31];
	m_A19 += gt[32];
	m_A19 += gt[33];
	m_A19 += gt[34];
	m_A19 += gt[35];
	m_A19 += gt[36];
	m_A20 += go[30];
	double RHS9 = Idr[30];
	RHS9 += Idr[31];
	RHS9 += Idr[32];
	RHS9 += Idr[33];
	RHS9 += Idr[34];
	RHS9 += Idr[35];
	RHS9 += Idr[36];
	RHS9 -= go[31] * *cnV[31];
	RHS9 -= go[32] * *cnV[32];
	RHS9 -= go[33] * *cnV[33];
	RHS9 -= go[34] * *cnV[34];
	RHS9 -= go[35] * *cnV[35];
	RHS9 -= go[36] * *cnV[36];
	m_A21 += gt[37];
	m_A21 += gt[38];
	m_A21 += gt[39];
	m_A22 += go[37];
	double RHS10 = Idr[37];
	RHS10 += Idr[38];
	RHS10 += Idr[39];
	RHS10 -= go[38] * *cnV[38];
	RHS10 -= go[39] * *cnV[39];
	m_A23 += gt[40];
	m_A23 += gt[41];
	m_A23 += gt[42];
	m_A23 += gt[43];
	m_A24 += go[40];
	double RHS11 = Idr[40];
	RHS11 += Idr[41];
	RHS11 += Idr[42];
	RHS11 += Idr[43];
	RHS11 -= go[41] * *cnV[41];
	RHS11 -= go[42] * *cnV[42];
	RHS11 -= go[43] * *cnV[43];
	m_A25 += gt[44];
	m_A25 += gt[45];
	m_A25 += gt[46];
	m_A25 += gt[47];
	m_A25 += gt[48];
	m_A25 += gt[49];
	m_A25 += gt[50];
	m_A26 += go[44];
	double RHS12 = Idr[44];
	RHS12 += Idr[45];
	RHS12 += Idr[46];
	RHS12 += Idr[47];
	RHS12 += Idr[48];
	RHS12 += Idr[49];
	RHS12 += Idr[50];
	RHS12 -= go[45] * *cnV[45];
	RHS12 -= go[46] * *cnV[46];
	RHS12 -= go[47] * *cnV[47];
	RHS12 -= go[48] * *cnV[48];
	RHS12 -= go[49] * *cnV[49];
	RHS12 -= go[50] * *cnV[50];
	m_A27 += gt[51];
	m_A27 += gt[52];
	m_A28 += go[51];
	double RHS13 = Idr[51];
	RHS13 += Idr[52];
	RHS13 -= go[52] * *cnV[52];
	m_A29 += gt[53];
	m_A29 += gt[54];
	m_A30 += go[53];
	double RHS14 = Idr[53];
	RHS14 += Idr[54];
	RHS14 -= go[54] * *cnV[54];
	m_A31 += gt[55];
	m_A31 += gt[56];
	m_A32 += go[55];
	double RHS15 = Idr[55];
	RHS15 += Idr[56];
	RHS15 -= go[56] * *cnV[56];
	m_A33 += gt[57];
	m_A33 += gt[58];
	m_A33 += gt[59];
	m_A33 += gt[60];
	m_A35 += go[57];
	m_A34 += go[58];
	double RHS16 = Idr[57];
	RHS16 += Idr[58];
	RHS16 += Idr[59];
	RHS16 += Idr[60];
	RHS16 -= go[59] * *cnV[59];
	RHS16 -= go[60] * *cnV[60];
	m_A36 += gt[61];
	m_A36 += gt[62];
	m_A36 += gt[63];
	m_A37 += go[61];
	double RHS17 = Idr[61];
	RHS17 += Idr[62];
	RHS17 += Idr[63];
	RHS17 -= go[62] * *cnV[62];
	RHS17 -= go[63] * *cnV[63];
	m_A38 += gt[64];
	m_A38 += gt[65];
	m_A39 += go[64];
	double RHS18 = Idr[64];
	RHS18 += Idr[65];
	RHS18 -= go[65] * *cnV[65];
	m_A40 += gt[66];
	m_A40 += gt[67];
	m_A41 += go[66];
	double RHS19 = Idr[66];
	RHS19 += Idr[67];
	RHS19 -= go[67] * *cnV[67];
	m_A43 += gt[68];
	m_A43 += gt[69];
	m_A43 += gt[70];
	m_A43 += gt[71];
	m_A42 += go[68];
	double RHS20 = Idr[68];
	RHS20 += Idr[69];
	RHS20 += Idr[70];
	RHS20 += Idr[71];
	RHS20 -= go[69] * *cnV[69];
	RHS20 -= go[70] * *cnV[70];
	RHS20 -= go[71] * *cnV[71];
	m_A47 += gt[72];
	m_A47 += gt[73];
	m_A46 += go[72];
	m_A45 += go[73];
	double RHS21 = Idr[72];
	RHS21 += Idr[73];
	m_A51 += gt[74];
	m_A51 += gt[75];
	m_A49 += go[74];
	double RHS22 = Idr[74];
	RHS22 += Idr[75];
	RHS22 -= go[75] * *cnV[75];
	m_A54 += gt[76];
	m_A54 += gt[77];
	m_A54 += gt[78];
	m_A53 += go[76];
	m_A52 += go[77];
	double RHS23 = Idr[76];
	RHS23 += Idr[77];
	RHS23 += Idr[78];
	RHS23 -= go[78] * *cnV[78];
	m_A56 += gt[79];
	m_A56 += gt[80];
	m_A56 += gt[81];
	m_A56 += gt[82];
	m_A55 += go[79];
	m_A57 += go[80];
	double RHS24 = Idr[79];
	RHS24 += Idr[80];
	RHS24 += Idr[81];
	RHS24 += Idr[82];
	RHS24 -= go[81] * *cnV[81];
	RHS24 -= go[82] * *cnV[82];
	m_A59 += gt[83];
	m_A59 += gt[84];
	m_A59 += gt[85];
	m_A59 += gt[86];
	m_A58 += go[83];
	m_A60 += go[84];
	double RHS25 = Idr[83];
	RHS25 += Idr[84];
	RHS25 += Idr[85];
	RHS25 += Idr[86];
	RHS25 -= go[85] * *cnV[85];
	RHS25 -= go[86] * *cnV[86];
	m_A62 += gt[87];
	m_A62 += gt[88];
	m_A63 += go[87];
	m_A61 += go[88];
	double RHS26 = Idr[87];
	RHS26 += Idr[88];
	m_A67 += gt[89];
	m_A67 += gt[90];
	m_A67 += gt[91];
	m_A67 += gt[92];
	m_A67 += gt[93];
	m_A67 += gt[94];
	m_A64 += go[89];
	m_A65 += go[90];
	m_A69 += go[91];
	m_A68 += go[92];
	double RHS27 = Idr[89];
	RHS27 += Idr[90];
	RHS27 += Idr[91];
	RHS27 += Idr[92];
	RHS27 += Idr[93];
	RHS27 += Idr[94];
	RHS27 -= go[93] * *cnV[93];
	RHS27 -= go[94] * *cnV[94];
	m_A72 += gt[95];
	m_A72 += gt[96];
	m_A72 += gt[97];
	m_A72 += gt[98];
	m_A71 += go[95];
	m_A73 += go[96];
	double RHS28 = Idr[95];
	RHS28 += Idr[96];
	RHS28 += Idr[97];
	RHS28 += Idr[98];
	RHS28 -= go[97] * *cnV[97];
	RHS28 -= go[98] * *cnV[98];
	m_A76 += gt[99];
	m_A76 += gt[100];
	m_A76 += gt[101];
	m_A76 += gt[102];
	m_A77 += go[99];
	m_A78 += go[100];
	m_A74 += go[101];
	m_A75 += go[102];
	double RHS29 = Idr[99];
	RHS29 += Idr[100];
	RHS29 += Idr[101];
	RHS29 += Idr[102];
	m_A81 += gt[103];
	m_A81 += gt[104];
	m_A81 += gt[105];
	m_A80 += go[103];
	m_A79 += go[104];
	double RHS30 = Idr[103];
	RHS30 += Idr[104];
	RHS30 += Idr[105];
	RHS30 -= go[105] * *cnV[105];
	m_A84 += gt[106];
	m_A84 += gt[107];
	m_A82 += go[106];
	m_A83 += go[107];
	double RHS31 = Idr[106];
	RHS31 += Idr[107];
	m_A91 += gt[108];
	m_A91 += gt[109];
	m_A91 += gt[110];
	m_A91 += gt[111];
	m_A91 += gt[112];
	m_A86 += go[108];
	m_A90 += go[109];
	m_A88 += go[110];
	m_A85 += go[111];
	m_A87 += go[112];
	double RHS32 = Idr[108];
	RHS32 += Idr[109];
	RHS32 += Idr[110];
	RHS32 += Idr[111];
	RHS32 += Idr[112];
	m_A99 += gt[113];
	m_A99 += gt[114];
	m_A99 += gt[115];
	m_A99 += gt[116];
	m_A99 += gt[117];
	m_A96 += go[113];
	m_A100 += go[114];
	m_A97 += go[115];
	m_A94 += go[116];
	m_A95 += go[117];
	double RHS33 = Idr[113];
	RHS33 += Idr[114];
	RHS33 += Idr[115];
	RHS33 += Idr[116];
	RHS33 += Idr[117];
	m_A106 += gt[118];
	m_A106 += gt[119];
	m_A106 += gt[120];
	m_A106 += gt[121];
	m_A103 += go[118];
	m_A104 += go[119];
	m_A101 += go[120];
	m_A102 += go[121];
	double RHS34 = Idr[118];
	RHS34 += Idr[119];
	RHS34 += Idr[120];
	RHS34 += Idr[121];
	m_A111 += gt[122];
	m_A111 += gt[123];
	m_A111 += gt[124];
	m_A111 += gt[125];
	m_A108 += go[122];
	m_A109 += go[123];
	double RHS35 = Idr[122];
	RHS35 += Idr[123];
	RHS35 += Idr[124];
	RHS35 += Idr[125];
	RHS35 -= go[124] * *cnV[124];
	RHS35 -= go[125] * *cnV[125];
	m_A122 += gt[126];
	m_A122 += gt[127];
	m_A122 += gt[128];
	m_A122 += gt[129];
	m_A122 += gt[130];
	m_A122 += gt[131];
	m_A113 += go[126];
	m_A117 += go[127];
	m_A120 += go[128];
	m_A114 += go[129];
	double RHS36 = Idr[126];
	RHS36 += Idr[127];
	RHS36 += Idr[128];
	RHS36 += Idr[129];
	RHS36 += Idr[130];
	RHS36 += Idr[131];
	RHS36 -= go[130] * *cnV[130];
	RHS36 -= go[131] * *cnV[131];
	const double f0 = 1.0 / m_A0;
	const double f0_24 = -f0 * m_A55;
	m_A57 += m_A1 * f0_24;
	RHS24 += f0_24 * RHS0;
	const double f0_32 = -f0 * m_A85;
	m_A91 += m_A1 * f0_32;
	RHS32 += f0_32 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_32 = -f1 * m_A86;
	m_A91 += m_A3 * f1_32;
	RHS32 += f1_32 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_27 = -f2 * m_A64;
	m_A66 += m_A5 * f2_27;
	RHS27 += f2_27 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_25 = -f3 * m_A58;
	m_A60 += m_A7 * f3_25;
	RHS25 += f3_25 * RHS3;
	const double f3_34 = -f3 * m_A101;
	m_A106 += m_A7 * f3_34;
	RHS34 += f3_34 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_20 = -f4 * m_A42;
	m_A44 += m_A9 * f4_20;
	RHS20 += f4_20 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_21 = -f5 * m_A45;
	m_A47 += m_A11 * f5_21;
	RHS21 += f5_21 * RHS5;
	const double f5_32 = -f5 * m_A87;
	m_A88 += m_A11 * f5_32;
	RHS32 += f5_32 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_21 = -f6 * m_A46;
	m_A47 += m_A13 * f6_21;
	m_A48 += m_A14 * f6_21;
	RHS21 += f6_21 * RHS6;
	const double f6_22 = -f6 * m_A49;
	m_A50 += m_A13 * f6_22;
	m_A51 += m_A14 * f6_22;
	RHS22 += f6_22 * RHS6;
	const double f7 = 1.0 / m_A15;
	const double f7_23 = -f7 * m_A52;
	m_A54 += m_A16 * f7_23;
	RHS23 += f7_23 * RHS7;
	const double f7_34 = -f7 * m_A102;
	m_A103 += m_A16 * f7_34;
	RHS34 += f7_34 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_23 = -f8 * m_A53;
	m_A54 += m_A18 * f8_23;
	RHS23 += f8_23 * RHS8;
	const double f9 = 1.0 / m_A19;
	const double f9_36 = -f9 * m_A113;
	m_A116 += m_A20 * f9_36;
	RHS36 += f9_36 * RHS9;
	const double f10 = 1.0 / m_A21;
	const double f10_28 = -f10 * m_A71;
	m_A73 += m_A22 * f10_28;
	RHS28 += f10_28 * RHS10;
	const double f10_33 = -f10 * m_A94;
	m_A99 += m_A22 * f10_33;
	RHS33 += f10_33 * RHS10;
	const double f13 = 1.0 / m_A27;
	const double f13_26 = -f13 * m_A61;
	m_A62 += m_A28 * f13_26;
	RHS26 += f13_26 * RHS13;
	const double f13_33 = -f13 * m_A95;
	m_A97 += m_A28 * f13_33;
	RHS33 += f13_33 * RHS13;
	const double f14 = 1.0 / m_A29;
	const double f14_33 = -f14 * m_A96;
	m_A99 += m_A30 * f14_33;
	RHS33 += f14_33 * RHS14;
	const double f15 = 1.0 / m_A31;
	const double f15_31 = -f15 * m_A82;
	m_A84 += m_A32 * f15_31;
	RHS31 += f15_31 * RHS15;
	const double f16 = 1.0 / m_A33;
	const double f16_27 = -f16 * m_A65;
	m_A67 += m_A34 * f16_27;
	m_A70 += m_A35 * f16_27;
	RHS27 += f16_27 * RHS16;
	const double f16_36 = -f16 * m_A114;
	m_A115 += m_A34 * f16_36;
	m_A122 += m_A35 * f16_36;
	RHS36 += f16_36 * RHS16;
	const double f17 = 1.0 / m_A36;
	const double f17_29 = -f17 * m_A74;
	m_A76 += m_A37 * f17_29;
	RHS29 += f17_29 * RHS17;
	const double f17_35 = -f17 * m_A108;
	m_A109 += m_A37 * f17_35;
	RHS35 += f17_35 * RHS17;
	const double f18 = 1.0 / m_A38;
	const double f18_29 = -f18 * m_A75;
	m_A77 += m_A39 * f18_29;
	RHS29 += f18_29 * RHS18;
	const double f18_30 = -f18 * m_A79;
	m_A81 += m_A39 * f18_30;
	RHS30 += f18_30 * RHS18;
	const double f19 = 1.0 / m_A40;
	const double f19_30 = -f19 * m_A80;
	m_A81 += m_A41 * f19_30;
	RHS30 += f19_30 * RHS19;
	const double f21 = 1.0 / m_A47;
	const double f21_22 = -f21 * m_A50;
	m_A51 += m_A48 * f21_22;
	RHS22 += f21_22 * RHS21;
	const double f21_32 = -f21 * m_A88;
	m_A89 += m_A48 * f21_32;
	RHS32 += f21_32 * RHS21;
	const double f22 = 1.0 / m_A51;
	const double f22_32 = -f22 * m_A89;
	RHS32 += f22_32 * RHS22;
	const double f23 = 1.0 / m_A54;
	const double f23_34 = -f23 * m_A103;
	RHS34 += f23_34 * RHS23;
	const double f24 = 1.0 / m_A56;
	const double f24_27 = -f24 * m_A66;
	m_A68 += m_A57 * f24_27;
	RHS27 += f24_27 * RHS24;
	const double f26 = 1.0 / m_A62;
	const double f26_31 = -f26 * m_A83;
	m_A84 += m_A63 * f26_31;
	RHS31 += f26_31 * RHS26;
	const double f26_33 = -f26 * m_A97;
	m_A98 += m_A63 * f26_33;
	RHS33 += f26_33 * RHS26;
	const double f27 = 1.0 / m_A67;
	const double f27_32 = -f27 * m_A90;
	m_A91 += m_A68 * f27_32;
	m_A92 += m_A69 * f27_32;
	m_A93 += m_A70 * f27_32;
	RHS32 += f27_32 * RHS27;
	const double f27_34 = -f27 * m_A104;
	m_A105 += m_A68 * f27_34;
	m_A106 += m_A69 * f27_34;
	m_A107 += m_A70 * f27_34;
	RHS34 += f27_34 * RHS27;
	const double f27_36 = -f27 * m_A115;
	m_A119 += m_A68 * f27_36;
	m_A121 += m_A69 * f27_36;
	m_A122 += m_A70 * f27_36;
	RHS36 += f27_36 * RHS27;
	const double f28 = 1.0 / m_A72;
	const double f28_36 = -f28 * m_A116;
	m_A120 += m_A73 * f28_36;
	RHS36 += f28_36 * RHS28;
	const double f29 = 1.0 / m_A76;
	const double f29_35 = -f29 * m_A109;
	m_A110 += m_A77 * f29_35;
	m_A112 += m_A78 * f29_35;
	RHS35 += f29_35 * RHS29;
	const double f29_36 = -f29 * m_A117;
	m_A118 += m_A77 * f29_36;
	m_A122 += m_A78 * f29_36;
	RHS36 += f29_36 * RHS29;
	const double f30 = 1.0 / m_A81;
	const double f30_35 = -f30 * m_A110;
	RHS35 += f30_35 * RHS30;
	const double f30_36 = -f30 * m_A118;
	RHS36 += f30_36 * RHS30;
	const double f31 = 1.0 / m_A84;
	const double f31_33 = -f31 * m_A98;
	RHS33 += f31_33 * RHS31;
	const double f32 = 1.0 / m_A91;
	const double f32_34 = -f32 * m_A105;
	m_A106 += m_A92 * f32_34;
	m_A107 += m_A93 * f32_34;
	RHS34 += f32_34 * RHS32;
	const double f32_36 = -f32 * m_A119;
	m_A121 += m_A92 * f32_36;
	m_A122 += m_A93 * f32_36;
	RHS36 += f32_36 * RHS32;
	const double f33 = 1.0 / m_A99;
	const double f33_36 = -f33 * m_A120;
	m_A122 += m_A100 * f33_36;
	RHS36 += f33_36 * RHS33;
	const double f34 = 1.0 / m_A106;
	const double f34_36 = -f34 * m_A121;
	m_A122 += m_A107 * f34_36;
	RHS36 += f34_36 * RHS34;
	V[36] = RHS36 / m_A122;
	double tmp35 = 0.0;
	tmp35 += m_A112 * V[36];
	V[35] = (RHS35 - tmp35) / m_A111;
	double tmp34 = 0.0;
	tmp34 += m_A107 * V[36];
	V[34] = (RHS34 - tmp34) / m_A106;
	double tmp33 = 0.0;
	tmp33 += m_A100 * V[36];
	V[33] = (RHS33 - tmp33) / m_A99;
	double tmp32 = 0.0;
	tmp32 += m_A92 * V[34];
	tmp32 += m_A93 * V[36];
	V[32] = (RHS32 - tmp32) / m_A91;
	double tmp31 = 0.0;
	V[31] = (RHS31 - tmp31) / m_A84;
	double tmp30 = 0.0;
	V[30] = (RHS30 - tmp30) / m_A81;
	double tmp29 = 0.0;
	tmp29 += m_A77 * V[30];
	tmp29 += m_A78 * V[36];
	V[29] = (RHS29 - tmp29) / m_A76;
	double tmp28 = 0.0;
	tmp28 += m_A73 * V[33];
	V[28] = (RHS28 - tmp28) / m_A72;
	double tmp27 = 0.0;
	tmp27 += m_A68 * V[32];
	tmp27 += m_A69 * V[34];
	tmp27 += m_A70 * V[36];
	V[27] = (RHS27 - tmp27) / m_A67;
	double tmp26 = 0.0;
	tmp26 += m_A63 * V[31];
	V[26] = (RHS26 - tmp26) / m_A62;
	double tmp25 = 0.0;
	tmp25 += m_A60 * V[34];
	V[25] = (RHS25 - tmp25) / m_A59;
	double tmp24 = 0.0;
	tmp24 += m_A57 * V[32];
	V[24] = (RHS24 - tmp24) / m_A56;
	double tmp23 = 0.0;
	V[23] = (RHS23 - tmp23) / m_A54;
	double tmp22 = 0.0;
	V[22] = (RHS22 - tmp22) / m_A51;
	double tmp21 = 0.0;
	tmp21 += m_A48 * V[22];
	V[21] = (RHS21 - tmp21) / m_A47;
	double tmp20 = 0.0;
	tmp20 += m_A44 * V[25];
	V[20] = (RHS20 - tmp20) / m_A43;
	double tmp19 = 0.0;
	tmp19 += m_A41 * V[30];
	V[19] = (RHS19 - tmp19) / m_A40;
	double tmp18 = 0.0;
	tmp18 += m_A39 * V[30];
	V[18] = (RHS18 - tmp18) / m_A38;
	double tmp17 = 0.0;
	tmp17 += m_A37 * V[29];
	V[17] = (RHS17 - tmp17) / m_A36;
	double tmp16 = 0.0;
	tmp16 += m_A34 * V[27];
	tmp16 += m_A35 * V[36];
	V[16] = (RHS16 - tmp16) / m_A33;
	double tmp15 = 0.0;
	tmp15 += m_A32 * V[31];
	V[15] = (RHS15 - tmp15) / m_A31;
	double tmp14 = 0.0;
	tmp14 += m_A30 * V[33];
	V[14] = (RHS14 - tmp14) / m_A29;
	double tmp13 = 0.0;
	tmp13 += m_A28 * V[26];
	V[13] = (RHS13 - tmp13) / m_A27;
	double tmp12 = 0.0;
	tmp12 += m_A26 * V[35];
	V[12] = (RHS12 - tmp12) / m_A25;
	double tmp11 = 0.0;
	tmp11 += m_A24 * V[12];
	V[11] = (RHS11 - tmp11) / m_A23;
	double tmp10 = 0.0;
	tmp10 += m_A22 * V[33];
	V[10] = (RHS10 - tmp10) / m_A21;
	double tmp9 = 0.0;
	tmp9 += m_A20 * V[28];
	V[9] = (RHS9 - tmp9) / m_A19;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[23];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A16 * V[23];
	V[7] = (RHS7 - tmp7) / m_A15;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[21];
	tmp6 += m_A14 * V[22];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[21];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[25];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[34];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[24];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[32];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[32];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// zac1b11142
static void nl_gcr_87cb2c78a2628efd_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A5 += go[7];
	m_A5 += go[8];
	m_A4 += go[9];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starcas
static void nl_gcr_88a8ef5f6bd43d48_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A4 += go[2];
	m_A3 += go[3];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A7 += gt[5];
	m_A7 += gt[6];
	m_A7 += gt[7];
	m_A6 += go[5];
	m_A5 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[7] * *cnV[7];
	m_A11 += gt[8];
	m_A11 += gt[9];
	m_A11 += gt[10];
	m_A9 += go[8];
	double RHS3 = Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	RHS3 -= go[9] * *cnV[9];
	RHS3 -= go[10] * *cnV[10];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A5;
	m_A7 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A6;
	m_A7 += m_A3 * f1_2;
	m_A8 += m_A4 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A7;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A8 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A8 * V[3];
	V[2] = (RHS2 - tmp2) / m_A7;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// breakout
static void nl_gcr_8a1565d1413f42f7_31_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A3 += go[5];
	double RHS1 = Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A5 += go[8];
	m_A6 += go[9];
	double RHS2 = Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[10] * *cnV[10];
	m_A7 += gt[11];
	m_A7 += gt[12];
	m_A7 += gt[13];
	m_A8 += go[11];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A9 += gt[16];
	m_A10 += go[14];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 -= go[15] * *cnV[15];
	RHS4 -= go[16] * *cnV[16];
	m_A12 += gt[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A12 += gt[21];
	m_A12 += gt[22];
	m_A12 += gt[23];
	m_A14 += go[17];
	m_A13 += go[18];
	m_A11 += go[19];
	double RHS5 = Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	RHS5 -= go[23] * *cnV[23];
	m_A16 += gt[24];
	m_A16 += gt[25];
	m_A16 += gt[26];
	m_A16 += gt[27];
	m_A16 += gt[28];
	m_A18 += go[24];
	m_A15 += go[25];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	RHS6 += Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 -= go[26] * *cnV[26];
	RHS6 -= go[27] * *cnV[27];
	RHS6 -= go[28] * *cnV[28];
	m_A23 += gt[29];
	m_A23 += gt[30];
	m_A23 += gt[31];
	m_A19 += go[29];
	m_A20 += go[30];
	m_A21 += go[31];
	double RHS7 = Idr[29];
	RHS7 += Idr[30];
	RHS7 += Idr[31];
	m_A30 += gt[32];
	m_A30 += gt[33];
	m_A30 += gt[34];
	m_A30 += gt[35];
	m_A30 += gt[36];
	m_A26 += go[32];
	m_A25 += go[33];
	m_A28 += go[34];
	m_A27 += go[35];
	double RHS8 = Idr[32];
	RHS8 += Idr[33];
	RHS8 += Idr[34];
	RHS8 += Idr[35];
	RHS8 += Idr[36];
	RHS8 -= go[36] * *cnV[36];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A11;
	m_A12 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_7 = -f1 * m_A19;
	m_A23 += m_A3 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_6 = -f2 * m_A15;
	m_A16 += m_A5 * f2_6;
	m_A17 += m_A6 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f2_7 = -f2 * m_A20;
	m_A22 += m_A5 * f2_7;
	m_A23 += m_A6 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_8 = -f3 * m_A25;
	m_A30 += m_A8 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_8 = -f4 * m_A26;
	m_A30 += m_A10 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f5 = 1.0 / m_A12;
	const double f5_7 = -f5 * m_A21;
	m_A23 += m_A13 * f5_7;
	m_A24 += m_A14 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_8 = -f5 * m_A27;
	m_A29 += m_A13 * f5_8;
	m_A30 += m_A14 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A16;
	const double f6_7 = -f6 * m_A22;
	m_A23 += m_A17 * f6_7;
	m_A24 += m_A18 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f6_8 = -f6 * m_A28;
	m_A29 += m_A17 * f6_8;
	m_A30 += m_A18 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A23;
	const double f7_8 = -f7 * m_A29;
	m_A30 += m_A24 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A30;
	double tmp7 = 0.0;
	tmp7 += m_A24 * V[8];
	V[7] = (RHS7 - tmp7) / m_A23;
	double tmp6 = 0.0;
	tmp6 += m_A17 * V[7];
	tmp6 += m_A18 * V[8];
	V[6] = (RHS6 - tmp6) / m_A16;
	double tmp5 = 0.0;
	tmp5 += m_A13 * V[7];
	tmp5 += m_A14 * V[8];
	V[5] = (RHS5 - tmp5) / m_A12;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[8];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[8];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[6];
	tmp2 += m_A6 * V[7];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[7];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starhawk
static void nl_gcr_8b1ac1e181eec3fc_40_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A5 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A8 += go[8];
	m_A8 += go[9];
	m_A7 += go[10];
	double RHS3 = Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	m_A9 += gt[11];
	m_A9 += gt[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A9 += gt[16];
	m_A9 += gt[17];
	m_A10 += go[11];
	double RHS4 = Idr[11];
	RHS4 += Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 -= go[12] * *cnV[12];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	RHS4 -= go[15] * *cnV[15];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	m_A11 += gt[18];
	m_A11 += gt[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A12 += go[18];
	m_A12 += go[19];
	m_A13 += go[20];
	double RHS5 = Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 -= go[21] * *cnV[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A16 += go[22];
	m_A15 += go[23];
	double RHS6 = Idr[22];
	RHS6 += Idr[23];
	m_A19 += gt[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A18 += go[24];
	m_A17 += go[25];
	double RHS7 = Idr[24];
	RHS7 += Idr[25];
	RHS7 += Idr[26];
	RHS7 -= go[26] * *cnV[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A23 += go[27];
	m_A21 += go[28];
	double RHS8 = Idr[27];
	RHS8 += Idr[28];
	RHS8 += Idr[29];
	RHS8 -= go[29] * *cnV[29];
	m_A26 += gt[30];
	m_A26 += gt[31];
	m_A26 += gt[32];
	m_A25 += go[30];
	m_A24 += go[31];
	double RHS9 = Idr[30];
	RHS9 += Idr[31];
	RHS9 += Idr[32];
	RHS9 -= go[32] * *cnV[32];
	m_A32 += gt[33];
	m_A32 += gt[34];
	m_A32 += gt[35];
	m_A32 += gt[36];
	m_A32 += gt[37];
	m_A32 += gt[38];
	m_A28 += go[33];
	m_A30 += go[34];
	m_A29 += go[35];
	m_A29 += go[36];
	double RHS10 = Idr[33];
	RHS10 += Idr[34];
	RHS10 += Idr[35];
	RHS10 += Idr[36];
	RHS10 += Idr[37];
	RHS10 += Idr[38];
	RHS10 -= go[37] * *cnV[37];
	RHS10 -= go[38] * *cnV[38];
	m_A39 += gt[39];
	m_A39 += gt[40];
	m_A39 += gt[41];
	m_A39 += gt[42];
	m_A35 += go[39];
	m_A37 += go[40];
	m_A34 += go[41];
	m_A34 += go[42];
	double RHS11 = Idr[39];
	RHS11 += Idr[40];
	RHS11 += Idr[41];
	RHS11 += Idr[42];
	const double f0 = 1.0 / m_A0;
	const double f0_9 = -f0 * m_A24;
	m_A26 += m_A1 * f0_9;
	RHS9 += f0_9 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_7 = -f1 * m_A17;
	m_A19 += m_A3 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_8 = -f2 * m_A21;
	m_A22 += m_A5 * f2_8;
	RHS8 += f2_8 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_7 = -f3 * m_A18;
	m_A19 += m_A7 * f3_7;
	m_A20 += m_A8 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f3_11 = -f3 * m_A34;
	m_A36 += m_A7 * f3_11;
	m_A39 += m_A8 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_10 = -f4 * m_A28;
	m_A29 += m_A10 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_10 = -f5 * m_A29;
	m_A32 += m_A12 * f5_10;
	m_A33 += m_A13 * f5_10;
	RHS10 += f5_10 * RHS5;
	const double f5_11 = -f5 * m_A35;
	m_A38 += m_A12 * f5_11;
	m_A39 += m_A13 * f5_11;
	RHS11 += f5_11 * RHS5;
	const double f6 = 1.0 / m_A14;
	const double f6_9 = -f6 * m_A25;
	m_A26 += m_A15 * f6_9;
	m_A27 += m_A16 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f6_10 = -f6 * m_A30;
	m_A31 += m_A15 * f6_10;
	m_A32 += m_A16 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f7 = 1.0 / m_A19;
	const double f7_11 = -f7 * m_A36;
	m_A39 += m_A20 * f7_11;
	RHS11 += f7_11 * RHS7;
	const double f8 = 1.0 / m_A22;
	const double f8_11 = -f8 * m_A37;
	m_A39 += m_A23 * f8_11;
	RHS11 += f8_11 * RHS8;
	const double f9 = 1.0 / m_A26;
	const double f9_10 = -f9 * m_A31;
	m_A32 += m_A27 * f9_10;
	RHS10 += f9_10 * RHS9;
	const double f10 = 1.0 / m_A32;
	const double f10_11 = -f10 * m_A38;
	m_A39 += m_A33 * f10_11;
	RHS11 += f10_11 * RHS10;
	V[11] = RHS11 / m_A39;
	double tmp10 = 0.0;
	tmp10 += m_A33 * V[11];
	V[10] = (RHS10 - tmp10) / m_A32;
	double tmp9 = 0.0;
	tmp9 += m_A27 * V[10];
	V[9] = (RHS9 - tmp9) / m_A26;
	double tmp8 = 0.0;
	tmp8 += m_A23 * V[11];
	V[8] = (RHS8 - tmp8) / m_A22;
	double tmp7 = 0.0;
	tmp7 += m_A20 * V[11];
	V[7] = (RHS7 - tmp7) / m_A19;
	double tmp6 = 0.0;
	tmp6 += m_A15 * V[9];
	tmp6 += m_A16 * V[10];
	V[6] = (RHS6 - tmp6) / m_A14;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[10];
	tmp5 += m_A13 * V[11];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[5];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[7];
	tmp3 += m_A8 * V[11];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[8];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[7];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[9];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// rebound
static void nl_gcr_8bec817b324dcc3_28_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A4 += go[3];
	m_A4 += go[4];
	m_A3 += go[5];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[6] * *cnV[6];
	m_A5 += gt[7];
	m_A5 += gt[8];
	m_A5 += gt[9];
	m_A6 += go[7];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	m_A7 += gt[10];
	m_A7 += gt[11];
	m_A7 += gt[12];
	m_A7 += gt[13];
	m_A7 += gt[14];
	m_A7 += gt[15];
	m_A7 += gt[16];
	m_A8 += go[10];
	m_A8 += go[11];
	double RHS3 = Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	m_A11 += gt[17];
	m_A11 += gt[18];
	m_A11 += gt[19];
	m_A13 += go[17];
	m_A10 += go[18];
	m_A9 += go[19];
	double RHS4 = Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	m_A16 += gt[20];
	m_A16 += gt[21];
	m_A16 += gt[22];
	m_A16 += gt[23];
	m_A16 += gt[24];
	m_A16 += gt[25];
	m_A16 += gt[26];
	m_A18 += go[20];
	m_A14 += go[21];
	m_A14 += go[22];
	double RHS5 = Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 -= go[23] * *cnV[23];
	RHS5 -= go[24] * *cnV[24];
	RHS5 -= go[25] * *cnV[25];
	RHS5 -= go[26] * *cnV[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A22 += gt[30];
	m_A22 += gt[31];
	m_A22 += gt[32];
	m_A22 += gt[33];
	m_A22 += gt[34];
	m_A22 += gt[35];
	m_A22 += gt[36];
	m_A23 += go[27];
	m_A23 += go[28];
	m_A20 += go[29];
	m_A19 += go[30];
	m_A19 += go[31];
	double RHS6 = Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 += Idr[33];
	RHS6 += Idr[34];
	RHS6 += Idr[35];
	RHS6 += Idr[36];
	RHS6 -= go[32] * *cnV[32];
	RHS6 -= go[33] * *cnV[33];
	RHS6 -= go[34] * *cnV[34];
	RHS6 -= go[35] * *cnV[35];
	RHS6 -= go[36] * *cnV[36];
	m_A27 += gt[37];
	m_A27 += gt[38];
	m_A27 += gt[39];
	m_A27 += gt[40];
	m_A27 += gt[41];
	m_A26 += go[37];
	m_A26 += go[38];
	m_A25 += go[39];
	m_A24 += go[40];
	double RHS7 = Idr[37];
	RHS7 += Idr[38];
	RHS7 += Idr[39];
	RHS7 += Idr[40];
	RHS7 += Idr[41];
	RHS7 -= go[41] * *cnV[41];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A9;
	m_A11 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A10;
	m_A11 += m_A3 * f1_4;
	m_A12 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f1_5 = -f1 * m_A14;
	m_A15 += m_A3 * f1_5;
	m_A16 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_7 = -f2 * m_A24;
	m_A27 += m_A6 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_6 = -f3 * m_A19;
	m_A22 += m_A8 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_5 = -f4 * m_A15;
	m_A16 += m_A12 * f4_5;
	m_A17 += m_A13 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f4_6 = -f4 * m_A20;
	m_A21 += m_A12 * f4_6;
	m_A22 += m_A13 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A16;
	const double f5_6 = -f5 * m_A21;
	m_A22 += m_A17 * f5_6;
	m_A23 += m_A18 * f5_6;
	RHS6 += f5_6 * RHS5;
	const double f5_7 = -f5 * m_A25;
	m_A26 += m_A17 * f5_7;
	m_A27 += m_A18 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A22;
	const double f6_7 = -f6 * m_A26;
	m_A27 += m_A23 * f6_7;
	RHS7 += f6_7 * RHS6;
	V[7] = RHS7 / m_A27;
	double tmp6 = 0.0;
	tmp6 += m_A23 * V[7];
	V[6] = (RHS6 - tmp6) / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A17 * V[6];
	tmp5 += m_A18 * V[7];
	V[5] = (RHS5 - tmp5) / m_A16;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[5];
	tmp4 += m_A13 * V[6];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[6];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[7];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	tmp1 += m_A4 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// cocoloco
static void nl_gcr_8c0f7f2284333de5_16_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A8 += go[8];
	m_A10 += go[9];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 += Idr[10];
	RHS4 -= go[10] * *cnV[10];
	m_A15 += gt[11];
	m_A15 += gt[12];
	m_A15 += gt[13];
	m_A15 += gt[14];
	m_A14 += go[11];
	m_A13 += go[12];
	m_A12 += go[13];
	m_A11 += go[14];
	double RHS5 = Idr[11];
	RHS5 += Idr[12];
	RHS5 += Idr[13];
	RHS5 += Idr[14];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A11;
	m_A15 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A12;
	m_A15 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A8;
	m_A9 += m_A5 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_5 = -f3 * m_A13;
	m_A15 += m_A7 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_5 = -f4 * m_A14;
	m_A15 += m_A10 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A15;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[5];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[5];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// gamemachine
static void nl_gcr_934712b55bb3b2b2_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[7] * *cnV[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A9 += gt[11];
	m_A9 += gt[12];
	m_A8 += go[8];
	m_A7 += go[9];
	m_A6 += go[10];
	double RHS3 = Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A6;
	m_A9 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A5 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// kidniki
static void nl_gcr_9a5874c8e2da79d2_37_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A2 += go[0];
	m_A2 += go[1];
	m_A1 += go[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[3] * *cnV[3];
	m_A3 += gt[4];
	m_A3 += gt[5];
	m_A3 += gt[6];
	m_A5 += go[4];
	m_A4 += go[5];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A7 += go[7];
	m_A7 += go[8];
	m_A8 += go[9];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A9 += gt[16];
	m_A11 += go[14];
	m_A10 += go[15];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[16] * *cnV[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A13 += go[17];
	m_A12 += go[18];
	m_A12 += go[19];
	double RHS4 = Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	m_A18 += gt[22];
	m_A18 += gt[23];
	m_A18 += gt[24];
	m_A18 += gt[25];
	m_A18 += gt[26];
	m_A18 += gt[27];
	m_A18 += gt[28];
	m_A20 += go[22];
	m_A19 += go[23];
	m_A19 += go[24];
	m_A19 += go[25];
	m_A17 += go[26];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 -= go[27] * *cnV[27];
	RHS5 -= go[28] * *cnV[28];
	m_A23 += gt[29];
	m_A23 += gt[30];
	m_A23 += gt[31];
	m_A23 += gt[32];
	m_A21 += go[29];
	double RHS6 = Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 -= go[30] * *cnV[30];
	RHS6 -= go[31] * *cnV[31];
	RHS6 -= go[32] * *cnV[32];
	m_A28 += gt[33];
	m_A28 += gt[34];
	m_A28 += gt[35];
	m_A28 += gt[36];
	m_A28 += gt[37];
	m_A28 += gt[38];
	m_A26 += go[33];
	m_A27 += go[34];
	m_A27 += go[35];
	m_A27 += go[36];
	m_A25 += go[37];
	m_A25 += go[38];
	double RHS7 = Idr[33];
	RHS7 += Idr[34];
	RHS7 += Idr[35];
	RHS7 += Idr[36];
	RHS7 += Idr[37];
	RHS7 += Idr[38];
	m_A36 += gt[39];
	m_A36 += gt[40];
	m_A36 += gt[41];
	m_A36 += gt[42];
	m_A30 += go[39];
	m_A33 += go[40];
	m_A31 += go[41];
	double RHS8 = Idr[39];
	RHS8 += Idr[40];
	RHS8 += Idr[41];
	RHS8 += Idr[42];
	RHS8 -= go[42] * *cnV[42];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A17;
	m_A18 += m_A1 * f0_5;
	m_A19 += m_A2 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f0_7 = -f0 * m_A25;
	m_A27 += m_A1 * f0_7;
	m_A28 += m_A2 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_7 = -f1 * m_A26;
	m_A28 += m_A4 * f1_7;
	m_A29 += m_A5 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f1_8 = -f1 * m_A30;
	m_A35 += m_A4 * f1_8;
	m_A36 += m_A5 * f1_8;
	RHS8 += f1_8 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_4 = -f2 * m_A12;
	m_A14 += m_A7 * f2_4;
	m_A16 += m_A8 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_8 = -f2 * m_A31;
	m_A32 += m_A7 * f2_8;
	m_A36 += m_A8 * f2_8;
	RHS8 += f2_8 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_4 = -f3 * m_A13;
	m_A14 += m_A10 * f3_4;
	m_A15 += m_A11 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_6 = -f3 * m_A21;
	m_A22 += m_A10 * f3_6;
	m_A23 += m_A11 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A14;
	const double f4_6 = -f4 * m_A22;
	m_A23 += m_A15 * f4_6;
	m_A24 += m_A16 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f4_8 = -f4 * m_A32;
	m_A34 += m_A15 * f4_8;
	m_A36 += m_A16 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f5 = 1.0 / m_A18;
	const double f5_7 = -f5 * m_A27;
	m_A28 += m_A19 * f5_7;
	m_A29 += m_A20 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_8 = -f5 * m_A33;
	m_A35 += m_A19 * f5_8;
	m_A36 += m_A20 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A23;
	const double f6_8 = -f6 * m_A34;
	m_A36 += m_A24 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A28;
	const double f7_8 = -f7 * m_A35;
	m_A36 += m_A29 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A36;
	double tmp7 = 0.0;
	tmp7 += m_A29 * V[8];
	V[7] = (RHS7 - tmp7) / m_A28;
	double tmp6 = 0.0;
	tmp6 += m_A24 * V[8];
	V[6] = (RHS6 - tmp6) / m_A23;
	double tmp5 = 0.0;
	tmp5 += m_A19 * V[7];
	tmp5 += m_A20 * V[8];
	V[5] = (RHS5 - tmp5) / m_A18;
	double tmp4 = 0.0;
	tmp4 += m_A15 * V[6];
	tmp4 += m_A16 * V[8];
	V[4] = (RHS4 - tmp4) / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[4];
	tmp3 += m_A11 * V[6];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[4];
	tmp2 += m_A8 * V[8];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[7];
	tmp1 += m_A5 * V[8];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	tmp0 += m_A2 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// warrior
static void nl_gcr_9c975530a1a529d6_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	m_A6 += gt[3];
	m_A6 += gt[4];
	m_A5 += go[3];
	m_A4 += go[4];
	double RHS2 = Idr[3];
	RHS2 += Idr[4];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// kidniki
static void nl_gcr_9f141889c2091efc_24_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A3 += go[7];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[8] * *cnV[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A5 += go[9];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[10] * *cnV[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A7 += go[11];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 -= go[12] * *cnV[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A10 += go[13];
	m_A9 += go[14];
	double RHS4 = Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 -= go[15] * *cnV[15];
	m_A11 += gt[16];
	m_A11 += gt[17];
	m_A11 += gt[18];
	m_A12 += go[16];
	double RHS5 = Idr[16];
	RHS5 += Idr[17];
	RHS5 += Idr[18];
	RHS5 -= go[17] * *cnV[17];
	RHS5 -= go[18] * *cnV[18];
	m_A18 += gt[19];
	m_A18 += gt[20];
	m_A18 += gt[21];
	m_A18 += gt[22];
	m_A18 += gt[23];
	m_A16 += go[19];
	m_A15 += go[20];
	m_A14 += go[21];
	m_A17 += go[22];
	m_A13 += go[23];
	double RHS6 = Idr[19];
	RHS6 += Idr[20];
	RHS6 += Idr[21];
	RHS6 += Idr[22];
	RHS6 += Idr[23];
	m_A23 += gt[24];
	m_A23 += gt[25];
	m_A21 += go[24];
	m_A20 += go[25];
	double RHS7 = Idr[24];
	RHS7 += Idr[25];
	const double f0 = 1.0 / m_A0;
	const double f0_6 = -f0 * m_A13;
	m_A18 += m_A1 * f0_6;
	RHS6 += f0_6 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_6 = -f1 * m_A14;
	m_A18 += m_A3 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_6 = -f2 * m_A15;
	m_A18 += m_A5 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_6 = -f3 * m_A16;
	m_A18 += m_A7 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_6 = -f4 * m_A17;
	m_A18 += m_A9 * f4_6;
	m_A19 += m_A10 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f4_7 = -f4 * m_A20;
	m_A22 += m_A9 * f4_7;
	m_A23 += m_A10 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f5 = 1.0 / m_A11;
	const double f5_7 = -f5 * m_A21;
	m_A23 += m_A12 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A18;
	const double f6_7 = -f6 * m_A22;
	m_A23 += m_A19 * f6_7;
	RHS7 += f6_7 * RHS6;
	V[7] = RHS7 / m_A23;
	double tmp6 = 0.0;
	tmp6 += m_A19 * V[7];
	V[6] = (RHS6 - tmp6) / m_A18;
	double tmp5 = 0.0;
	tmp5 += m_A12 * V[7];
	V[5] = (RHS5 - tmp5) / m_A11;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[6];
	tmp4 += m_A10 * V[7];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[6];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[6];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[6];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// segas16b_audio
static void nl_gcr_9f7104c5e25c87dd_111_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A8 += go[9];
	m_A7 += go[10];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[11] * *cnV[11];
	m_A9 += gt[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A12 += go[12];
	m_A10 += go[13];
	m_A11 += go[14];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	m_A13 += gt[15];
	m_A13 += gt[16];
	m_A13 += gt[17];
	m_A13 += gt[18];
	m_A13 += gt[19];
	m_A13 += gt[20];
	m_A13 += gt[21];
	m_A15 += go[15];
	m_A14 += go[16];
	double RHS5 = Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 -= go[17] * *cnV[17];
	RHS5 -= go[18] * *cnV[18];
	RHS5 -= go[19] * *cnV[19];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	m_A16 += gt[22];
	m_A16 += gt[23];
	m_A17 += go[22];
	m_A18 += go[23];
	double RHS6 = Idr[22];
	RHS6 += Idr[23];
	m_A19 += gt[24];
	m_A19 += gt[25];
	m_A20 += go[24];
	m_A21 += go[25];
	double RHS7 = Idr[24];
	RHS7 += Idr[25];
	m_A22 += gt[26];
	m_A22 += gt[27];
	m_A23 += go[26];
	m_A24 += go[27];
	double RHS8 = Idr[26];
	RHS8 += Idr[27];
	m_A25 += gt[28];
	m_A25 += gt[29];
	m_A26 += go[28];
	m_A27 += go[29];
	double RHS9 = Idr[28];
	RHS9 += Idr[29];
	m_A28 += gt[30];
	m_A28 += gt[31];
	m_A29 += go[30];
	double RHS10 = Idr[30];
	RHS10 += Idr[31];
	RHS10 -= go[31] * *cnV[31];
	m_A30 += gt[32];
	m_A30 += gt[33];
	m_A30 += gt[34];
	m_A30 += gt[35];
	m_A31 += go[32];
	double RHS11 = Idr[32];
	RHS11 += Idr[33];
	RHS11 += Idr[34];
	RHS11 += Idr[35];
	RHS11 -= go[33] * *cnV[33];
	RHS11 -= go[34] * *cnV[34];
	RHS11 -= go[35] * *cnV[35];
	m_A34 += gt[36];
	m_A34 += gt[37];
	m_A34 += gt[38];
	m_A33 += go[36];
	m_A32 += go[37];
	double RHS12 = Idr[36];
	RHS12 += Idr[37];
	RHS12 += Idr[38];
	RHS12 -= go[38] * *cnV[38];
	m_A37 += gt[39];
	m_A37 += gt[40];
	m_A37 += gt[41];
	m_A37 += gt[42];
	m_A37 += gt[43];
	m_A37 += gt[44];
	m_A37 += gt[45];
	m_A38 += go[39];
	m_A36 += go[40];
	double RHS13 = Idr[39];
	RHS13 += Idr[40];
	RHS13 += Idr[41];
	RHS13 += Idr[42];
	RHS13 += Idr[43];
	RHS13 += Idr[44];
	RHS13 += Idr[45];
	RHS13 -= go[41] * *cnV[41];
	RHS13 -= go[42] * *cnV[42];
	RHS13 -= go[43] * *cnV[43];
	RHS13 -= go[44] * *cnV[44];
	RHS13 -= go[45] * *cnV[45];
	m_A40 += gt[46];
	m_A40 += gt[47];
	m_A40 += gt[48];
	m_A40 += gt[49];
	m_A40 += gt[50];
	m_A40 += gt[51];
	m_A40 += gt[52];
	m_A41 += go[46];
	m_A39 += go[47];
	double RHS14 = Idr[46];
	RHS14 += Idr[47];
	RHS14 += Idr[48];
	RHS14 += Idr[49];
	RHS14 += Idr[50];
	RHS14 += Idr[51];
	RHS14 += Idr[52];
	RHS14 -= go[48] * *cnV[48];
	RHS14 -= go[49] * *cnV[49];
	RHS14 -= go[50] * *cnV[50];
	RHS14 -= go[51] * *cnV[51];
	RHS14 -= go[52] * *cnV[52];
	m_A44 += gt[53];
	m_A44 += gt[54];
	m_A44 += gt[55];
	m_A44 += gt[56];
	m_A45 += go[53];
	m_A43 += go[54];
	m_A42 += go[55];
	double RHS15 = Idr[53];
	RHS15 += Idr[54];
	RHS15 += Idr[55];
	RHS15 += Idr[56];
	RHS15 -= go[56] * *cnV[56];
	m_A48 += gt[57];
	m_A48 += gt[58];
	m_A48 += gt[59];
	m_A48 += gt[60];
	m_A48 += gt[61];
	m_A48 += gt[62];
	m_A48 += gt[63];
	m_A49 += go[57];
	m_A46 += go[58];
	double RHS16 = Idr[57];
	RHS16 += Idr[58];
	RHS16 += Idr[59];
	RHS16 += Idr[60];
	RHS16 += Idr[61];
	RHS16 += Idr[62];
	RHS16 += Idr[63];
	RHS16 -= go[59] * *cnV[59];
	RHS16 -= go[60] * *cnV[60];
	RHS16 -= go[61] * *cnV[61];
	RHS16 -= go[62] * *cnV[62];
	RHS16 -= go[63] * *cnV[63];
	m_A51 += gt[64];
	m_A51 += gt[65];
	m_A51 += gt[66];
	m_A53 += go[64];
	m_A50 += go[65];
	double RHS17 = Idr[64];
	RHS17 += Idr[65];
	RHS17 += Idr[66];
	RHS17 -= go[66] * *cnV[66];
	m_A58 += gt[67];
	m_A58 += gt[68];
	m_A58 += gt[69];
	m_A58 += gt[70];
	m_A58 += gt[71];
	m_A58 += gt[72];
	m_A57 += go[67];
	m_A62 += go[68];
	m_A62 += go[69];
	m_A56 += go[70];
	m_A55 += go[71];
	m_A54 += go[72];
	double RHS18 = Idr[67];
	RHS18 += Idr[68];
	RHS18 += Idr[69];
	RHS18 += Idr[70];
	RHS18 += Idr[71];
	RHS18 += Idr[72];
	m_A67 += gt[73];
	m_A67 += gt[74];
	m_A67 += gt[75];
	m_A67 += gt[76];
	m_A67 += gt[77];
	m_A65 += go[73];
	m_A64 += go[74];
	m_A63 += go[75];
	double RHS19 = Idr[73];
	RHS19 += Idr[74];
	RHS19 += Idr[75];
	RHS19 += Idr[76];
	RHS19 += Idr[77];
	RHS19 -= go[76] * *cnV[76];
	RHS19 -= go[77] * *cnV[77];
	m_A76 += gt[78];
	m_A76 += gt[79];
	m_A76 += gt[80];
	m_A76 += gt[81];
	m_A76 += gt[82];
	m_A73 += go[78];
	m_A72 += go[79];
	m_A71 += go[80];
	double RHS20 = Idr[78];
	RHS20 += Idr[79];
	RHS20 += Idr[80];
	RHS20 += Idr[81];
	RHS20 += Idr[82];
	RHS20 -= go[81] * *cnV[81];
	RHS20 -= go[82] * *cnV[82];
	m_A84 += gt[83];
	m_A84 += gt[84];
	m_A84 += gt[85];
	m_A84 += gt[86];
	m_A84 += gt[87];
	m_A84 += gt[88];
	m_A82 += go[83];
	m_A80 += go[84];
	m_A79 += go[85];
	m_A81 += go[86];
	double RHS21 = Idr[83];
	RHS21 += Idr[84];
	RHS21 += Idr[85];
	RHS21 += Idr[86];
	RHS21 += Idr[87];
	RHS21 += Idr[88];
	RHS21 -= go[87] * *cnV[87];
	RHS21 -= go[88] * *cnV[88];
	m_A94 += gt[89];
	m_A94 += gt[90];
	m_A94 += gt[91];
	m_A94 += gt[92];
	m_A94 += gt[93];
	m_A94 += gt[94];
	m_A87 += go[89];
	m_A88 += go[90];
	m_A89 += go[91];
	m_A86 += go[92];
	double RHS22 = Idr[89];
	RHS22 += Idr[90];
	RHS22 += Idr[91];
	RHS22 += Idr[92];
	RHS22 += Idr[93];
	RHS22 += Idr[94];
	RHS22 -= go[93] * *cnV[93];
	RHS22 -= go[94] * *cnV[94];
	m_A101 += gt[95];
	m_A101 += gt[96];
	m_A101 += gt[97];
	m_A101 += gt[98];
	m_A101 += gt[99];
	m_A101 += gt[100];
	m_A101 += gt[101];
	m_A96 += go[95];
	m_A97 += go[96];
	double RHS23 = Idr[95];
	RHS23 += Idr[96];
	RHS23 += Idr[97];
	RHS23 += Idr[98];
	RHS23 += Idr[99];
	RHS23 += Idr[100];
	RHS23 += Idr[101];
	RHS23 -= go[97] * *cnV[97];
	RHS23 -= go[98] * *cnV[98];
	RHS23 -= go[99] * *cnV[99];
	RHS23 -= go[100] * *cnV[100];
	RHS23 -= go[101] * *cnV[101];
	m_A110 += gt[102];
	m_A110 += gt[103];
	m_A110 += gt[104];
	m_A110 += gt[105];
	m_A110 += gt[106];
	m_A110 += gt[107];
	m_A109 += go[102];
	m_A103 += go[103];
	m_A105 += go[104];
	m_A105 += go[105];
	double RHS24 = Idr[102];
	RHS24 += Idr[103];
	RHS24 += Idr[104];
	RHS24 += Idr[105];
	RHS24 += Idr[106];
	RHS24 += Idr[107];
	RHS24 -= go[106] * *cnV[106];
	RHS24 -= go[107] * *cnV[107];
	const double f0 = 1.0 / m_A0;
	const double f0_13 = -f0 * m_A36;
	m_A38 += m_A1 * f0_13;
	RHS13 += f0_13 * RHS0;
	const double f0_19 = -f0 * m_A63;
	m_A67 += m_A1 * f0_19;
	RHS19 += f0_19 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_14 = -f1 * m_A39;
	m_A41 += m_A3 * f1_14;
	RHS14 += f1_14 * RHS1;
	const double f1_20 = -f1 * m_A71;
	m_A76 += m_A3 * f1_20;
	RHS20 += f1_20 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_15 = -f2 * m_A42;
	m_A44 += m_A5 * f2_15;
	RHS15 += f2_15 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_15 = -f3 * m_A43;
	m_A44 += m_A7 * f3_15;
	m_A45 += m_A8 * f3_15;
	RHS15 += f3_15 * RHS3;
	const double f3_16 = -f3 * m_A46;
	m_A47 += m_A7 * f3_16;
	m_A49 += m_A8 * f3_16;
	RHS16 += f3_16 * RHS3;
	const double f3_21 = -f3 * m_A79;
	m_A81 += m_A7 * f3_21;
	m_A84 += m_A8 * f3_21;
	RHS21 += f3_21 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_17 = -f4 * m_A50;
	m_A51 += m_A10 * f4_17;
	m_A52 += m_A11 * f4_17;
	m_A53 += m_A12 * f4_17;
	RHS17 += f4_17 * RHS4;
	const double f4_21 = -f4 * m_A80;
	m_A83 += m_A10 * f4_21;
	m_A84 += m_A11 * f4_21;
	m_A85 += m_A12 * f4_21;
	RHS21 += f4_21 * RHS4;
	const double f4_22 = -f4 * m_A86;
	m_A89 += m_A10 * f4_22;
	m_A93 += m_A11 * f4_22;
	m_A94 += m_A12 * f4_22;
	RHS22 += f4_22 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_22 = -f5 * m_A87;
	m_A89 += m_A14 * f5_22;
	m_A94 += m_A15 * f5_22;
	RHS22 += f5_22 * RHS5;
	const double f6 = 1.0 / m_A16;
	const double f6_18 = -f6 * m_A54;
	m_A58 += m_A17 * f6_18;
	m_A61 += m_A18 * f6_18;
	RHS18 += f6_18 * RHS6;
	const double f6_22 = -f6 * m_A88;
	m_A90 += m_A17 * f6_22;
	m_A94 += m_A18 * f6_22;
	RHS22 += f6_22 * RHS6;
	const double f7 = 1.0 / m_A19;
	const double f7_18 = -f7 * m_A55;
	m_A58 += m_A20 * f7_18;
	m_A59 += m_A21 * f7_18;
	RHS18 += f7_18 * RHS7;
	const double f7_19 = -f7 * m_A64;
	m_A66 += m_A20 * f7_19;
	m_A67 += m_A21 * f7_19;
	RHS19 += f7_19 * RHS7;
	const double f8 = 1.0 / m_A22;
	const double f8_18 = -f8 * m_A56;
	m_A58 += m_A23 * f8_18;
	m_A60 += m_A24 * f8_18;
	RHS18 += f8_18 * RHS8;
	const double f8_20 = -f8 * m_A72;
	m_A74 += m_A23 * f8_20;
	m_A76 += m_A24 * f8_20;
	RHS20 += f8_20 * RHS8;
	const double f9 = 1.0 / m_A25;
	const double f9_12 = -f9 * m_A32;
	m_A34 += m_A26 * f9_12;
	m_A35 += m_A27 * f9_12;
	RHS12 += f9_12 * RHS9;
	const double f9_24 = -f9 * m_A103;
	m_A104 += m_A26 * f9_24;
	m_A110 += m_A27 * f9_24;
	RHS24 += f9_24 * RHS9;
	const double f10 = 1.0 / m_A28;
	const double f10_12 = -f10 * m_A33;
	m_A34 += m_A29 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f11 = 1.0 / m_A30;
	const double f11_18 = -f11 * m_A57;
	m_A58 += m_A31 * f11_18;
	RHS18 += f11_18 * RHS11;
	const double f11_23 = -f11 * m_A96;
	m_A97 += m_A31 * f11_23;
	RHS23 += f11_23 * RHS11;
	const double f12 = 1.0 / m_A34;
	const double f12_24 = -f12 * m_A104;
	m_A110 += m_A35 * f12_24;
	RHS24 += f12_24 * RHS12;
	const double f13 = 1.0 / m_A37;
	const double f13_19 = -f13 * m_A65;
	m_A67 += m_A38 * f13_19;
	RHS19 += f13_19 * RHS13;
	const double f14 = 1.0 / m_A40;
	const double f14_20 = -f14 * m_A73;
	m_A76 += m_A41 * f14_20;
	RHS20 += f14_20 * RHS14;
	const double f15 = 1.0 / m_A44;
	const double f15_16 = -f15 * m_A47;
	m_A49 += m_A45 * f15_16;
	RHS16 += f15_16 * RHS15;
	const double f15_21 = -f15 * m_A81;
	m_A84 += m_A45 * f15_21;
	RHS21 += f15_21 * RHS15;
	const double f16 = 1.0 / m_A48;
	const double f16_21 = -f16 * m_A82;
	m_A84 += m_A49 * f16_21;
	RHS21 += f16_21 * RHS16;
	const double f17 = 1.0 / m_A51;
	const double f17_21 = -f17 * m_A83;
	m_A84 += m_A52 * f17_21;
	m_A85 += m_A53 * f17_21;
	RHS21 += f17_21 * RHS17;
	const double f17_22 = -f17 * m_A89;
	m_A93 += m_A52 * f17_22;
	m_A94 += m_A53 * f17_22;
	RHS22 += f17_22 * RHS17;
	const double f18 = 1.0 / m_A58;
	const double f18_19 = -f18 * m_A66;
	m_A67 += m_A59 * f18_19;
	m_A68 += m_A60 * f18_19;
	m_A69 += m_A61 * f18_19;
	m_A70 += m_A62 * f18_19;
	RHS19 += f18_19 * RHS18;
	const double f18_20 = -f18 * m_A74;
	m_A75 += m_A59 * f18_20;
	m_A76 += m_A60 * f18_20;
	m_A77 += m_A61 * f18_20;
	m_A78 += m_A62 * f18_20;
	RHS20 += f18_20 * RHS18;
	const double f18_22 = -f18 * m_A90;
	m_A91 += m_A59 * f18_22;
	m_A92 += m_A60 * f18_22;
	m_A94 += m_A61 * f18_22;
	m_A95 += m_A62 * f18_22;
	RHS22 += f18_22 * RHS18;
	const double f18_23 = -f18 * m_A97;
	m_A98 += m_A59 * f18_23;
	m_A99 += m_A60 * f18_23;
	m_A100 += m_A61 * f18_23;
	m_A102 += m_A62 * f18_23;
	RHS23 += f18_23 * RHS18;
	const double f18_24 = -f18 * m_A105;
	m_A106 += m_A59 * f18_24;
	m_A107 += m_A60 * f18_24;
	m_A108 += m_A61 * f18_24;
	m_A110 += m_A62 * f18_24;
	RHS24 += f18_24 * RHS18;
	const double f19 = 1.0 / m_A67;
	const double f19_20 = -f19 * m_A75;
	m_A76 += m_A68 * f19_20;
	m_A77 += m_A69 * f19_20;
	m_A78 += m_A70 * f19_20;
	RHS20 += f19_20 * RHS19;
	const double f19_22 = -f19 * m_A91;
	m_A92 += m_A68 * f19_22;
	m_A94 += m_A69 * f19_22;
	m_A95 += m_A70 * f19_22;
	RHS22 += f19_22 * RHS19;
	const double f19_23 = -f19 * m_A98;
	m_A99 += m_A68 * f19_23;
	m_A100 += m_A69 * f19_23;
	m_A102 += m_A70 * f19_23;
	RHS23 += f19_23 * RHS19;
	const double f19_24 = -f19 * m_A106;
	m_A107 += m_A68 * f19_24;
	m_A108 += m_A69 * f19_24;
	m_A110 += m_A70 * f19_24;
	RHS24 += f19_24 * RHS19;
	const double f20 = 1.0 / m_A76;
	const double f20_22 = -f20 * m_A92;
	m_A94 += m_A77 * f20_22;
	m_A95 += m_A78 * f20_22;
	RHS22 += f20_22 * RHS20;
	const double f20_23 = -f20 * m_A99;
	m_A100 += m_A77 * f20_23;
	m_A102 += m_A78 * f20_23;
	RHS23 += f20_23 * RHS20;
	const double f20_24 = -f20 * m_A107;
	m_A108 += m_A77 * f20_24;
	m_A110 += m_A78 * f20_24;
	RHS24 += f20_24 * RHS20;
	const double f21 = 1.0 / m_A84;
	const double f21_22 = -f21 * m_A93;
	m_A94 += m_A85 * f21_22;
	RHS22 += f21_22 * RHS21;
	const double f22 = 1.0 / m_A94;
	const double f22_23 = -f22 * m_A100;
	m_A102 += m_A95 * f22_23;
	RHS23 += f22_23 * RHS22;
	const double f22_24 = -f22 * m_A108;
	m_A110 += m_A95 * f22_24;
	RHS24 += f22_24 * RHS22;
	const double f23 = 1.0 / m_A101;
	const double f23_24 = -f23 * m_A109;
	m_A110 += m_A102 * f23_24;
	RHS24 += f23_24 * RHS23;
	V[24] = RHS24 / m_A110;
	double tmp23 = 0.0;
	tmp23 += m_A102 * V[24];
	V[23] = (RHS23 - tmp23) / m_A101;
	double tmp22 = 0.0;
	tmp22 += m_A95 * V[24];
	V[22] = (RHS22 - tmp22) / m_A94;
	double tmp21 = 0.0;
	tmp21 += m_A85 * V[22];
	V[21] = (RHS21 - tmp21) / m_A84;
	double tmp20 = 0.0;
	tmp20 += m_A77 * V[22];
	tmp20 += m_A78 * V[24];
	V[20] = (RHS20 - tmp20) / m_A76;
	double tmp19 = 0.0;
	tmp19 += m_A68 * V[20];
	tmp19 += m_A69 * V[22];
	tmp19 += m_A70 * V[24];
	V[19] = (RHS19 - tmp19) / m_A67;
	double tmp18 = 0.0;
	tmp18 += m_A59 * V[19];
	tmp18 += m_A60 * V[20];
	tmp18 += m_A61 * V[22];
	tmp18 += m_A62 * V[24];
	V[18] = (RHS18 - tmp18) / m_A58;
	double tmp17 = 0.0;
	tmp17 += m_A52 * V[21];
	tmp17 += m_A53 * V[22];
	V[17] = (RHS17 - tmp17) / m_A51;
	double tmp16 = 0.0;
	tmp16 += m_A49 * V[21];
	V[16] = (RHS16 - tmp16) / m_A48;
	double tmp15 = 0.0;
	tmp15 += m_A45 * V[21];
	V[15] = (RHS15 - tmp15) / m_A44;
	double tmp14 = 0.0;
	tmp14 += m_A41 * V[20];
	V[14] = (RHS14 - tmp14) / m_A40;
	double tmp13 = 0.0;
	tmp13 += m_A38 * V[19];
	V[13] = (RHS13 - tmp13) / m_A37;
	double tmp12 = 0.0;
	tmp12 += m_A35 * V[24];
	V[12] = (RHS12 - tmp12) / m_A34;
	double tmp11 = 0.0;
	tmp11 += m_A31 * V[18];
	V[11] = (RHS11 - tmp11) / m_A30;
	double tmp10 = 0.0;
	tmp10 += m_A29 * V[12];
	V[10] = (RHS10 - tmp10) / m_A28;
	double tmp9 = 0.0;
	tmp9 += m_A26 * V[12];
	tmp9 += m_A27 * V[24];
	V[9] = (RHS9 - tmp9) / m_A25;
	double tmp8 = 0.0;
	tmp8 += m_A23 * V[18];
	tmp8 += m_A24 * V[20];
	V[8] = (RHS8 - tmp8) / m_A22;
	double tmp7 = 0.0;
	tmp7 += m_A20 * V[18];
	tmp7 += m_A21 * V[19];
	V[7] = (RHS7 - tmp7) / m_A19;
	double tmp6 = 0.0;
	tmp6 += m_A17 * V[18];
	tmp6 += m_A18 * V[22];
	V[6] = (RHS6 - tmp6) / m_A16;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[17];
	tmp5 += m_A15 * V[22];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[17];
	tmp4 += m_A11 * V[21];
	tmp4 += m_A12 * V[22];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[15];
	tmp3 += m_A8 * V[21];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[15];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[20];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[19];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_a0bf548977306172_25_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A6 += go[4];
	m_A5 += go[5];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	m_A7 += gt[11];
	m_A7 += gt[12];
	m_A7 += gt[13];
	m_A8 += go[11];
	m_A9 += go[12];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[13] * *cnV[13];
	m_A11 += gt[14];
	m_A11 += gt[15];
	m_A11 += gt[16];
	m_A12 += go[14];
	m_A10 += go[15];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 -= go[16] * *cnV[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A15 += go[17];
	m_A13 += go[18];
	double RHS5 = Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 -= go[19] * *cnV[19];
	m_A18 += gt[20];
	m_A18 += gt[21];
	m_A18 += gt[22];
	m_A16 += go[20];
	m_A17 += go[21];
	double RHS6 = Idr[20];
	RHS6 += Idr[21];
	RHS6 += Idr[22];
	RHS6 -= go[22] * *cnV[22];
	m_A24 += gt[23];
	m_A24 += gt[24];
	m_A24 += gt[25];
	m_A24 += gt[26];
	m_A24 += gt[27];
	m_A20 += go[23];
	m_A21 += go[24];
	m_A22 += go[25];
	double RHS7 = Idr[23];
	RHS7 += Idr[24];
	RHS7 += Idr[25];
	RHS7 += Idr[26];
	RHS7 += Idr[27];
	RHS7 -= go[26] * *cnV[26];
	RHS7 -= go[27] * *cnV[27];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A11 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A13;
	m_A14 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_7 = -f2 * m_A20;
	m_A22 += m_A5 * f2_7;
	m_A24 += m_A6 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_6 = -f3 * m_A16;
	m_A18 += m_A8 * f3_6;
	m_A19 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f3_7 = -f3 * m_A21;
	m_A23 += m_A8 * f3_7;
	m_A24 += m_A9 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_6 = -f4 * m_A17;
	m_A18 += m_A12 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A14;
	const double f5_7 = -f5 * m_A22;
	m_A24 += m_A15 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A18;
	const double f6_7 = -f6 * m_A23;
	m_A24 += m_A19 * f6_7;
	RHS7 += f6_7 * RHS6;
	V[7] = RHS7 / m_A24;
	double tmp6 = 0.0;
	tmp6 += m_A19 * V[7];
	V[6] = (RHS6 - tmp6) / m_A18;
	double tmp5 = 0.0;
	tmp5 += m_A15 * V[7];
	V[5] = (RHS5 - tmp5) / m_A14;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[6];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[6];
	tmp3 += m_A9 * V[7];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[5];
	tmp2 += m_A6 * V[7];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_a1132c8737d5d463_96_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A5 += go[7];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A7 += go[10];
	double RHS3 = Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A9 += go[13];
	double RHS4 = Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 -= go[14] * *cnV[14];
	RHS4 -= go[15] * *cnV[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A11 += go[16];
	double RHS5 = Idr[16];
	RHS5 += Idr[17];
	RHS5 += Idr[18];
	RHS5 -= go[17] * *cnV[17];
	RHS5 -= go[18] * *cnV[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A12 += gt[21];
	m_A13 += go[19];
	double RHS6 = Idr[19];
	RHS6 += Idr[20];
	RHS6 += Idr[21];
	RHS6 -= go[20] * *cnV[20];
	RHS6 -= go[21] * *cnV[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A14 += gt[24];
	m_A15 += go[22];
	double RHS7 = Idr[22];
	RHS7 += Idr[23];
	RHS7 += Idr[24];
	RHS7 -= go[23] * *cnV[23];
	RHS7 -= go[24] * *cnV[24];
	m_A16 += gt[25];
	m_A16 += gt[26];
	m_A16 += gt[27];
	m_A17 += go[25];
	double RHS8 = Idr[25];
	RHS8 += Idr[26];
	RHS8 += Idr[27];
	RHS8 -= go[26] * *cnV[26];
	RHS8 -= go[27] * *cnV[27];
	m_A18 += gt[28];
	m_A18 += gt[29];
	m_A18 += gt[30];
	m_A19 += go[28];
	double RHS9 = Idr[28];
	RHS9 += Idr[29];
	RHS9 += Idr[30];
	RHS9 -= go[29] * *cnV[29];
	RHS9 -= go[30] * *cnV[30];
	m_A20 += gt[31];
	m_A20 += gt[32];
	m_A20 += gt[33];
	m_A21 += go[31];
	double RHS10 = Idr[31];
	RHS10 += Idr[32];
	RHS10 += Idr[33];
	RHS10 -= go[32] * *cnV[32];
	RHS10 -= go[33] * *cnV[33];
	m_A22 += gt[34];
	m_A22 += gt[35];
	m_A24 += go[34];
	m_A23 += go[35];
	double RHS11 = Idr[34];
	RHS11 += Idr[35];
	m_A25 += gt[36];
	m_A25 += gt[37];
	m_A27 += go[36];
	m_A26 += go[37];
	double RHS12 = Idr[36];
	RHS12 += Idr[37];
	m_A28 += gt[38];
	m_A28 += gt[39];
	m_A30 += go[38];
	m_A29 += go[39];
	double RHS13 = Idr[38];
	RHS13 += Idr[39];
	m_A31 += gt[40];
	m_A31 += gt[41];
	m_A32 += go[40];
	double RHS14 = Idr[40];
	RHS14 += Idr[41];
	RHS14 -= go[41] * *cnV[41];
	m_A33 += gt[42];
	m_A33 += gt[43];
	m_A35 += go[42];
	m_A34 += go[43];
	double RHS15 = Idr[42];
	RHS15 += Idr[43];
	m_A36 += gt[44];
	m_A36 += gt[45];
	m_A36 += gt[46];
	m_A36 += gt[47];
	m_A36 += gt[48];
	m_A36 += gt[49];
	m_A36 += gt[50];
	m_A37 += go[44];
	double RHS16 = Idr[44];
	RHS16 += Idr[45];
	RHS16 += Idr[46];
	RHS16 += Idr[47];
	RHS16 += Idr[48];
	RHS16 += Idr[49];
	RHS16 += Idr[50];
	RHS16 -= go[45] * *cnV[45];
	RHS16 -= go[46] * *cnV[46];
	RHS16 -= go[47] * *cnV[47];
	RHS16 -= go[48] * *cnV[48];
	RHS16 -= go[49] * *cnV[49];
	RHS16 -= go[50] * *cnV[50];
	m_A42 += gt[51];
	m_A42 += gt[52];
	m_A42 += gt[53];
	m_A42 += gt[54];
	m_A42 += gt[55];
	m_A41 += go[51];
	m_A40 += go[52];
	m_A39 += go[53];
	m_A38 += go[54];
	double RHS17 = Idr[51];
	RHS17 += Idr[52];
	RHS17 += Idr[53];
	RHS17 += Idr[54];
	RHS17 += Idr[55];
	RHS17 -= go[55] * *cnV[55];
	m_A48 += gt[56];
	m_A48 += gt[57];
	m_A48 += gt[58];
	m_A48 += gt[59];
	m_A48 += gt[60];
	m_A47 += go[56];
	m_A46 += go[57];
	m_A45 += go[58];
	m_A44 += go[59];
	double RHS18 = Idr[56];
	RHS18 += Idr[57];
	RHS18 += Idr[58];
	RHS18 += Idr[59];
	RHS18 += Idr[60];
	RHS18 -= go[60] * *cnV[60];
	m_A50 += gt[61];
	m_A50 += gt[62];
	m_A51 += go[61];
	m_A52 += go[62];
	double RHS19 = Idr[61];
	RHS19 += Idr[62];
	m_A55 += gt[63];
	m_A55 += gt[64];
	m_A55 += gt[65];
	m_A54 += go[63];
	m_A53 += go[64];
	double RHS20 = Idr[63];
	RHS20 += Idr[64];
	RHS20 += Idr[65];
	RHS20 -= go[65] * *cnV[65];
	m_A58 += gt[66];
	m_A58 += gt[67];
	m_A58 += gt[68];
	m_A59 += go[66];
	m_A57 += go[67];
	double RHS21 = Idr[66];
	RHS21 += Idr[67];
	RHS21 += Idr[68];
	RHS21 -= go[68] * *cnV[68];
	m_A62 += gt[69];
	m_A62 += gt[70];
	m_A62 += gt[71];
	m_A61 += go[69];
	m_A60 += go[70];
	double RHS22 = Idr[69];
	RHS22 += Idr[70];
	RHS22 += Idr[71];
	RHS22 -= go[71] * *cnV[71];
	m_A65 += gt[72];
	m_A65 += gt[73];
	m_A65 += gt[74];
	m_A65 += gt[75];
	m_A65 += gt[76];
	m_A65 += gt[77];
	m_A65 += gt[78];
	m_A64 += go[72];
	m_A66 += go[73];
	double RHS23 = Idr[72];
	RHS23 += Idr[73];
	RHS23 += Idr[74];
	RHS23 += Idr[75];
	RHS23 += Idr[76];
	RHS23 += Idr[77];
	RHS23 += Idr[78];
	RHS23 -= go[74] * *cnV[74];
	RHS23 -= go[75] * *cnV[75];
	RHS23 -= go[76] * *cnV[76];
	RHS23 -= go[77] * *cnV[77];
	RHS23 -= go[78] * *cnV[78];
	m_A68 += gt[79];
	m_A68 += gt[80];
	m_A69 += go[79];
	m_A67 += go[80];
	double RHS24 = Idr[79];
	RHS24 += Idr[80];
	m_A73 += gt[81];
	m_A73 += gt[82];
	m_A73 += gt[83];
	m_A73 += gt[84];
	m_A73 += gt[85];
	m_A72 += go[81];
	m_A70 += go[82];
	m_A71 += go[83];
	double RHS25 = Idr[81];
	RHS25 += Idr[82];
	RHS25 += Idr[83];
	RHS25 += Idr[84];
	RHS25 += Idr[85];
	RHS25 -= go[84] * *cnV[84];
	RHS25 -= go[85] * *cnV[85];
	m_A76 += gt[86];
	m_A76 += gt[87];
	m_A77 += go[86];
	m_A75 += go[87];
	double RHS26 = Idr[86];
	RHS26 += Idr[87];
	m_A79 += gt[88];
	m_A79 += gt[89];
	m_A79 += gt[90];
	m_A79 += gt[91];
	m_A79 += gt[92];
	m_A78 += go[88];
	m_A80 += go[89];
	m_A80 += go[90];
	double RHS27 = Idr[88];
	RHS27 += Idr[89];
	RHS27 += Idr[90];
	RHS27 += Idr[91];
	RHS27 += Idr[92];
	RHS27 -= go[91] * *cnV[91];
	RHS27 -= go[92] * *cnV[92];
	m_A95 += gt[93];
	m_A95 += gt[94];
	m_A95 += gt[95];
	m_A95 += gt[96];
	m_A95 += gt[97];
	m_A95 += gt[98];
	m_A95 += gt[99];
	m_A95 += gt[100];
	m_A95 += gt[101];
	m_A95 += gt[102];
	m_A95 += gt[103];
	m_A87 += go[93];
	m_A94 += go[94];
	m_A94 += go[95];
	m_A93 += go[96];
	m_A91 += go[97];
	m_A84 += go[98];
	m_A83 += go[99];
	m_A82 += go[100];
	m_A81 += go[101];
	m_A89 += go[102];
	double RHS28 = Idr[93];
	RHS28 += Idr[94];
	RHS28 += Idr[95];
	RHS28 += Idr[96];
	RHS28 += Idr[97];
	RHS28 += Idr[98];
	RHS28 += Idr[99];
	RHS28 += Idr[100];
	RHS28 += Idr[101];
	RHS28 += Idr[102];
	RHS28 += Idr[103];
	RHS28 -= go[103] * *cnV[103];
	const double f0 = 1.0 / m_A0;
	const double f0_21 = -f0 * m_A57;
	m_A58 += m_A1 * f0_21;
	RHS21 += f0_21 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_17 = -f1 * m_A38;
	m_A42 += m_A3 * f1_17;
	RHS17 += f1_17 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_17 = -f2 * m_A39;
	m_A42 += m_A5 * f2_17;
	RHS17 += f2_17 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_17 = -f3 * m_A40;
	m_A42 += m_A7 * f3_17;
	RHS17 += f3_17 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_18 = -f4 * m_A44;
	m_A48 += m_A9 * f4_18;
	RHS18 += f4_18 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_20 = -f5 * m_A53;
	m_A55 += m_A11 * f5_20;
	RHS20 += f5_20 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_22 = -f6 * m_A60;
	m_A62 += m_A13 * f6_22;
	RHS22 += f6_22 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_18 = -f7 * m_A45;
	m_A48 += m_A15 * f7_18;
	RHS18 += f7_18 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_18 = -f8 * m_A46;
	m_A48 += m_A17 * f8_18;
	RHS18 += f8_18 * RHS8;
	const double f9 = 1.0 / m_A18;
	const double f9_24 = -f9 * m_A67;
	m_A68 += m_A19 * f9_24;
	RHS24 += f9_24 * RHS9;
	const double f10 = 1.0 / m_A20;
	const double f10_26 = -f10 * m_A75;
	m_A76 += m_A21 * f10_26;
	RHS26 += f10_26 * RHS10;
	const double f11 = 1.0 / m_A22;
	const double f11_17 = -f11 * m_A41;
	m_A42 += m_A23 * f11_17;
	m_A43 += m_A24 * f11_17;
	RHS17 += f11_17 * RHS11;
	const double f11_28 = -f11 * m_A81;
	m_A85 += m_A23 * f11_28;
	m_A95 += m_A24 * f11_28;
	RHS28 += f11_28 * RHS11;
	const double f12 = 1.0 / m_A25;
	const double f12_18 = -f12 * m_A47;
	m_A48 += m_A26 * f12_18;
	m_A49 += m_A27 * f12_18;
	RHS18 += f12_18 * RHS12;
	const double f12_28 = -f12 * m_A82;
	m_A86 += m_A26 * f12_28;
	m_A95 += m_A27 * f12_28;
	RHS28 += f12_28 * RHS12;
	const double f13 = 1.0 / m_A28;
	const double f13_20 = -f13 * m_A54;
	m_A55 += m_A29 * f13_20;
	m_A56 += m_A30 * f13_20;
	RHS20 += f13_20 * RHS13;
	const double f13_28 = -f13 * m_A83;
	m_A88 += m_A29 * f13_28;
	m_A95 += m_A30 * f13_28;
	RHS28 += f13_28 * RHS13;
	const double f14 = 1.0 / m_A31;
	const double f14_23 = -f14 * m_A64;
	m_A66 += m_A32 * f14_23;
	RHS23 += f14_23 * RHS14;
	const double f14_25 = -f14 * m_A70;
	m_A73 += m_A32 * f14_25;
	RHS25 += f14_25 * RHS14;
	const double f15 = 1.0 / m_A33;
	const double f15_22 = -f15 * m_A61;
	m_A62 += m_A34 * f15_22;
	m_A63 += m_A35 * f15_22;
	RHS22 += f15_22 * RHS15;
	const double f15_28 = -f15 * m_A84;
	m_A90 += m_A34 * f15_28;
	m_A95 += m_A35 * f15_28;
	RHS28 += f15_28 * RHS15;
	const double f16 = 1.0 / m_A36;
	const double f16_27 = -f16 * m_A78;
	m_A80 += m_A37 * f16_27;
	RHS27 += f16_27 * RHS16;
	const double f17 = 1.0 / m_A42;
	const double f17_28 = -f17 * m_A85;
	m_A95 += m_A43 * f17_28;
	RHS28 += f17_28 * RHS17;
	const double f18 = 1.0 / m_A48;
	const double f18_28 = -f18 * m_A86;
	m_A95 += m_A49 * f18_28;
	RHS28 += f18_28 * RHS18;
	const double f19 = 1.0 / m_A50;
	const double f19_25 = -f19 * m_A71;
	m_A73 += m_A51 * f19_25;
	m_A74 += m_A52 * f19_25;
	RHS25 += f19_25 * RHS19;
	const double f19_28 = -f19 * m_A87;
	m_A92 += m_A51 * f19_28;
	m_A95 += m_A52 * f19_28;
	RHS28 += f19_28 * RHS19;
	const double f20 = 1.0 / m_A55;
	const double f20_28 = -f20 * m_A88;
	m_A95 += m_A56 * f20_28;
	RHS28 += f20_28 * RHS20;
	const double f21 = 1.0 / m_A58;
	const double f21_28 = -f21 * m_A89;
	m_A95 += m_A59 * f21_28;
	RHS28 += f21_28 * RHS21;
	const double f22 = 1.0 / m_A62;
	const double f22_28 = -f22 * m_A90;
	m_A95 += m_A63 * f22_28;
	RHS28 += f22_28 * RHS22;
	const double f23 = 1.0 / m_A65;
	const double f23_25 = -f23 * m_A72;
	m_A73 += m_A66 * f23_25;
	RHS25 += f23_25 * RHS23;
	const double f24 = 1.0 / m_A68;
	const double f24_28 = -f24 * m_A91;
	m_A95 += m_A69 * f24_28;
	RHS28 += f24_28 * RHS24;
	const double f25 = 1.0 / m_A73;
	const double f25_28 = -f25 * m_A92;
	m_A95 += m_A74 * f25_28;
	RHS28 += f25_28 * RHS25;
	const double f26 = 1.0 / m_A76;
	const double f26_28 = -f26 * m_A93;
	m_A95 += m_A77 * f26_28;
	RHS28 += f26_28 * RHS26;
	const double f27 = 1.0 / m_A79;
	const double f27_28 = -f27 * m_A94;
	m_A95 += m_A80 * f27_28;
	RHS28 += f27_28 * RHS27;
	V[28] = RHS28 / m_A95;
	double tmp27 = 0.0;
	tmp27 += m_A80 * V[28];
	V[27] = (RHS27 - tmp27) / m_A79;
	double tmp26 = 0.0;
	tmp26 += m_A77 * V[28];
	V[26] = (RHS26 - tmp26) / m_A76;
	double tmp25 = 0.0;
	tmp25 += m_A74 * V[28];
	V[25] = (RHS25 - tmp25) / m_A73;
	double tmp24 = 0.0;
	tmp24 += m_A69 * V[28];
	V[24] = (RHS24 - tmp24) / m_A68;
	double tmp23 = 0.0;
	tmp23 += m_A66 * V[25];
	V[23] = (RHS23 - tmp23) / m_A65;
	double tmp22 = 0.0;
	tmp22 += m_A63 * V[28];
	V[22] = (RHS22 - tmp22) / m_A62;
	double tmp21 = 0.0;
	tmp21 += m_A59 * V[28];
	V[21] = (RHS21 - tmp21) / m_A58;
	double tmp20 = 0.0;
	tmp20 += m_A56 * V[28];
	V[20] = (RHS20 - tmp20) / m_A55;
	double tmp19 = 0.0;
	tmp19 += m_A51 * V[25];
	tmp19 += m_A52 * V[28];
	V[19] = (RHS19 - tmp19) / m_A50;
	double tmp18 = 0.0;
	tmp18 += m_A49 * V[28];
	V[18] = (RHS18 - tmp18) / m_A48;
	double tmp17 = 0.0;
	tmp17 += m_A43 * V[28];
	V[17] = (RHS17 - tmp17) / m_A42;
	double tmp16 = 0.0;
	tmp16 += m_A37 * V[28];
	V[16] = (RHS16 - tmp16) / m_A36;
	double tmp15 = 0.0;
	tmp15 += m_A34 * V[22];
	tmp15 += m_A35 * V[28];
	V[15] = (RHS15 - tmp15) / m_A33;
	double tmp14 = 0.0;
	tmp14 += m_A32 * V[25];
	V[14] = (RHS14 - tmp14) / m_A31;
	double tmp13 = 0.0;
	tmp13 += m_A29 * V[20];
	tmp13 += m_A30 * V[28];
	V[13] = (RHS13 - tmp13) / m_A28;
	double tmp12 = 0.0;
	tmp12 += m_A26 * V[18];
	tmp12 += m_A27 * V[28];
	V[12] = (RHS12 - tmp12) / m_A25;
	double tmp11 = 0.0;
	tmp11 += m_A23 * V[17];
	tmp11 += m_A24 * V[28];
	V[11] = (RHS11 - tmp11) / m_A22;
	double tmp10 = 0.0;
	tmp10 += m_A21 * V[26];
	V[10] = (RHS10 - tmp10) / m_A20;
	double tmp9 = 0.0;
	tmp9 += m_A19 * V[24];
	V[9] = (RHS9 - tmp9) / m_A18;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[18];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[18];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[22];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[20];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[18];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[17];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[17];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[17];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[21];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// rebound
static void nl_gcr_a41a44bd5c424f88_13_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A11 += go[12];
	m_A10 += go[13];
	m_A9 += go[14];
	m_A8 += go[15];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 -= go[16] * *cnV[16];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A8;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A9;
	m_A12 += m_A3 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A10;
	m_A12 += m_A5 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_4 = -f3 * m_A11;
	m_A12 += m_A7 * f3_4;
	RHS4 += f3_4 * RHS3;
	V[4] = RHS4 / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[4];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tp1985
static void nl_gcr_a4540ffea06b4346_26_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	m_A2 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	m_A3 += gt[2];
	m_A3 += gt[3];
	m_A3 += gt[4];
	m_A4 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	m_A5 += gt[5];
	m_A5 += gt[6];
	m_A5 += gt[7];
	m_A6 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	m_A7 += gt[8];
	m_A7 += gt[9];
	m_A8 += go[8];
	double RHS3 = Idr[8];
	RHS3 += Idr[9];
	RHS3 -= go[9] * *cnV[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A10 += gt[12];
	m_A10 += gt[13];
	m_A11 += go[10];
	m_A9 += go[11];
	double RHS4 = Idr[10];
	RHS4 += Idr[11];
	RHS4 += Idr[12];
	RHS4 += Idr[13];
	RHS4 -= go[12] * *cnV[12];
	RHS4 -= go[13] * *cnV[13];
	m_A14 += gt[14];
	m_A14 += gt[15];
	m_A13 += go[14];
	m_A15 += go[15];
	double RHS5 = Idr[14];
	RHS5 += Idr[15];
	m_A19 += gt[16];
	m_A19 += gt[17];
	m_A19 += gt[18];
	m_A19 += gt[19];
	m_A17 += go[16];
	m_A16 += go[17];
	m_A18 += go[18];
	m_A20 += go[19];
	double RHS6 = Idr[16];
	RHS6 += Idr[17];
	RHS6 += Idr[18];
	RHS6 += Idr[19];
	m_A25 += gt[20];
	m_A25 += gt[21];
	m_A25 += gt[22];
	m_A25 += gt[23];
	m_A25 += gt[24];
	m_A23 += go[20];
	m_A24 += go[21];
	m_A21 += go[22];
	double RHS7 = Idr[20];
	RHS7 += Idr[21];
	RHS7 += Idr[22];
	RHS7 += Idr[23];
	RHS7 += Idr[24];
	RHS7 -= go[23] * *cnV[23];
	RHS7 -= go[24] * *cnV[24];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A9;
	m_A10 += m_A1 * f0_4;
	m_A12 += m_A2 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f0_7 = -f0 * m_A21;
	m_A22 += m_A1 * f0_7;
	m_A25 += m_A2 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_6 = -f1 * m_A16;
	m_A19 += m_A4 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_6 = -f2 * m_A17;
	m_A19 += m_A6 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_5 = -f3 * m_A13;
	m_A14 += m_A8 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_6 = -f4 * m_A18;
	m_A19 += m_A11 * f4_6;
	m_A20 += m_A12 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f4_7 = -f4 * m_A22;
	m_A24 += m_A11 * f4_7;
	m_A25 += m_A12 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f5 = 1.0 / m_A14;
	const double f5_7 = -f5 * m_A23;
	m_A25 += m_A15 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A19;
	const double f6_7 = -f6 * m_A24;
	m_A25 += m_A20 * f6_7;
	RHS7 += f6_7 * RHS6;
	V[7] = RHS7 / m_A25;
	double tmp6 = 0.0;
	tmp6 += m_A20 * V[7];
	V[6] = (RHS6 - tmp6) / m_A19;
	double tmp5 = 0.0;
	tmp5 += m_A15 * V[7];
	V[5] = (RHS5 - tmp5) / m_A14;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[6];
	tmp4 += m_A12 * V[7];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[5];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[6];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[6];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	tmp0 += m_A2 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tailg
static void nl_gcr_a46301cd3479b8db_15_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A2 += go[0];
	m_A1 += go[1];
	m_A1 += go[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	m_A3 += gt[5];
	m_A3 += gt[6];
	m_A4 += go[5];
	double RHS1 = Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[7];
	m_A7 += go[8];
	m_A5 += go[9];
	m_A5 += go[10];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A9 += gt[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A10 += go[12];
	m_A8 += go[13];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[14] * *cnV[14];
	m_A14 += gt[15];
	m_A14 += gt[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A13 += go[15];
	m_A12 += go[16];
	m_A12 += go[17];
	m_A11 += go[18];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A5;
	m_A6 += m_A1 * f0_2;
	m_A7 += m_A2 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f0_4 = -f0 * m_A11;
	m_A12 += m_A1 * f0_4;
	m_A14 += m_A2 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_3 = -f1 * m_A8;
	m_A9 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_4 = -f2 * m_A12;
	m_A14 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_4 = -f3 * m_A13;
	m_A14 += m_A10 * f3_4;
	RHS4 += f3_4 * RHS3;
	V[4] = RHS4 / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[4];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[4];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	tmp0 += m_A2 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// barrier
static void nl_gcr_a50a4b733e95414a_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A5 += gt[6];
	m_A5 += gt[7];
	m_A5 += gt[8];
	m_A5 += gt[9];
	m_A4 += go[6];
	m_A6 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	m_A9 += gt[10];
	m_A9 += gt[11];
	m_A9 += gt[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A7 += go[10];
	m_A8 += go[11];
	double RHS3 = Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A5 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A6 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[3];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starcas
static void nl_gcr_a582a424cb61c678_62_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A9 += go[12];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A11 += go[15];
	double RHS5 = Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[16] * *cnV[16];
	RHS5 -= go[17] * *cnV[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A13 += go[18];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 -= go[19] * *cnV[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A16 += go[20];
	m_A15 += go[21];
	double RHS7 = Idr[20];
	RHS7 += Idr[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A19 += go[22];
	m_A18 += go[23];
	double RHS8 = Idr[22];
	RHS8 += Idr[23];
	m_A20 += gt[24];
	m_A20 += gt[25];
	m_A21 += go[24];
	double RHS9 = Idr[24];
	RHS9 += Idr[25];
	RHS9 -= go[25] * *cnV[25];
	m_A23 += gt[26];
	m_A23 += gt[27];
	m_A23 += gt[28];
	m_A23 += gt[29];
	m_A23 += gt[30];
	m_A23 += gt[31];
	m_A23 += gt[32];
	m_A22 += go[26];
	m_A24 += go[27];
	double RHS10 = Idr[26];
	RHS10 += Idr[27];
	RHS10 += Idr[28];
	RHS10 += Idr[29];
	RHS10 += Idr[30];
	RHS10 += Idr[31];
	RHS10 += Idr[32];
	RHS10 -= go[28] * *cnV[28];
	RHS10 -= go[29] * *cnV[29];
	RHS10 -= go[30] * *cnV[30];
	RHS10 -= go[31] * *cnV[31];
	RHS10 -= go[32] * *cnV[32];
	m_A25 += gt[33];
	m_A25 += gt[34];
	m_A25 += gt[35];
	m_A25 += gt[36];
	m_A25 += gt[37];
	m_A25 += gt[38];
	m_A25 += gt[39];
	m_A26 += go[33];
	double RHS11 = Idr[33];
	RHS11 += Idr[34];
	RHS11 += Idr[35];
	RHS11 += Idr[36];
	RHS11 += Idr[37];
	RHS11 += Idr[38];
	RHS11 += Idr[39];
	RHS11 -= go[34] * *cnV[34];
	RHS11 -= go[35] * *cnV[35];
	RHS11 -= go[36] * *cnV[36];
	RHS11 -= go[37] * *cnV[37];
	RHS11 -= go[38] * *cnV[38];
	RHS11 -= go[39] * *cnV[39];
	m_A30 += gt[40];
	m_A30 += gt[41];
	m_A30 += gt[42];
	m_A30 += gt[43];
	m_A29 += go[40];
	m_A28 += go[41];
	m_A27 += go[42];
	double RHS12 = Idr[40];
	RHS12 += Idr[41];
	RHS12 += Idr[42];
	RHS12 += Idr[43];
	RHS12 -= go[43] * *cnV[43];
	m_A32 += gt[44];
	m_A32 += gt[45];
	m_A33 += go[44];
	m_A34 += go[45];
	double RHS13 = Idr[44];
	RHS13 += Idr[45];
	m_A36 += gt[46];
	m_A36 += gt[47];
	m_A35 += go[46];
	m_A37 += go[47];
	double RHS14 = Idr[46];
	RHS14 += Idr[47];
	m_A42 += gt[48];
	m_A42 += gt[49];
	m_A42 += gt[50];
	m_A42 += gt[51];
	m_A42 += gt[52];
	m_A41 += go[48];
	m_A40 += go[49];
	m_A39 += go[50];
	m_A38 += go[51];
	double RHS15 = Idr[48];
	RHS15 += Idr[49];
	RHS15 += Idr[50];
	RHS15 += Idr[51];
	RHS15 += Idr[52];
	RHS15 -= go[52] * *cnV[52];
	m_A46 += gt[53];
	m_A46 += gt[54];
	m_A46 += gt[55];
	m_A46 += gt[56];
	m_A46 += gt[57];
	m_A45 += go[53];
	m_A44 += go[54];
	m_A47 += go[55];
	double RHS16 = Idr[53];
	RHS16 += Idr[54];
	RHS16 += Idr[55];
	RHS16 += Idr[56];
	RHS16 += Idr[57];
	RHS16 -= go[56] * *cnV[56];
	RHS16 -= go[57] * *cnV[57];
	m_A51 += gt[58];
	m_A51 += gt[59];
	m_A51 += gt[60];
	m_A51 += gt[61];
	m_A51 += gt[62];
	m_A49 += go[58];
	m_A48 += go[59];
	m_A50 += go[60];
	double RHS17 = Idr[58];
	RHS17 += Idr[59];
	RHS17 += Idr[60];
	RHS17 += Idr[61];
	RHS17 += Idr[62];
	RHS17 -= go[61] * *cnV[61];
	RHS17 -= go[62] * *cnV[62];
	m_A61 += gt[63];
	m_A61 += gt[64];
	m_A61 += gt[65];
	m_A61 += gt[66];
	m_A61 += gt[67];
	m_A61 += gt[68];
	m_A59 += go[63];
	m_A56 += go[64];
	m_A57 += go[65];
	m_A54 += go[66];
	m_A53 += go[67];
	double RHS18 = Idr[63];
	RHS18 += Idr[64];
	RHS18 += Idr[65];
	RHS18 += Idr[66];
	RHS18 += Idr[67];
	RHS18 += Idr[68];
	RHS18 -= go[68] * *cnV[68];
	const double f0 = 1.0 / m_A0;
	const double f0_12 = -f0 * m_A27;
	m_A30 += m_A1 * f0_12;
	RHS12 += f0_12 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_12 = -f1 * m_A28;
	m_A30 += m_A3 * f1_12;
	RHS12 += f1_12 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_15 = -f2 * m_A38;
	m_A42 += m_A5 * f2_15;
	RHS15 += f2_15 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_15 = -f3 * m_A39;
	m_A42 += m_A7 * f3_15;
	RHS15 += f3_15 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_15 = -f4 * m_A40;
	m_A42 += m_A9 * f4_15;
	RHS15 += f4_15 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_14 = -f5 * m_A35;
	m_A36 += m_A11 * f5_14;
	RHS14 += f5_14 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_10 = -f6 * m_A22;
	m_A24 += m_A13 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f6_17 = -f6 * m_A48;
	m_A51 += m_A13 * f6_17;
	RHS17 += f6_17 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_12 = -f7 * m_A29;
	m_A30 += m_A15 * f7_12;
	m_A31 += m_A16 * f7_12;
	RHS12 += f7_12 * RHS7;
	const double f7_18 = -f7 * m_A53;
	m_A55 += m_A15 * f7_18;
	m_A61 += m_A16 * f7_18;
	RHS18 += f7_18 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_15 = -f8 * m_A41;
	m_A42 += m_A18 * f8_15;
	m_A43 += m_A19 * f8_15;
	RHS15 += f8_15 * RHS8;
	const double f8_18 = -f8 * m_A54;
	m_A58 += m_A18 * f8_18;
	m_A61 += m_A19 * f8_18;
	RHS18 += f8_18 * RHS8;
	const double f9 = 1.0 / m_A20;
	const double f9_16 = -f9 * m_A44;
	m_A46 += m_A21 * f9_16;
	RHS16 += f9_16 * RHS9;
	const double f10 = 1.0 / m_A23;
	const double f10_17 = -f10 * m_A49;
	m_A51 += m_A24 * f10_17;
	RHS17 += f10_17 * RHS10;
	const double f11 = 1.0 / m_A25;
	const double f11_16 = -f11 * m_A45;
	m_A47 += m_A26 * f11_16;
	RHS16 += f11_16 * RHS11;
	const double f12 = 1.0 / m_A30;
	const double f12_18 = -f12 * m_A55;
	m_A61 += m_A31 * f12_18;
	RHS18 += f12_18 * RHS12;
	const double f13 = 1.0 / m_A32;
	const double f13_17 = -f13 * m_A50;
	m_A51 += m_A33 * f13_17;
	m_A52 += m_A34 * f13_17;
	RHS17 += f13_17 * RHS13;
	const double f13_18 = -f13 * m_A56;
	m_A60 += m_A33 * f13_18;
	m_A61 += m_A34 * f13_18;
	RHS18 += f13_18 * RHS13;
	const double f14 = 1.0 / m_A36;
	const double f14_18 = -f14 * m_A57;
	m_A61 += m_A37 * f14_18;
	RHS18 += f14_18 * RHS14;
	const double f15 = 1.0 / m_A42;
	const double f15_18 = -f15 * m_A58;
	m_A61 += m_A43 * f15_18;
	RHS18 += f15_18 * RHS15;
	const double f16 = 1.0 / m_A46;
	const double f16_18 = -f16 * m_A59;
	m_A61 += m_A47 * f16_18;
	RHS18 += f16_18 * RHS16;
	const double f17 = 1.0 / m_A51;
	const double f17_18 = -f17 * m_A60;
	m_A61 += m_A52 * f17_18;
	RHS18 += f17_18 * RHS17;
	V[18] = RHS18 / m_A61;
	double tmp17 = 0.0;
	tmp17 += m_A52 * V[18];
	V[17] = (RHS17 - tmp17) / m_A51;
	double tmp16 = 0.0;
	tmp16 += m_A47 * V[18];
	V[16] = (RHS16 - tmp16) / m_A46;
	double tmp15 = 0.0;
	tmp15 += m_A43 * V[18];
	V[15] = (RHS15 - tmp15) / m_A42;
	double tmp14 = 0.0;
	tmp14 += m_A37 * V[18];
	V[14] = (RHS14 - tmp14) / m_A36;
	double tmp13 = 0.0;
	tmp13 += m_A33 * V[17];
	tmp13 += m_A34 * V[18];
	V[13] = (RHS13 - tmp13) / m_A32;
	double tmp12 = 0.0;
	tmp12 += m_A31 * V[18];
	V[12] = (RHS12 - tmp12) / m_A30;
	double tmp11 = 0.0;
	tmp11 += m_A26 * V[18];
	V[11] = (RHS11 - tmp11) / m_A25;
	double tmp10 = 0.0;
	tmp10 += m_A24 * V[17];
	V[10] = (RHS10 - tmp10) / m_A23;
	double tmp9 = 0.0;
	tmp9 += m_A21 * V[16];
	V[9] = (RHS9 - tmp9) / m_A20;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[15];
	tmp8 += m_A19 * V[18];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[12];
	tmp7 += m_A16 * V[18];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[17];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[14];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[15];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[15];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[15];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[12];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[12];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_a6b734322b3ea924_22_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A3 += go[5];
	double RHS1 = Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[6] * *cnV[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A4 += gt[13];
	m_A4 += gt[14];
	m_A7 += go[7];
	m_A6 += go[8];
	m_A6 += go[9];
	m_A5 += go[10];
	m_A5 += go[11];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	RHS2 -= go[14] * *cnV[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A8 += go[15];
	m_A9 += go[16];
	m_A9 += go[17];
	double RHS3 = Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A15 += gt[22];
	m_A15 += gt[23];
	m_A15 += gt[24];
	m_A16 += go[20];
	m_A16 += go[21];
	m_A13 += go[22];
	m_A13 += go[23];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 -= go[24] * *cnV[24];
	m_A21 += gt[25];
	m_A21 += gt[26];
	m_A21 += gt[27];
	m_A21 += gt[28];
	m_A21 += gt[29];
	m_A20 += go[25];
	m_A20 += go[26];
	m_A18 += go[27];
	m_A17 += go[28];
	double RHS5 = Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 -= go[29] * *cnV[29];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A17;
	m_A21 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A9;
	m_A10 += m_A5 * f2_3;
	m_A11 += m_A6 * f2_3;
	m_A12 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	const double f2_4 = -f2 * m_A13;
	m_A14 += m_A5 * f2_4;
	m_A15 += m_A6 * f2_4;
	m_A16 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A18;
	m_A19 += m_A5 * f2_5;
	m_A20 += m_A6 * f2_5;
	m_A21 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_4 = -f3 * m_A14;
	m_A15 += m_A11 * f3_4;
	m_A16 += m_A12 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A19;
	m_A20 += m_A11 * f3_5;
	m_A21 += m_A12 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A15;
	const double f4_5 = -f4 * m_A20;
	m_A21 += m_A16 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A21;
	double tmp4 = 0.0;
	tmp4 += m_A16 * V[5];
	V[4] = (RHS4 - tmp4) / m_A15;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[4];
	tmp3 += m_A12 * V[5];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// armora
static void nl_gcr_a6cfda6668b153c2_22_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A4 += gt[13];
	m_A7 += go[6];
	m_A6 += go[7];
	m_A6 += go[8];
	m_A5 += go[9];
	m_A5 += go[10];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A9 += go[14];
	m_A9 += go[15];
	m_A8 += go[16];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A15 += gt[22];
	m_A15 += gt[23];
	m_A15 += gt[24];
	m_A16 += go[20];
	m_A16 += go[21];
	m_A13 += go[22];
	m_A13 += go[23];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 -= go[24] * *cnV[24];
	m_A21 += gt[25];
	m_A21 += gt[26];
	m_A21 += gt[27];
	m_A21 += gt[28];
	m_A20 += go[25];
	m_A20 += go[26];
	m_A18 += go[27];
	m_A17 += go[28];
	double RHS5 = Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A17;
	m_A21 += m_A3 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A9;
	m_A10 += m_A5 * f2_3;
	m_A11 += m_A6 * f2_3;
	m_A12 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	const double f2_4 = -f2 * m_A13;
	m_A14 += m_A5 * f2_4;
	m_A15 += m_A6 * f2_4;
	m_A16 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A18;
	m_A19 += m_A5 * f2_5;
	m_A20 += m_A6 * f2_5;
	m_A21 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_4 = -f3 * m_A14;
	m_A15 += m_A11 * f3_4;
	m_A16 += m_A12 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A19;
	m_A20 += m_A11 * f3_5;
	m_A21 += m_A12 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A15;
	const double f4_5 = -f4 * m_A20;
	m_A21 += m_A16 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A21;
	double tmp4 = 0.0;
	tmp4 += m_A16 * V[5];
	V[4] = (RHS4 - tmp4) / m_A15;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[4];
	tmp3 += m_A12 * V[5];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_a6f74be7f61e6db2_29_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A4 += go[3];
	m_A3 += go[4];
	m_A3 += go[5];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	m_A5 += gt[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A7 += go[9];
	m_A6 += go[10];
	m_A6 += go[11];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[12] * *cnV[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A9 += go[13];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[14] * *cnV[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A11 += go[15];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 -= go[16] * *cnV[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A14 += gt[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A14 += gt[22];
	m_A13 += go[17];
	m_A13 += go[18];
	m_A12 += go[19];
	double RHS5 = Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	m_A19 += gt[23];
	m_A19 += gt[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A19 += gt[27];
	m_A17 += go[23];
	m_A17 += go[24];
	m_A16 += go[25];
	double RHS6 = Idr[23];
	RHS6 += Idr[24];
	RHS6 += Idr[25];
	RHS6 += Idr[26];
	RHS6 += Idr[27];
	RHS6 -= go[26] * *cnV[26];
	RHS6 -= go[27] * *cnV[27];
	m_A24 += gt[28];
	m_A24 += gt[29];
	m_A24 += gt[30];
	m_A24 += gt[31];
	m_A24 += gt[32];
	m_A24 += gt[33];
	m_A22 += go[28];
	m_A25 += go[29];
	m_A21 += go[30];
	double RHS7 = Idr[28];
	RHS7 += Idr[29];
	RHS7 += Idr[30];
	RHS7 += Idr[31];
	RHS7 += Idr[32];
	RHS7 += Idr[33];
	RHS7 -= go[31] * *cnV[31];
	RHS7 -= go[32] * *cnV[32];
	RHS7 -= go[33] * *cnV[33];
	m_A28 += gt[34];
	m_A28 += gt[35];
	m_A26 += go[34];
	m_A27 += go[35];
	double RHS8 = Idr[34];
	RHS8 += Idr[35];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A12;
	m_A14 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A13;
	m_A14 += m_A3 * f1_5;
	m_A15 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f1_6 = -f1 * m_A16;
	m_A18 += m_A3 * f1_6;
	m_A19 += m_A4 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_6 = -f2 * m_A17;
	m_A19 += m_A6 * f2_6;
	m_A20 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f2_7 = -f2 * m_A21;
	m_A23 += m_A6 * f2_7;
	m_A24 += m_A7 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_7 = -f3 * m_A22;
	m_A24 += m_A9 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f4 = 1.0 / m_A10;
	const double f4_8 = -f4 * m_A26;
	m_A28 += m_A11 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f5 = 1.0 / m_A14;
	const double f5_6 = -f5 * m_A18;
	m_A19 += m_A15 * f5_6;
	RHS6 += f5_6 * RHS5;
	const double f6 = 1.0 / m_A19;
	const double f6_7 = -f6 * m_A23;
	m_A24 += m_A20 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f7 = 1.0 / m_A24;
	const double f7_8 = -f7 * m_A27;
	m_A28 += m_A25 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A28;
	double tmp7 = 0.0;
	tmp7 += m_A25 * V[8];
	V[7] = (RHS7 - tmp7) / m_A24;
	double tmp6 = 0.0;
	tmp6 += m_A20 * V[7];
	V[6] = (RHS6 - tmp6) / m_A19;
	double tmp5 = 0.0;
	tmp5 += m_A15 * V[6];
	V[5] = (RHS5 - tmp5) / m_A14;
	double tmp4 = 0.0;
	tmp4 += m_A11 * V[8];
	V[4] = (RHS4 - tmp4) / m_A10;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[7];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[6];
	tmp2 += m_A7 * V[7];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	tmp1 += m_A4 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// breakout
static void nl_gcr_a971eeb2ef76f75f_13_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A11 += go[12];
	m_A10 += go[13];
	m_A9 += go[14];
	m_A8 += go[15];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A8;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A9;
	m_A12 += m_A3 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A10;
	m_A12 += m_A5 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_4 = -f3 * m_A11;
	m_A12 += m_A7 * f3_4;
	RHS4 += f3_4 * RHS3;
	V[4] = RHS4 / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[4];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_aa07266ef5d420d1_11_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A6 += gt[4];
	m_A6 += gt[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A7 += go[4];
	m_A5 += go[5];
	m_A4 += go[6];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A10 += gt[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A10 += gt[12];
	m_A10 += gt[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A8 += go[9];
	m_A9 += go[10];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A8;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A9;
	m_A10 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// sundance
static void nl_gcr_ad6dba01ff2425c3_12_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A4 += go[2];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[7];
	m_A7 += go[8];
	m_A5 += go[9];
	m_A5 += go[10];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A11 += gt[12];
	m_A11 += gt[13];
	m_A11 += gt[14];
	m_A11 += gt[15];
	m_A11 += gt[16];
	m_A10 += go[12];
	m_A10 += go[13];
	m_A9 += go[14];
	m_A8 += go[15];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[16] * *cnV[16];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A11 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	m_A7 += m_A4 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_3 = -f2 * m_A10;
	m_A11 += m_A7 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[3];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// rebound
static void nl_gcr_ae15f7f8a55fc96_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A5 += go[6];
	m_A4 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// armora
static void nl_gcr_afcde432efdafb81_56_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A9 += go[12];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	RHS4 -= go[15] * *cnV[15];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	m_A10 += gt[22];
	m_A10 += gt[23];
	m_A11 += go[22];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[23] * *cnV[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A14 += go[24];
	m_A13 += go[25];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	m_A15 += gt[26];
	m_A15 += gt[27];
	m_A17 += go[26];
	m_A16 += go[27];
	double RHS7 = Idr[26];
	RHS7 += Idr[27];
	m_A18 += gt[28];
	m_A18 += gt[29];
	m_A20 += go[28];
	m_A19 += go[29];
	double RHS8 = Idr[28];
	RHS8 += Idr[29];
	m_A21 += gt[30];
	m_A21 += gt[31];
	m_A21 += gt[32];
	m_A21 += gt[33];
	m_A21 += gt[34];
	m_A21 += gt[35];
	m_A21 += gt[36];
	m_A22 += go[30];
	double RHS9 = Idr[30];
	RHS9 += Idr[31];
	RHS9 += Idr[32];
	RHS9 += Idr[33];
	RHS9 += Idr[34];
	RHS9 += Idr[35];
	RHS9 += Idr[36];
	RHS9 -= go[31] * *cnV[31];
	RHS9 -= go[32] * *cnV[32];
	RHS9 -= go[33] * *cnV[33];
	RHS9 -= go[34] * *cnV[34];
	RHS9 -= go[35] * *cnV[35];
	RHS9 -= go[36] * *cnV[36];
	m_A25 += gt[37];
	m_A25 += gt[38];
	m_A25 += gt[39];
	m_A24 += go[37];
	m_A23 += go[38];
	double RHS10 = Idr[37];
	RHS10 += Idr[38];
	RHS10 += Idr[39];
	RHS10 -= go[39] * *cnV[39];
	m_A28 += gt[40];
	m_A28 += gt[41];
	m_A28 += gt[42];
	m_A28 += gt[43];
	m_A28 += gt[44];
	m_A28 += gt[45];
	m_A28 += gt[46];
	m_A29 += go[40];
	m_A27 += go[41];
	double RHS11 = Idr[40];
	RHS11 += Idr[41];
	RHS11 += Idr[42];
	RHS11 += Idr[43];
	RHS11 += Idr[44];
	RHS11 += Idr[45];
	RHS11 += Idr[46];
	RHS11 -= go[42] * *cnV[42];
	RHS11 -= go[43] * *cnV[43];
	RHS11 -= go[44] * *cnV[44];
	RHS11 -= go[45] * *cnV[45];
	RHS11 -= go[46] * *cnV[46];
	m_A31 += gt[47];
	m_A31 += gt[48];
	m_A32 += go[47];
	m_A30 += go[48];
	double RHS12 = Idr[47];
	RHS12 += Idr[48];
	m_A37 += gt[49];
	m_A37 += gt[50];
	m_A37 += gt[51];
	m_A37 += gt[52];
	m_A37 += gt[53];
	m_A36 += go[49];
	m_A35 += go[50];
	m_A34 += go[51];
	m_A33 += go[52];
	double RHS13 = Idr[49];
	RHS13 += Idr[50];
	RHS13 += Idr[51];
	RHS13 += Idr[52];
	RHS13 += Idr[53];
	RHS13 -= go[53] * *cnV[53];
	m_A42 += gt[54];
	m_A42 += gt[55];
	m_A42 += gt[56];
	m_A42 += gt[57];
	m_A42 += gt[58];
	m_A41 += go[54];
	m_A40 += go[55];
	m_A39 += go[56];
	double RHS14 = Idr[54];
	RHS14 += Idr[55];
	RHS14 += Idr[56];
	RHS14 += Idr[57];
	RHS14 += Idr[58];
	RHS14 -= go[57] * *cnV[57];
	RHS14 -= go[58] * *cnV[58];
	m_A45 += gt[59];
	m_A45 += gt[60];
	m_A45 += gt[61];
	m_A45 += gt[62];
	m_A44 += go[59];
	m_A46 += go[60];
	double RHS15 = Idr[59];
	RHS15 += Idr[60];
	RHS15 += Idr[61];
	RHS15 += Idr[62];
	RHS15 -= go[61] * *cnV[61];
	RHS15 -= go[62] * *cnV[62];
	m_A55 += gt[63];
	m_A55 += gt[64];
	m_A55 += gt[65];
	m_A55 += gt[66];
	m_A55 += gt[67];
	m_A55 += gt[68];
	m_A54 += go[63];
	m_A49 += go[64];
	m_A51 += go[65];
	m_A48 += go[66];
	m_A47 += go[67];
	double RHS16 = Idr[63];
	RHS16 += Idr[64];
	RHS16 += Idr[65];
	RHS16 += Idr[66];
	RHS16 += Idr[67];
	RHS16 += Idr[68];
	RHS16 -= go[68] * *cnV[68];
	const double f0 = 1.0 / m_A0;
	const double f0_10 = -f0 * m_A23;
	m_A25 += m_A1 * f0_10;
	RHS10 += f0_10 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_13 = -f1 * m_A33;
	m_A37 += m_A3 * f1_13;
	RHS13 += f1_13 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_13 = -f2 * m_A34;
	m_A37 += m_A5 * f2_13;
	RHS13 += f2_13 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_13 = -f3 * m_A35;
	m_A37 += m_A7 * f3_13;
	RHS13 += f3_13 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_11 = -f4 * m_A27;
	m_A29 += m_A9 * f4_11;
	RHS11 += f4_11 * RHS4;
	const double f4_14 = -f4 * m_A39;
	m_A42 += m_A9 * f4_14;
	RHS14 += f4_14 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_12 = -f5 * m_A30;
	m_A31 += m_A11 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_10 = -f6 * m_A24;
	m_A25 += m_A13 * f6_10;
	m_A26 += m_A14 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f6_16 = -f6 * m_A47;
	m_A50 += m_A13 * f6_16;
	m_A55 += m_A14 * f6_16;
	RHS16 += f6_16 * RHS6;
	const double f7 = 1.0 / m_A15;
	const double f7_13 = -f7 * m_A36;
	m_A37 += m_A16 * f7_13;
	m_A38 += m_A17 * f7_13;
	RHS13 += f7_13 * RHS7;
	const double f7_16 = -f7 * m_A48;
	m_A52 += m_A16 * f7_16;
	m_A55 += m_A17 * f7_16;
	RHS16 += f7_16 * RHS7;
	const double f8 = 1.0 / m_A18;
	const double f8_14 = -f8 * m_A40;
	m_A42 += m_A19 * f8_14;
	m_A43 += m_A20 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f8_16 = -f8 * m_A49;
	m_A53 += m_A19 * f8_16;
	m_A55 += m_A20 * f8_16;
	RHS16 += f8_16 * RHS8;
	const double f9 = 1.0 / m_A21;
	const double f9_15 = -f9 * m_A44;
	m_A46 += m_A22 * f9_15;
	RHS15 += f9_15 * RHS9;
	const double f10 = 1.0 / m_A25;
	const double f10_16 = -f10 * m_A50;
	m_A55 += m_A26 * f10_16;
	RHS16 += f10_16 * RHS10;
	const double f11 = 1.0 / m_A28;
	const double f11_14 = -f11 * m_A41;
	m_A42 += m_A29 * f11_14;
	RHS14 += f11_14 * RHS11;
	const double f12 = 1.0 / m_A31;
	const double f12_16 = -f12 * m_A51;
	m_A55 += m_A32 * f12_16;
	RHS16 += f12_16 * RHS12;
	const double f13 = 1.0 / m_A37;
	const double f13_16 = -f13 * m_A52;
	m_A55 += m_A38 * f13_16;
	RHS16 += f13_16 * RHS13;
	const double f14 = 1.0 / m_A42;
	const double f14_16 = -f14 * m_A53;
	m_A55 += m_A43 * f14_16;
	RHS16 += f14_16 * RHS14;
	const double f15 = 1.0 / m_A45;
	const double f15_16 = -f15 * m_A54;
	m_A55 += m_A46 * f15_16;
	RHS16 += f15_16 * RHS15;
	V[16] = RHS16 / m_A55;
	double tmp15 = 0.0;
	tmp15 += m_A46 * V[16];
	V[15] = (RHS15 - tmp15) / m_A45;
	double tmp14 = 0.0;
	tmp14 += m_A43 * V[16];
	V[14] = (RHS14 - tmp14) / m_A42;
	double tmp13 = 0.0;
	tmp13 += m_A38 * V[16];
	V[13] = (RHS13 - tmp13) / m_A37;
	double tmp12 = 0.0;
	tmp12 += m_A32 * V[16];
	V[12] = (RHS12 - tmp12) / m_A31;
	double tmp11 = 0.0;
	tmp11 += m_A29 * V[14];
	V[11] = (RHS11 - tmp11) / m_A28;
	double tmp10 = 0.0;
	tmp10 += m_A26 * V[16];
	V[10] = (RHS10 - tmp10) / m_A25;
	double tmp9 = 0.0;
	tmp9 += m_A22 * V[16];
	V[9] = (RHS9 - tmp9) / m_A21;
	double tmp8 = 0.0;
	tmp8 += m_A19 * V[14];
	tmp8 += m_A20 * V[16];
	V[8] = (RHS8 - tmp8) / m_A18;
	double tmp7 = 0.0;
	tmp7 += m_A16 * V[13];
	tmp7 += m_A17 * V[16];
	V[7] = (RHS7 - tmp7) / m_A15;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[10];
	tmp6 += m_A14 * V[16];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[12];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[14];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[13];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[13];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[13];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[10];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// mario
static void nl_gcr_afce66fb47d3c5f3_62_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A5 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A7 += go[7];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[8] * *cnV[8];
	RHS3 -= go[9] * *cnV[9];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A9 += go[14];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 -= go[15] * *cnV[15];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	m_A10 += gt[21];
	m_A10 += gt[22];
	m_A12 += go[21];
	m_A11 += go[22];
	double RHS5 = Idr[21];
	RHS5 += Idr[22];
	m_A13 += gt[23];
	m_A13 += gt[24];
	m_A13 += gt[25];
	m_A14 += go[23];
	double RHS6 = Idr[23];
	RHS6 += Idr[24];
	RHS6 += Idr[25];
	RHS6 -= go[24] * *cnV[24];
	RHS6 -= go[25] * *cnV[25];
	m_A15 += gt[26];
	m_A15 += gt[27];
	m_A16 += go[26];
	double RHS7 = Idr[26];
	RHS7 += Idr[27];
	RHS7 -= go[27] * *cnV[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A17 += gt[30];
	m_A17 += gt[31];
	m_A18 += go[28];
	double RHS8 = Idr[28];
	RHS8 += Idr[29];
	RHS8 += Idr[30];
	RHS8 += Idr[31];
	RHS8 -= go[29] * *cnV[29];
	RHS8 -= go[30] * *cnV[30];
	RHS8 -= go[31] * *cnV[31];
	m_A20 += gt[32];
	m_A20 += gt[33];
	m_A19 += go[32];
	double RHS9 = Idr[32];
	RHS9 += Idr[33];
	RHS9 -= go[33] * *cnV[33];
	m_A22 += gt[34];
	m_A22 += gt[35];
	m_A22 += gt[36];
	m_A22 += gt[37];
	m_A21 += go[34];
	m_A23 += go[35];
	double RHS10 = Idr[34];
	RHS10 += Idr[35];
	RHS10 += Idr[36];
	RHS10 += Idr[37];
	RHS10 -= go[36] * *cnV[36];
	RHS10 -= go[37] * *cnV[37];
	m_A27 += gt[38];
	m_A27 += gt[39];
	m_A27 += gt[40];
	m_A27 += gt[41];
	m_A27 += gt[42];
	m_A24 += go[38];
	m_A25 += go[39];
	m_A28 += go[40];
	double RHS11 = Idr[38];
	RHS11 += Idr[39];
	RHS11 += Idr[40];
	RHS11 += Idr[41];
	RHS11 += Idr[42];
	RHS11 -= go[41] * *cnV[41];
	RHS11 -= go[42] * *cnV[42];
	m_A32 += gt[43];
	m_A32 += gt[44];
	m_A31 += go[43];
	m_A30 += go[44];
	double RHS12 = Idr[43];
	RHS12 += Idr[44];
	m_A34 += gt[45];
	m_A34 += gt[46];
	m_A34 += gt[47];
	m_A34 += gt[48];
	m_A34 += gt[49];
	m_A34 += gt[50];
	m_A33 += go[45];
	m_A37 += go[46];
	m_A36 += go[47];
	double RHS13 = Idr[45];
	RHS13 += Idr[46];
	RHS13 += Idr[47];
	RHS13 += Idr[48];
	RHS13 += Idr[49];
	RHS13 += Idr[50];
	RHS13 -= go[48] * *cnV[48];
	RHS13 -= go[49] * *cnV[49];
	RHS13 -= go[50] * *cnV[50];
	m_A39 += gt[51];
	m_A39 += gt[52];
	m_A39 += gt[53];
	m_A39 += gt[54];
	m_A40 += go[51];
	m_A38 += go[52];
	double RHS14 = Idr[51];
	RHS14 += Idr[52];
	RHS14 += Idr[53];
	RHS14 += Idr[54];
	RHS14 -= go[53] * *cnV[53];
	RHS14 -= go[54] * *cnV[54];
	m_A46 += gt[55];
	m_A46 += gt[56];
	m_A46 += gt[57];
	m_A46 += gt[58];
	m_A46 += gt[59];
	m_A44 += go[55];
	m_A45 += go[56];
	m_A43 += go[57];
	m_A42 += go[58];
	m_A41 += go[59];
	double RHS15 = Idr[55];
	RHS15 += Idr[56];
	RHS15 += Idr[57];
	RHS15 += Idr[58];
	RHS15 += Idr[59];
	m_A53 += gt[60];
	m_A53 += gt[61];
	m_A53 += gt[62];
	m_A53 += gt[63];
	m_A50 += go[60];
	m_A54 += go[61];
	m_A48 += go[62];
	double RHS16 = Idr[60];
	RHS16 += Idr[61];
	RHS16 += Idr[62];
	RHS16 += Idr[63];
	RHS16 -= go[63] * *cnV[63];
	m_A61 += gt[64];
	m_A61 += gt[65];
	m_A61 += gt[66];
	m_A61 += gt[67];
	m_A61 += gt[68];
	m_A57 += go[64];
	m_A58 += go[65];
	m_A60 += go[66];
	m_A55 += go[67];
	m_A56 += go[68];
	double RHS17 = Idr[64];
	RHS17 += Idr[65];
	RHS17 += Idr[66];
	RHS17 += Idr[67];
	RHS17 += Idr[68];
	const double f0 = 1.0 / m_A0;
	const double f0_9 = -f0 * m_A19;
	m_A20 += m_A1 * f0_9;
	RHS9 += f0_9 * RHS0;
	const double f0_15 = -f0 * m_A41;
	m_A44 += m_A1 * f0_15;
	RHS15 += f0_15 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_10 = -f1 * m_A21;
	m_A23 += m_A3 * f1_10;
	RHS10 += f1_10 * RHS1;
	const double f1_15 = -f1 * m_A42;
	m_A46 += m_A3 * f1_15;
	RHS15 += f1_15 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_15 = -f2 * m_A43;
	m_A46 += m_A5 * f2_15;
	RHS15 += f2_15 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_11 = -f3 * m_A24;
	m_A26 += m_A7 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_13 = -f4 * m_A33;
	m_A35 += m_A9 * f4_13;
	RHS13 += f4_13 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_11 = -f5 * m_A25;
	m_A27 += m_A11 * f5_11;
	m_A29 += m_A12 * f5_11;
	RHS11 += f5_11 * RHS5;
	const double f5_16 = -f5 * m_A48;
	m_A49 += m_A11 * f5_16;
	m_A53 += m_A12 * f5_16;
	RHS16 += f5_16 * RHS5;
	const double f6 = 1.0 / m_A13;
	const double f6_14 = -f6 * m_A38;
	m_A40 += m_A14 * f6_14;
	RHS14 += f6_14 * RHS6;
	const double f6_17 = -f6 * m_A55;
	m_A61 += m_A14 * f6_17;
	RHS17 += f6_17 * RHS6;
	const double f7 = 1.0 / m_A15;
	const double f7_12 = -f7 * m_A30;
	m_A32 += m_A16 * f7_12;
	RHS12 += f7_12 * RHS7;
	const double f7_17 = -f7 * m_A56;
	m_A57 += m_A16 * f7_17;
	RHS17 += f7_17 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_12 = -f8 * m_A31;
	m_A32 += m_A18 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f9 = 1.0 / m_A20;
	const double f9_15 = -f9 * m_A44;
	RHS15 += f9_15 * RHS9;
	const double f10 = 1.0 / m_A22;
	const double f10_11 = -f10 * m_A26;
	m_A28 += m_A23 * f10_11;
	RHS11 += f10_11 * RHS10;
	const double f11 = 1.0 / m_A27;
	const double f11_15 = -f11 * m_A45;
	m_A46 += m_A28 * f11_15;
	m_A47 += m_A29 * f11_15;
	RHS15 += f11_15 * RHS11;
	const double f11_16 = -f11 * m_A49;
	m_A52 += m_A28 * f11_16;
	m_A53 += m_A29 * f11_16;
	RHS16 += f11_16 * RHS11;
	const double f12 = 1.0 / m_A32;
	const double f12_17 = -f12 * m_A57;
	RHS17 += f12_17 * RHS12;
	const double f13 = 1.0 / m_A34;
	const double f13_16 = -f13 * m_A50;
	m_A51 += m_A35 * f13_16;
	m_A53 += m_A36 * f13_16;
	m_A54 += m_A37 * f13_16;
	RHS16 += f13_16 * RHS13;
	const double f13_17 = -f13 * m_A58;
	m_A59 += m_A35 * f13_17;
	m_A60 += m_A36 * f13_17;
	m_A61 += m_A37 * f13_17;
	RHS17 += f13_17 * RHS13;
	const double f14 = 1.0 / m_A39;
	const double f14_16 = -f14 * m_A51;
	m_A54 += m_A40 * f14_16;
	RHS16 += f14_16 * RHS14;
	const double f14_17 = -f14 * m_A59;
	m_A61 += m_A40 * f14_17;
	RHS17 += f14_17 * RHS14;
	const double f15 = 1.0 / m_A46;
	const double f15_16 = -f15 * m_A52;
	m_A53 += m_A47 * f15_16;
	RHS16 += f15_16 * RHS15;
	const double f16 = 1.0 / m_A53;
	const double f16_17 = -f16 * m_A60;
	m_A61 += m_A54 * f16_17;
	RHS17 += f16_17 * RHS16;
	V[17] = RHS17 / m_A61;
	double tmp16 = 0.0;
	tmp16 += m_A54 * V[17];
	V[16] = (RHS16 - tmp16) / m_A53;
	double tmp15 = 0.0;
	tmp15 += m_A47 * V[16];
	V[15] = (RHS15 - tmp15) / m_A46;
	double tmp14 = 0.0;
	tmp14 += m_A40 * V[17];
	V[14] = (RHS14 - tmp14) / m_A39;
	double tmp13 = 0.0;
	tmp13 += m_A35 * V[14];
	tmp13 += m_A36 * V[16];
	tmp13 += m_A37 * V[17];
	V[13] = (RHS13 - tmp13) / m_A34;
	double tmp12 = 0.0;
	V[12] = (RHS12 - tmp12) / m_A32;
	double tmp11 = 0.0;
	tmp11 += m_A28 * V[15];
	tmp11 += m_A29 * V[16];
	V[11] = (RHS11 - tmp11) / m_A27;
	double tmp10 = 0.0;
	tmp10 += m_A23 * V[15];
	V[10] = (RHS10 - tmp10) / m_A22;
	double tmp9 = 0.0;
	V[9] = (RHS9 - tmp9) / m_A20;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[12];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A16 * V[12];
	V[7] = (RHS7 - tmp7) / m_A15;
	double tmp6 = 0.0;
	tmp6 += m_A14 * V[17];
	V[6] = (RHS6 - tmp6) / m_A13;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[11];
	tmp5 += m_A12 * V[16];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[14];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[10];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[15];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[15];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[9];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// spacewar
static void nl_gcr_b09deef9a25aecaf_24_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A9 += go[8];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 -= go[9] * *cnV[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A10 += gt[12];
	m_A12 += go[10];
	m_A11 += go[11];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 += Idr[12];
	RHS5 -= go[12] * *cnV[12];
	m_A19 += gt[13];
	m_A19 += gt[14];
	m_A19 += gt[15];
	m_A19 += gt[16];
	m_A19 += gt[17];
	m_A19 += gt[18];
	m_A17 += go[13];
	m_A16 += go[14];
	m_A15 += go[15];
	m_A14 += go[16];
	m_A13 += go[17];
	m_A18 += go[18];
	double RHS6 = Idr[13];
	RHS6 += Idr[14];
	RHS6 += Idr[15];
	RHS6 += Idr[16];
	RHS6 += Idr[17];
	RHS6 += Idr[18];
	m_A23 += gt[19];
	m_A23 += gt[20];
	m_A23 += gt[21];
	m_A21 += go[19];
	double RHS7 = Idr[19];
	RHS7 += Idr[20];
	RHS7 += Idr[21];
	RHS7 -= go[20] * *cnV[20];
	RHS7 -= go[21] * *cnV[21];
	const double f0 = 1.0 / m_A0;
	const double f0_6 = -f0 * m_A13;
	m_A19 += m_A1 * f0_6;
	RHS6 += f0_6 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_6 = -f1 * m_A14;
	m_A19 += m_A3 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_6 = -f2 * m_A15;
	m_A19 += m_A5 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_6 = -f3 * m_A16;
	m_A19 += m_A7 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_6 = -f4 * m_A17;
	m_A19 += m_A9 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_6 = -f5 * m_A18;
	m_A19 += m_A11 * f5_6;
	m_A20 += m_A12 * f5_6;
	RHS6 += f5_6 * RHS5;
	const double f5_7 = -f5 * m_A21;
	m_A22 += m_A11 * f5_7;
	m_A23 += m_A12 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A19;
	const double f6_7 = -f6 * m_A22;
	m_A23 += m_A20 * f6_7;
	RHS7 += f6_7 * RHS6;
	V[7] = RHS7 / m_A23;
	double tmp6 = 0.0;
	tmp6 += m_A20 * V[7];
	V[6] = (RHS6 - tmp6) / m_A19;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[6];
	tmp5 += m_A12 * V[7];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[6];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[6];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[6];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[6];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// breakout
static void nl_gcr_b66ff415b228d5f8_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[7] * *cnV[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A8 += go[8];
	m_A7 += go[9];
	m_A6 += go[10];
	double RHS3 = Idr[8];
	RHS3 += Idr[9];
	RHS3 += Idr[10];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A6;
	m_A9 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A5 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[3];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starcas
static void nl_gcr_b7344e05aac90017_65_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A3 += go[0];
	m_A2 += go[1];
	m_A1 += go[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[5];
	double RHS1 = Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A10 += go[12];
	m_A9 += go[13];
	m_A8 += go[14];
	m_A7 += go[15];
	double RHS2 = Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 += Idr[15];
	RHS2 += Idr[16];
	RHS2 -= go[16] * *cnV[16];
	m_A11 += gt[17];
	m_A11 += gt[18];
	m_A11 += gt[19];
	m_A12 += go[17];
	double RHS3 = Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A13 += gt[20];
	m_A13 += gt[21];
	m_A13 += gt[22];
	m_A13 += gt[23];
	m_A13 += gt[24];
	m_A13 += gt[25];
	m_A14 += go[20];
	m_A15 += go[21];
	m_A16 += go[22];
	m_A16 += go[23];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 += Idr[25];
	RHS4 -= go[24] * *cnV[24];
	RHS4 -= go[25] * *cnV[25];
	m_A17 += gt[26];
	m_A17 += gt[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A19 += go[26];
	m_A18 += go[27];
	double RHS5 = Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 -= go[28] * *cnV[28];
	RHS5 -= go[29] * *cnV[29];
	m_A22 += gt[30];
	m_A22 += gt[31];
	m_A22 += gt[32];
	m_A22 += gt[33];
	m_A21 += go[30];
	m_A20 += go[31];
	double RHS6 = Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 += Idr[33];
	RHS6 -= go[32] * *cnV[32];
	RHS6 -= go[33] * *cnV[33];
	m_A29 += gt[34];
	m_A29 += gt[35];
	m_A29 += gt[36];
	m_A29 += gt[37];
	m_A27 += go[34];
	m_A26 += go[35];
	double RHS7 = Idr[34];
	RHS7 += Idr[35];
	RHS7 += Idr[36];
	RHS7 += Idr[37];
	RHS7 -= go[36] * *cnV[36];
	RHS7 -= go[37] * *cnV[37];
	m_A36 += gt[38];
	m_A36 += gt[39];
	m_A36 += gt[40];
	m_A36 += gt[41];
	m_A33 += go[38];
	m_A32 += go[39];
	double RHS8 = Idr[38];
	RHS8 += Idr[39];
	RHS8 += Idr[40];
	RHS8 += Idr[41];
	RHS8 -= go[40] * *cnV[40];
	RHS8 -= go[41] * *cnV[41];
	m_A43 += gt[42];
	m_A43 += gt[43];
	m_A43 += gt[44];
	m_A43 += gt[45];
	m_A43 += gt[46];
	m_A38 += go[42];
	m_A44 += go[43];
	m_A39 += go[44];
	double RHS9 = Idr[42];
	RHS9 += Idr[43];
	RHS9 += Idr[44];
	RHS9 += Idr[45];
	RHS9 += Idr[46];
	RHS9 -= go[45] * *cnV[45];
	RHS9 -= go[46] * *cnV[46];
	m_A46 += gt[47];
	m_A46 += gt[48];
	m_A46 += gt[49];
	m_A46 += gt[50];
	m_A46 += gt[51];
	m_A46 += gt[52];
	m_A46 += gt[53];
	m_A45 += go[47];
	m_A47 += go[48];
	double RHS10 = Idr[47];
	RHS10 += Idr[48];
	RHS10 += Idr[49];
	RHS10 += Idr[50];
	RHS10 += Idr[51];
	RHS10 += Idr[52];
	RHS10 += Idr[53];
	RHS10 -= go[49] * *cnV[49];
	RHS10 -= go[50] * *cnV[50];
	RHS10 -= go[51] * *cnV[51];
	RHS10 -= go[52] * *cnV[52];
	RHS10 -= go[53] * *cnV[53];
	m_A51 += gt[54];
	m_A51 += gt[55];
	m_A51 += gt[56];
	m_A49 += go[54];
	m_A48 += go[55];
	double RHS11 = Idr[54];
	RHS11 += Idr[55];
	RHS11 += Idr[56];
	RHS11 -= go[56] * *cnV[56];
	m_A56 += gt[57];
	m_A56 += gt[58];
	m_A54 += go[57];
	double RHS12 = Idr[57];
	RHS12 += Idr[58];
	RHS12 -= go[58] * *cnV[58];
	m_A64 += gt[59];
	m_A64 += gt[60];
	m_A64 += gt[61];
	m_A64 += gt[62];
	m_A59 += go[59];
	m_A59 += go[60];
	m_A58 += go[61];
	m_A60 += go[62];
	double RHS13 = Idr[59];
	RHS13 += Idr[60];
	RHS13 += Idr[61];
	RHS13 += Idr[62];
	const double f0 = 1.0 / m_A0;
	const double f0_6 = -f0 * m_A20;
	m_A22 += m_A1 * f0_6;
	m_A23 += m_A2 * f0_6;
	m_A24 += m_A3 * f0_6;
	RHS6 += f0_6 * RHS0;
	const double f0_7 = -f0 * m_A26;
	m_A28 += m_A1 * f0_7;
	m_A29 += m_A2 * f0_7;
	m_A30 += m_A3 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f0_8 = -f0 * m_A32;
	m_A34 += m_A1 * f0_8;
	m_A35 += m_A2 * f0_8;
	m_A36 += m_A3 * f0_8;
	RHS8 += f0_8 * RHS0;
	const double f1 = 1.0 / m_A4;
	const double f1_9 = -f1 * m_A38;
	m_A39 += m_A5 * f1_9;
	RHS9 += f1_9 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_6 = -f2 * m_A21;
	m_A22 += m_A7 * f2_6;
	m_A23 += m_A8 * f2_6;
	m_A24 += m_A9 * f2_6;
	m_A25 += m_A10 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f2_7 = -f2 * m_A27;
	m_A28 += m_A7 * f2_7;
	m_A29 += m_A8 * f2_7;
	m_A30 += m_A9 * f2_7;
	m_A31 += m_A10 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f2_8 = -f2 * m_A33;
	m_A34 += m_A7 * f2_8;
	m_A35 += m_A8 * f2_8;
	m_A36 += m_A9 * f2_8;
	m_A37 += m_A10 * f2_8;
	RHS8 += f2_8 * RHS2;
	const double f2_9 = -f2 * m_A39;
	m_A40 += m_A7 * f2_9;
	m_A41 += m_A8 * f2_9;
	m_A42 += m_A9 * f2_9;
	m_A43 += m_A10 * f2_9;
	RHS9 += f2_9 * RHS2;
	const double f3 = 1.0 / m_A11;
	const double f3_10 = -f3 * m_A45;
	m_A47 += m_A12 * f3_10;
	RHS10 += f3_10 * RHS3;
	const double f3_13 = -f3 * m_A58;
	m_A64 += m_A12 * f3_13;
	RHS13 += f3_13 * RHS3;
	const double f4 = 1.0 / m_A13;
	const double f4_11 = -f4 * m_A48;
	m_A50 += m_A14 * f4_11;
	m_A51 += m_A15 * f4_11;
	m_A53 += m_A16 * f4_11;
	RHS11 += f4_11 * RHS4;
	const double f4_13 = -f4 * m_A59;
	m_A61 += m_A14 * f4_13;
	m_A62 += m_A15 * f4_13;
	m_A64 += m_A16 * f4_13;
	RHS13 += f4_13 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_11 = -f5 * m_A49;
	m_A51 += m_A18 * f5_11;
	m_A52 += m_A19 * f5_11;
	RHS11 += f5_11 * RHS5;
	const double f5_12 = -f5 * m_A54;
	m_A55 += m_A18 * f5_12;
	m_A56 += m_A19 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f6 = 1.0 / m_A22;
	const double f6_7 = -f6 * m_A28;
	m_A29 += m_A23 * f6_7;
	m_A30 += m_A24 * f6_7;
	m_A31 += m_A25 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f6_8 = -f6 * m_A34;
	m_A35 += m_A23 * f6_8;
	m_A36 += m_A24 * f6_8;
	m_A37 += m_A25 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f6_9 = -f6 * m_A40;
	m_A41 += m_A23 * f6_9;
	m_A42 += m_A24 * f6_9;
	m_A43 += m_A25 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f7 = 1.0 / m_A29;
	const double f7_8 = -f7 * m_A35;
	m_A36 += m_A30 * f7_8;
	m_A37 += m_A31 * f7_8;
	RHS8 += f7_8 * RHS7;
	const double f7_9 = -f7 * m_A41;
	m_A42 += m_A30 * f7_9;
	m_A43 += m_A31 * f7_9;
	RHS9 += f7_9 * RHS7;
	const double f8 = 1.0 / m_A36;
	const double f8_9 = -f8 * m_A42;
	m_A43 += m_A37 * f8_9;
	RHS9 += f8_9 * RHS8;
	const double f9 = 1.0 / m_A43;
	const double f9_13 = -f9 * m_A60;
	m_A64 += m_A44 * f9_13;
	RHS13 += f9_13 * RHS9;
	const double f10 = 1.0 / m_A46;
	const double f10_11 = -f10 * m_A50;
	m_A53 += m_A47 * f10_11;
	RHS11 += f10_11 * RHS10;
	const double f10_13 = -f10 * m_A61;
	m_A64 += m_A47 * f10_13;
	RHS13 += f10_13 * RHS10;
	const double f11 = 1.0 / m_A51;
	const double f11_12 = -f11 * m_A55;
	m_A56 += m_A52 * f11_12;
	m_A57 += m_A53 * f11_12;
	RHS12 += f11_12 * RHS11;
	const double f11_13 = -f11 * m_A62;
	m_A63 += m_A52 * f11_13;
	m_A64 += m_A53 * f11_13;
	RHS13 += f11_13 * RHS11;
	const double f12 = 1.0 / m_A56;
	const double f12_13 = -f12 * m_A63;
	m_A64 += m_A57 * f12_13;
	RHS13 += f12_13 * RHS12;
	V[13] = RHS13 / m_A64;
	double tmp12 = 0.0;
	tmp12 += m_A57 * V[13];
	V[12] = (RHS12 - tmp12) / m_A56;
	double tmp11 = 0.0;
	tmp11 += m_A52 * V[12];
	tmp11 += m_A53 * V[13];
	V[11] = (RHS11 - tmp11) / m_A51;
	double tmp10 = 0.0;
	tmp10 += m_A47 * V[13];
	V[10] = (RHS10 - tmp10) / m_A46;
	double tmp9 = 0.0;
	tmp9 += m_A44 * V[13];
	V[9] = (RHS9 - tmp9) / m_A43;
	double tmp8 = 0.0;
	tmp8 += m_A37 * V[9];
	V[8] = (RHS8 - tmp8) / m_A36;
	double tmp7 = 0.0;
	tmp7 += m_A30 * V[8];
	tmp7 += m_A31 * V[9];
	V[7] = (RHS7 - tmp7) / m_A29;
	double tmp6 = 0.0;
	tmp6 += m_A23 * V[7];
	tmp6 += m_A24 * V[8];
	tmp6 += m_A25 * V[9];
	V[6] = (RHS6 - tmp6) / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[11];
	tmp5 += m_A19 * V[12];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A14 * V[10];
	tmp4 += m_A15 * V[11];
	tmp4 += m_A16 * V[13];
	V[4] = (RHS4 - tmp4) / m_A13;
	double tmp3 = 0.0;
	tmp3 += m_A12 * V[13];
	V[3] = (RHS3 - tmp3) / m_A11;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[6];
	tmp2 += m_A8 * V[7];
	tmp2 += m_A9 * V[8];
	tmp2 += m_A10 * V[9];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A5 * V[2];
	V[1] = (RHS1 - tmp1) / m_A4;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[6];
	tmp0 += m_A2 * V[7];
	tmp0 += m_A3 * V[8];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_b8d6d148a50bdb8f_55_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A2 += gt[11];
	m_A5 += go[4];
	m_A4 += go[5];
	m_A4 += go[6];
	m_A3 += go[7];
	m_A3 += go[8];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A8 += go[12];
	m_A7 += go[13];
	double RHS2 = Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 -= go[14] * *cnV[14];
	m_A9 += gt[15];
	m_A9 += gt[16];
	m_A9 += gt[17];
	m_A9 += gt[18];
	m_A10 += go[15];
	double RHS3 = Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 -= go[16] * *cnV[16];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	m_A11 += gt[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A11 += gt[22];
	m_A11 += gt[23];
	m_A11 += gt[24];
	m_A11 += gt[25];
	m_A11 += gt[26];
	m_A14 += go[19];
	m_A13 += go[20];
	m_A13 += go[21];
	m_A12 += go[22];
	m_A12 += go[23];
	double RHS4 = Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 += Idr[25];
	RHS4 += Idr[26];
	RHS4 -= go[24] * *cnV[24];
	RHS4 -= go[25] * *cnV[25];
	RHS4 -= go[26] * *cnV[26];
	m_A15 += gt[27];
	m_A15 += gt[28];
	m_A15 += gt[29];
	m_A17 += go[27];
	m_A16 += go[28];
	double RHS5 = Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 -= go[29] * *cnV[29];
	m_A20 += gt[30];
	m_A20 += gt[31];
	m_A20 += gt[32];
	m_A20 += gt[33];
	m_A20 += gt[34];
	m_A20 += gt[35];
	m_A19 += go[30];
	m_A19 += go[31];
	m_A18 += go[32];
	double RHS6 = Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 += Idr[33];
	RHS6 += Idr[34];
	RHS6 += Idr[35];
	RHS6 -= go[33] * *cnV[33];
	RHS6 -= go[34] * *cnV[34];
	RHS6 -= go[35] * *cnV[35];
	m_A25 += gt[36];
	m_A25 += gt[37];
	m_A25 += gt[38];
	m_A25 += gt[39];
	m_A25 += gt[40];
	m_A26 += go[36];
	m_A26 += go[37];
	m_A23 += go[38];
	m_A23 += go[39];
	double RHS7 = Idr[36];
	RHS7 += Idr[37];
	RHS7 += Idr[38];
	RHS7 += Idr[39];
	RHS7 += Idr[40];
	RHS7 -= go[40] * *cnV[40];
	m_A29 += gt[41];
	m_A29 += gt[42];
	m_A29 += gt[43];
	m_A29 += gt[44];
	m_A29 += gt[45];
	m_A29 += gt[46];
	m_A28 += go[41];
	m_A28 += go[42];
	m_A27 += go[43];
	double RHS8 = Idr[41];
	RHS8 += Idr[42];
	RHS8 += Idr[43];
	RHS8 += Idr[44];
	RHS8 += Idr[45];
	RHS8 += Idr[46];
	RHS8 -= go[44] * *cnV[44];
	RHS8 -= go[45] * *cnV[45];
	RHS8 -= go[46] * *cnV[46];
	m_A34 += gt[47];
	m_A34 += gt[48];
	m_A34 += gt[49];
	m_A34 += gt[50];
	m_A34 += gt[51];
	m_A35 += go[47];
	m_A35 += go[48];
	m_A32 += go[49];
	m_A32 += go[50];
	double RHS9 = Idr[47];
	RHS9 += Idr[48];
	RHS9 += Idr[49];
	RHS9 += Idr[50];
	RHS9 += Idr[51];
	RHS9 -= go[51] * *cnV[51];
	m_A38 += gt[52];
	m_A38 += gt[53];
	m_A38 += gt[54];
	m_A37 += go[52];
	m_A36 += go[53];
	double RHS10 = Idr[52];
	RHS10 += Idr[53];
	RHS10 += Idr[54];
	RHS10 -= go[54] * *cnV[54];
	m_A46 += gt[55];
	m_A46 += gt[56];
	m_A46 += gt[57];
	m_A46 += gt[58];
	m_A42 += go[55];
	m_A44 += go[56];
	m_A44 += go[57];
	m_A41 += go[58];
	double RHS11 = Idr[55];
	RHS11 += Idr[56];
	RHS11 += Idr[57];
	RHS11 += Idr[58];
	m_A54 += gt[59];
	m_A54 += gt[60];
	m_A54 += gt[61];
	m_A54 += gt[62];
	m_A49 += go[59];
	m_A51 += go[60];
	m_A51 += go[61];
	m_A48 += go[62];
	double RHS12 = Idr[59];
	RHS12 += Idr[60];
	RHS12 += Idr[61];
	RHS12 += Idr[62];
	const double f0 = 1.0 / m_A0;
	const double f0_6 = -f0 * m_A18;
	m_A20 += m_A1 * f0_6;
	RHS6 += f0_6 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_6 = -f1 * m_A19;
	m_A20 += m_A3 * f1_6;
	m_A21 += m_A4 * f1_6;
	m_A22 += m_A5 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f1_7 = -f1 * m_A23;
	m_A24 += m_A3 * f1_7;
	m_A25 += m_A4 * f1_7;
	m_A26 += m_A5 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f1_11 = -f1 * m_A41;
	m_A43 += m_A3 * f1_11;
	m_A44 += m_A4 * f1_11;
	m_A46 += m_A5 * f1_11;
	RHS11 += f1_11 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_10 = -f2 * m_A36;
	m_A38 += m_A7 * f2_10;
	m_A39 += m_A8 * f2_10;
	RHS10 += f2_10 * RHS2;
	const double f2_11 = -f2 * m_A42;
	m_A45 += m_A7 * f2_11;
	m_A46 += m_A8 * f2_11;
	RHS11 += f2_11 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_8 = -f3 * m_A27;
	m_A29 += m_A10 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_8 = -f4 * m_A28;
	m_A29 += m_A12 * f4_8;
	m_A30 += m_A13 * f4_8;
	m_A31 += m_A14 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f4_9 = -f4 * m_A32;
	m_A33 += m_A12 * f4_9;
	m_A34 += m_A13 * f4_9;
	m_A35 += m_A14 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f4_12 = -f4 * m_A48;
	m_A50 += m_A12 * f4_12;
	m_A51 += m_A13 * f4_12;
	m_A54 += m_A14 * f4_12;
	RHS12 += f4_12 * RHS4;
	const double f5 = 1.0 / m_A15;
	const double f5_10 = -f5 * m_A37;
	m_A38 += m_A16 * f5_10;
	m_A40 += m_A17 * f5_10;
	RHS10 += f5_10 * RHS5;
	const double f5_12 = -f5 * m_A49;
	m_A52 += m_A16 * f5_12;
	m_A54 += m_A17 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f6 = 1.0 / m_A20;
	const double f6_7 = -f6 * m_A24;
	m_A25 += m_A21 * f6_7;
	m_A26 += m_A22 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f6_11 = -f6 * m_A43;
	m_A44 += m_A21 * f6_11;
	m_A46 += m_A22 * f6_11;
	RHS11 += f6_11 * RHS6;
	const double f7 = 1.0 / m_A25;
	const double f7_11 = -f7 * m_A44;
	m_A46 += m_A26 * f7_11;
	RHS11 += f7_11 * RHS7;
	const double f8 = 1.0 / m_A29;
	const double f8_9 = -f8 * m_A33;
	m_A34 += m_A30 * f8_9;
	m_A35 += m_A31 * f8_9;
	RHS9 += f8_9 * RHS8;
	const double f8_12 = -f8 * m_A50;
	m_A51 += m_A30 * f8_12;
	m_A54 += m_A31 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f9 = 1.0 / m_A34;
	const double f9_12 = -f9 * m_A51;
	m_A54 += m_A35 * f9_12;
	RHS12 += f9_12 * RHS9;
	const double f10 = 1.0 / m_A38;
	const double f10_11 = -f10 * m_A45;
	m_A46 += m_A39 * f10_11;
	m_A47 += m_A40 * f10_11;
	RHS11 += f10_11 * RHS10;
	const double f10_12 = -f10 * m_A52;
	m_A53 += m_A39 * f10_12;
	m_A54 += m_A40 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f11 = 1.0 / m_A46;
	const double f11_12 = -f11 * m_A53;
	m_A54 += m_A47 * f11_12;
	RHS12 += f11_12 * RHS11;
	V[12] = RHS12 / m_A54;
	double tmp11 = 0.0;
	tmp11 += m_A47 * V[12];
	V[11] = (RHS11 - tmp11) / m_A46;
	double tmp10 = 0.0;
	tmp10 += m_A39 * V[11];
	tmp10 += m_A40 * V[12];
	V[10] = (RHS10 - tmp10) / m_A38;
	double tmp9 = 0.0;
	tmp9 += m_A35 * V[12];
	V[9] = (RHS9 - tmp9) / m_A34;
	double tmp8 = 0.0;
	tmp8 += m_A30 * V[9];
	tmp8 += m_A31 * V[12];
	V[8] = (RHS8 - tmp8) / m_A29;
	double tmp7 = 0.0;
	tmp7 += m_A26 * V[11];
	V[7] = (RHS7 - tmp7) / m_A25;
	double tmp6 = 0.0;
	tmp6 += m_A21 * V[7];
	tmp6 += m_A22 * V[11];
	V[6] = (RHS6 - tmp6) / m_A20;
	double tmp5 = 0.0;
	tmp5 += m_A16 * V[10];
	tmp5 += m_A17 * V[12];
	V[5] = (RHS5 - tmp5) / m_A15;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[8];
	tmp4 += m_A13 * V[9];
	tmp4 += m_A14 * V[12];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[8];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[10];
	tmp2 += m_A8 * V[11];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[6];
	tmp1 += m_A4 * V[7];
	tmp1 += m_A5 * V[11];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[6];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// 280zzzap
static void nl_gcr_bb501e6a23177009_57_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A7 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A9 += go[15];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[16] * *cnV[16];
	RHS4 -= go[17] * *cnV[17];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	m_A10 += gt[22];
	m_A10 += gt[23];
	m_A11 += go[22];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[23] * *cnV[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A14 += go[24];
	m_A13 += go[25];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	m_A15 += gt[26];
	m_A15 += gt[27];
	m_A16 += go[26];
	double RHS7 = Idr[26];
	RHS7 += Idr[27];
	RHS7 -= go[27] * *cnV[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A18 += go[28];
	double RHS8 = Idr[28];
	RHS8 += Idr[29];
	RHS8 -= go[29] * *cnV[29];
	m_A20 += gt[30];
	m_A20 += gt[31];
	m_A20 += gt[32];
	m_A20 += gt[33];
	m_A19 += go[30];
	double RHS9 = Idr[30];
	RHS9 += Idr[31];
	RHS9 += Idr[32];
	RHS9 += Idr[33];
	RHS9 -= go[31] * *cnV[31];
	RHS9 -= go[32] * *cnV[32];
	RHS9 -= go[33] * *cnV[33];
	m_A24 += gt[34];
	m_A24 += gt[35];
	m_A23 += go[34];
	m_A22 += go[35];
	double RHS10 = Idr[34];
	RHS10 += Idr[35];
	m_A27 += gt[36];
	m_A27 += gt[37];
	m_A27 += gt[38];
	m_A27 += gt[39];
	m_A26 += go[36];
	m_A28 += go[37];
	double RHS11 = Idr[36];
	RHS11 += Idr[37];
	RHS11 += Idr[38];
	RHS11 += Idr[39];
	RHS11 -= go[38] * *cnV[38];
	RHS11 -= go[39] * *cnV[39];
	m_A31 += gt[40];
	m_A31 += gt[41];
	m_A31 += gt[42];
	m_A31 += gt[43];
	m_A31 += gt[44];
	m_A31 += gt[45];
	m_A29 += go[40];
	m_A33 += go[41];
	m_A32 += go[42];
	double RHS12 = Idr[40];
	RHS12 += Idr[41];
	RHS12 += Idr[42];
	RHS12 += Idr[43];
	RHS12 += Idr[44];
	RHS12 += Idr[45];
	RHS12 -= go[43] * *cnV[43];
	RHS12 -= go[44] * *cnV[44];
	RHS12 -= go[45] * *cnV[45];
	m_A36 += gt[46];
	m_A36 += gt[47];
	m_A34 += go[46];
	double RHS13 = Idr[46];
	RHS13 += Idr[47];
	RHS13 -= go[47] * *cnV[47];
	m_A39 += gt[48];
	m_A39 += gt[49];
	m_A39 += gt[50];
	m_A38 += go[48];
	m_A37 += go[49];
	double RHS14 = Idr[48];
	RHS14 += Idr[49];
	RHS14 += Idr[50];
	RHS14 -= go[50] * *cnV[50];
	m_A41 += gt[51];
	m_A41 += gt[52];
	m_A41 += gt[53];
	m_A41 += gt[54];
	m_A40 += go[51];
	m_A42 += go[52];
	double RHS15 = Idr[51];
	RHS15 += Idr[52];
	RHS15 += Idr[53];
	RHS15 += Idr[54];
	RHS15 -= go[53] * *cnV[53];
	RHS15 -= go[54] * *cnV[54];
	m_A49 += gt[55];
	m_A49 += gt[56];
	m_A49 += gt[57];
	m_A49 += gt[58];
	m_A49 += gt[59];
	m_A44 += go[55];
	m_A47 += go[56];
	m_A46 += go[57];
	m_A43 += go[58];
	m_A45 += go[59];
	double RHS16 = Idr[55];
	RHS16 += Idr[56];
	RHS16 += Idr[57];
	RHS16 += Idr[58];
	RHS16 += Idr[59];
	m_A56 += gt[60];
	m_A56 += gt[61];
	m_A56 += gt[62];
	m_A56 += gt[63];
	m_A54 += go[60];
	m_A53 += go[61];
	m_A51 += go[62];
	m_A52 += go[63];
	double RHS17 = Idr[60];
	RHS17 += Idr[61];
	RHS17 += Idr[62];
	RHS17 += Idr[63];
	const double f0 = 1.0 / m_A0;
	const double f0_11 = -f0 * m_A26;
	m_A28 += m_A1 * f0_11;
	RHS11 += f0_11 * RHS0;
	const double f0_16 = -f0 * m_A43;
	m_A49 += m_A1 * f0_16;
	RHS16 += f0_16 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_16 = -f1 * m_A44;
	m_A49 += m_A3 * f1_16;
	RHS16 += f1_16 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_12 = -f2 * m_A29;
	m_A30 += m_A5 * f2_12;
	RHS12 += f2_12 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_15 = -f3 * m_A40;
	m_A42 += m_A7 * f3_15;
	RHS15 += f3_15 * RHS3;
	const double f3_17 = -f3 * m_A51;
	m_A56 += m_A7 * f3_17;
	RHS17 += f3_17 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_9 = -f4 * m_A19;
	m_A21 += m_A9 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_10 = -f5 * m_A22;
	m_A24 += m_A11 * f5_10;
	RHS10 += f5_10 * RHS5;
	const double f5_16 = -f5 * m_A45;
	m_A46 += m_A11 * f5_16;
	RHS16 += f5_16 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_10 = -f6 * m_A23;
	m_A24 += m_A13 * f6_10;
	m_A25 += m_A14 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f6_13 = -f6 * m_A34;
	m_A35 += m_A13 * f6_13;
	m_A36 += m_A14 * f6_13;
	RHS13 += f6_13 * RHS6;
	const double f7 = 1.0 / m_A15;
	const double f7_14 = -f7 * m_A37;
	m_A39 += m_A16 * f7_14;
	RHS14 += f7_14 * RHS7;
	const double f7_17 = -f7 * m_A52;
	m_A54 += m_A16 * f7_17;
	RHS17 += f7_17 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_14 = -f8 * m_A38;
	m_A39 += m_A18 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f10 = 1.0 / m_A24;
	const double f10_13 = -f10 * m_A35;
	m_A36 += m_A25 * f10_13;
	RHS13 += f10_13 * RHS10;
	const double f10_16 = -f10 * m_A46;
	m_A48 += m_A25 * f10_16;
	RHS16 += f10_16 * RHS10;
	const double f11 = 1.0 / m_A27;
	const double f11_12 = -f11 * m_A30;
	m_A32 += m_A28 * f11_12;
	RHS12 += f11_12 * RHS11;
	const double f12 = 1.0 / m_A31;
	const double f12_16 = -f12 * m_A47;
	m_A49 += m_A32 * f12_16;
	m_A50 += m_A33 * f12_16;
	RHS16 += f12_16 * RHS12;
	const double f12_17 = -f12 * m_A53;
	m_A55 += m_A32 * f12_17;
	m_A56 += m_A33 * f12_17;
	RHS17 += f12_17 * RHS12;
	const double f13 = 1.0 / m_A36;
	const double f13_16 = -f13 * m_A48;
	RHS16 += f13_16 * RHS13;
	const double f14 = 1.0 / m_A39;
	const double f14_17 = -f14 * m_A54;
	RHS17 += f14_17 * RHS14;
	const double f16 = 1.0 / m_A49;
	const double f16_17 = -f16 * m_A55;
	m_A56 += m_A50 * f16_17;
	RHS17 += f16_17 * RHS16;
	V[17] = RHS17 / m_A56;
	double tmp16 = 0.0;
	tmp16 += m_A50 * V[17];
	V[16] = (RHS16 - tmp16) / m_A49;
	double tmp15 = 0.0;
	tmp15 += m_A42 * V[17];
	V[15] = (RHS15 - tmp15) / m_A41;
	double tmp14 = 0.0;
	V[14] = (RHS14 - tmp14) / m_A39;
	double tmp13 = 0.0;
	V[13] = (RHS13 - tmp13) / m_A36;
	double tmp12 = 0.0;
	tmp12 += m_A32 * V[16];
	tmp12 += m_A33 * V[17];
	V[12] = (RHS12 - tmp12) / m_A31;
	double tmp11 = 0.0;
	tmp11 += m_A28 * V[16];
	V[11] = (RHS11 - tmp11) / m_A27;
	double tmp10 = 0.0;
	tmp10 += m_A25 * V[13];
	V[10] = (RHS10 - tmp10) / m_A24;
	double tmp9 = 0.0;
	tmp9 += m_A21 * V[15];
	V[9] = (RHS9 - tmp9) / m_A20;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[14];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A16 * V[14];
	V[7] = (RHS7 - tmp7) / m_A15;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[10];
	tmp6 += m_A14 * V[13];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[10];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[15];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[17];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[11];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[16];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[16];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_be7c805100c522fd_59_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 -= go[10] * *cnV[10];
	m_A8 += gt[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A9 += go[11];
	double RHS4 = Idr[11];
	RHS4 += Idr[12];
	RHS4 += Idr[13];
	RHS4 -= go[12] * *cnV[12];
	RHS4 -= go[13] * *cnV[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A12 += go[14];
	m_A11 += go[15];
	double RHS5 = Idr[14];
	RHS5 += Idr[15];
	m_A13 += gt[16];
	m_A13 += gt[17];
	m_A13 += gt[18];
	m_A14 += go[16];
	double RHS6 = Idr[16];
	RHS6 += Idr[17];
	RHS6 += Idr[18];
	RHS6 -= go[17] * *cnV[17];
	RHS6 -= go[18] * *cnV[18];
	m_A15 += gt[19];
	m_A15 += gt[20];
	m_A15 += gt[21];
	m_A16 += go[19];
	double RHS7 = Idr[19];
	RHS7 += Idr[20];
	RHS7 += Idr[21];
	RHS7 -= go[20] * *cnV[20];
	RHS7 -= go[21] * *cnV[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A17 += gt[24];
	m_A18 += go[22];
	double RHS8 = Idr[22];
	RHS8 += Idr[23];
	RHS8 += Idr[24];
	RHS8 -= go[23] * *cnV[23];
	RHS8 -= go[24] * *cnV[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A19 += gt[27];
	m_A20 += go[25];
	double RHS9 = Idr[25];
	RHS9 += Idr[26];
	RHS9 += Idr[27];
	RHS9 -= go[26] * *cnV[26];
	RHS9 -= go[27] * *cnV[27];
	m_A21 += gt[28];
	m_A21 += gt[29];
	m_A23 += go[28];
	m_A22 += go[29];
	double RHS10 = Idr[28];
	RHS10 += Idr[29];
	m_A24 += gt[30];
	m_A24 += gt[31];
	m_A24 += gt[32];
	m_A25 += go[30];
	double RHS11 = Idr[30];
	RHS11 += Idr[31];
	RHS11 += Idr[32];
	RHS11 -= go[31] * *cnV[31];
	RHS11 -= go[32] * *cnV[32];
	m_A26 += gt[33];
	m_A26 += gt[34];
	m_A26 += gt[35];
	m_A27 += go[33];
	double RHS12 = Idr[33];
	RHS12 += Idr[34];
	RHS12 += Idr[35];
	RHS12 -= go[34] * *cnV[34];
	RHS12 -= go[35] * *cnV[35];
	m_A28 += gt[36];
	m_A28 += gt[37];
	m_A28 += gt[38];
	m_A29 += go[36];
	double RHS13 = Idr[36];
	RHS13 += Idr[37];
	RHS13 += Idr[38];
	RHS13 -= go[37] * *cnV[37];
	RHS13 -= go[38] * *cnV[38];
	m_A35 += gt[39];
	m_A35 += gt[40];
	m_A35 += gt[41];
	m_A35 += gt[42];
	m_A35 += gt[43];
	m_A35 += gt[44];
	m_A34 += go[39];
	m_A33 += go[40];
	m_A32 += go[41];
	m_A31 += go[42];
	m_A30 += go[43];
	double RHS14 = Idr[39];
	RHS14 += Idr[40];
	RHS14 += Idr[41];
	RHS14 += Idr[42];
	RHS14 += Idr[43];
	RHS14 += Idr[44];
	RHS14 -= go[44] * *cnV[44];
	m_A38 += gt[45];
	m_A38 += gt[46];
	m_A37 += go[45];
	m_A39 += go[46];
	double RHS15 = Idr[45];
	RHS15 += Idr[46];
	m_A40 += gt[47];
	m_A40 += gt[48];
	m_A40 += gt[49];
	m_A41 += go[47];
	double RHS16 = Idr[47];
	RHS16 += Idr[48];
	RHS16 += Idr[49];
	RHS16 -= go[48] * *cnV[48];
	RHS16 -= go[49] * *cnV[49];
	m_A46 += gt[50];
	m_A46 += gt[51];
	m_A46 += gt[52];
	m_A43 += go[50];
	m_A45 += go[51];
	m_A42 += go[52];
	double RHS17 = Idr[50];
	RHS17 += Idr[51];
	RHS17 += Idr[52];
	m_A58 += gt[53];
	m_A58 += gt[54];
	m_A58 += gt[55];
	m_A58 += gt[56];
	m_A58 += gt[57];
	m_A58 += gt[58];
	m_A58 += gt[59];
	m_A58 += gt[60];
	m_A58 += gt[61];
	m_A58 += gt[62];
	m_A56 += go[53];
	m_A55 += go[54];
	m_A54 += go[55];
	m_A53 += go[56];
	m_A52 += go[57];
	m_A51 += go[58];
	m_A50 += go[59];
	m_A49 += go[60];
	m_A48 += go[61];
	double RHS18 = Idr[53];
	RHS18 += Idr[54];
	RHS18 += Idr[55];
	RHS18 += Idr[56];
	RHS18 += Idr[57];
	RHS18 += Idr[58];
	RHS18 += Idr[59];
	RHS18 += Idr[60];
	RHS18 += Idr[61];
	RHS18 += Idr[62];
	RHS18 -= go[62] * *cnV[62];
	const double f0 = 1.0 / m_A0;
	const double f0_14 = -f0 * m_A30;
	m_A35 += m_A1 * f0_14;
	RHS14 += f0_14 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_14 = -f1 * m_A31;
	m_A35 += m_A3 * f1_14;
	RHS14 += f1_14 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_14 = -f2 * m_A32;
	m_A35 += m_A5 * f2_14;
	RHS14 += f2_14 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_15 = -f3 * m_A37;
	m_A38 += m_A7 * f3_15;
	RHS15 += f3_15 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_14 = -f4 * m_A33;
	m_A35 += m_A9 * f4_14;
	RHS14 += f4_14 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_14 = -f5 * m_A34;
	m_A35 += m_A11 * f5_14;
	m_A36 += m_A12 * f5_14;
	RHS14 += f5_14 * RHS5;
	const double f5_17 = -f5 * m_A42;
	m_A44 += m_A11 * f5_17;
	m_A46 += m_A12 * f5_17;
	RHS17 += f5_17 * RHS5;
	const double f6 = 1.0 / m_A13;
	const double f6_18 = -f6 * m_A48;
	m_A58 += m_A14 * f6_18;
	RHS18 += f6_18 * RHS6;
	const double f7 = 1.0 / m_A15;
	const double f7_18 = -f7 * m_A49;
	m_A58 += m_A16 * f7_18;
	RHS18 += f7_18 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_18 = -f8 * m_A50;
	m_A58 += m_A18 * f8_18;
	RHS18 += f8_18 * RHS8;
	const double f9 = 1.0 / m_A19;
	const double f9_18 = -f9 * m_A51;
	m_A58 += m_A20 * f9_18;
	RHS18 += f9_18 * RHS9;
	const double f10 = 1.0 / m_A21;
	const double f10_17 = -f10 * m_A43;
	m_A46 += m_A22 * f10_17;
	m_A47 += m_A23 * f10_17;
	RHS17 += f10_17 * RHS10;
	const double f10_18 = -f10 * m_A52;
	m_A57 += m_A22 * f10_18;
	m_A58 += m_A23 * f10_18;
	RHS18 += f10_18 * RHS10;
	const double f11 = 1.0 / m_A24;
	const double f11_18 = -f11 * m_A53;
	m_A58 += m_A25 * f11_18;
	RHS18 += f11_18 * RHS11;
	const double f12 = 1.0 / m_A26;
	const double f12_18 = -f12 * m_A54;
	m_A58 += m_A27 * f12_18;
	RHS18 += f12_18 * RHS12;
	const double f13 = 1.0 / m_A28;
	const double f13_18 = -f13 * m_A55;
	m_A58 += m_A29 * f13_18;
	RHS18 += f13_18 * RHS13;
	const double f14 = 1.0 / m_A35;
	const double f14_17 = -f14 * m_A44;
	m_A46 += m_A36 * f14_17;
	RHS17 += f14_17 * RHS14;
	const double f15 = 1.0 / m_A38;
	const double f15_17 = -f15 * m_A45;
	m_A46 += m_A39 * f15_17;
	RHS17 += f15_17 * RHS15;
	const double f16 = 1.0 / m_A40;
	const double f16_18 = -f16 * m_A56;
	m_A58 += m_A41 * f16_18;
	RHS18 += f16_18 * RHS16;
	const double f17 = 1.0 / m_A46;
	const double f17_18 = -f17 * m_A57;
	m_A58 += m_A47 * f17_18;
	RHS18 += f17_18 * RHS17;
	V[18] = RHS18 / m_A58;
	double tmp17 = 0.0;
	tmp17 += m_A47 * V[18];
	V[17] = (RHS17 - tmp17) / m_A46;
	double tmp16 = 0.0;
	tmp16 += m_A41 * V[18];
	V[16] = (RHS16 - tmp16) / m_A40;
	double tmp15 = 0.0;
	tmp15 += m_A39 * V[17];
	V[15] = (RHS15 - tmp15) / m_A38;
	double tmp14 = 0.0;
	tmp14 += m_A36 * V[17];
	V[14] = (RHS14 - tmp14) / m_A35;
	double tmp13 = 0.0;
	tmp13 += m_A29 * V[18];
	V[13] = (RHS13 - tmp13) / m_A28;
	double tmp12 = 0.0;
	tmp12 += m_A27 * V[18];
	V[12] = (RHS12 - tmp12) / m_A26;
	double tmp11 = 0.0;
	tmp11 += m_A25 * V[18];
	V[11] = (RHS11 - tmp11) / m_A24;
	double tmp10 = 0.0;
	tmp10 += m_A22 * V[17];
	tmp10 += m_A23 * V[18];
	V[10] = (RHS10 - tmp10) / m_A21;
	double tmp9 = 0.0;
	tmp9 += m_A20 * V[18];
	V[9] = (RHS9 - tmp9) / m_A19;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[18];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A16 * V[18];
	V[7] = (RHS7 - tmp7) / m_A15;
	double tmp6 = 0.0;
	tmp6 += m_A14 * V[18];
	V[6] = (RHS6 - tmp6) / m_A13;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[14];
	tmp5 += m_A12 * V[17];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[14];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[15];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[14];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[14];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[14];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// warrior
static void nl_gcr_bff07f8d339f7cc4_89_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	m_A8 += go[7];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A11 += go[8];
	m_A10 += go[9];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	m_A12 += gt[10];
	m_A12 += gt[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A13 += go[10];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 += Idr[12];
	RHS5 += Idr[13];
	RHS5 += Idr[14];
	RHS5 += Idr[15];
	RHS5 += Idr[16];
	RHS5 -= go[11] * *cnV[11];
	RHS5 -= go[12] * *cnV[12];
	RHS5 -= go[13] * *cnV[13];
	RHS5 -= go[14] * *cnV[14];
	RHS5 -= go[15] * *cnV[15];
	RHS5 -= go[16] * *cnV[16];
	m_A14 += gt[17];
	m_A14 += gt[18];
	m_A16 += go[17];
	m_A15 += go[18];
	double RHS6 = Idr[17];
	RHS6 += Idr[18];
	m_A17 += gt[19];
	m_A17 += gt[20];
	m_A19 += go[19];
	m_A18 += go[20];
	double RHS7 = Idr[19];
	RHS7 += Idr[20];
	m_A20 += gt[21];
	m_A20 += gt[22];
	m_A21 += go[21];
	double RHS8 = Idr[21];
	RHS8 += Idr[22];
	RHS8 -= go[22] * *cnV[22];
	m_A22 += gt[23];
	m_A22 += gt[24];
	m_A22 += gt[25];
	m_A24 += go[23];
	m_A23 += go[24];
	double RHS9 = Idr[23];
	RHS9 += Idr[24];
	RHS9 += Idr[25];
	RHS9 -= go[25] * *cnV[25];
	m_A25 += gt[26];
	m_A25 += gt[27];
	m_A26 += go[26];
	double RHS10 = Idr[26];
	RHS10 += Idr[27];
	RHS10 -= go[27] * *cnV[27];
	m_A27 += gt[28];
	m_A27 += gt[29];
	m_A27 += gt[30];
	m_A28 += go[28];
	m_A29 += go[29];
	double RHS11 = Idr[28];
	RHS11 += Idr[29];
	RHS11 += Idr[30];
	RHS11 -= go[30] * *cnV[30];
	m_A32 += gt[31];
	m_A32 += gt[32];
	m_A32 += gt[33];
	m_A31 += go[31];
	m_A30 += go[32];
	double RHS12 = Idr[31];
	RHS12 += Idr[32];
	RHS12 += Idr[33];
	RHS12 -= go[33] * *cnV[33];
	m_A35 += gt[34];
	m_A35 += gt[35];
	m_A35 += gt[36];
	m_A34 += go[34];
	m_A37 += go[35];
	double RHS13 = Idr[34];
	RHS13 += Idr[35];
	RHS13 += Idr[36];
	RHS13 -= go[36] * *cnV[36];
	m_A40 += gt[37];
	m_A40 += gt[38];
	m_A40 += gt[39];
	m_A39 += go[37];
	m_A38 += go[38];
	double RHS14 = Idr[37];
	RHS14 += Idr[38];
	RHS14 += Idr[39];
	RHS14 -= go[39] * *cnV[39];
	m_A43 += gt[40];
	m_A43 += gt[41];
	m_A43 += gt[42];
	m_A44 += go[40];
	m_A42 += go[41];
	double RHS15 = Idr[40];
	RHS15 += Idr[41];
	RHS15 += Idr[42];
	RHS15 -= go[42] * *cnV[42];
	m_A47 += gt[43];
	m_A47 += gt[44];
	m_A47 += gt[45];
	m_A47 += gt[46];
	m_A49 += go[43];
	m_A49 += go[44];
	m_A45 += go[45];
	double RHS16 = Idr[43];
	RHS16 += Idr[44];
	RHS16 += Idr[45];
	RHS16 += Idr[46];
	RHS16 -= go[46] * *cnV[46];
	m_A52 += gt[47];
	m_A52 += gt[48];
	m_A50 += go[47];
	m_A53 += go[48];
	double RHS17 = Idr[47];
	RHS17 += Idr[48];
	m_A56 += gt[49];
	m_A56 += gt[50];
	m_A56 += gt[51];
	m_A55 += go[49];
	m_A54 += go[50];
	double RHS18 = Idr[49];
	RHS18 += Idr[50];
	RHS18 += Idr[51];
	RHS18 -= go[51] * *cnV[51];
	m_A62 += gt[52];
	m_A62 += gt[53];
	m_A62 += gt[54];
	m_A62 += gt[55];
	m_A58 += go[52];
	m_A59 += go[53];
	m_A60 += go[54];
	double RHS19 = Idr[52];
	RHS19 += Idr[53];
	RHS19 += Idr[54];
	RHS19 += Idr[55];
	RHS19 -= go[55] * *cnV[55];
	m_A69 += gt[56];
	m_A69 += gt[57];
	m_A69 += gt[58];
	m_A66 += go[56];
	m_A67 += go[57];
	double RHS20 = Idr[56];
	RHS20 += Idr[57];
	RHS20 += Idr[58];
	RHS20 -= go[58] * *cnV[58];
	m_A78 += gt[59];
	m_A78 += gt[60];
	m_A78 += gt[61];
	m_A78 += gt[62];
	m_A78 += gt[63];
	m_A78 += gt[64];
	m_A72 += go[59];
	m_A73 += go[60];
	m_A75 += go[61];
	m_A75 += go[62];
	double RHS21 = Idr[59];
	RHS21 += Idr[60];
	RHS21 += Idr[61];
	RHS21 += Idr[62];
	RHS21 += Idr[63];
	RHS21 += Idr[64];
	RHS21 -= go[63] * *cnV[63];
	RHS21 -= go[64] * *cnV[64];
	m_A88 += gt[65];
	m_A88 += gt[66];
	m_A88 += gt[67];
	m_A88 += gt[68];
	m_A88 += gt[69];
	m_A83 += go[65];
	m_A81 += go[66];
	m_A82 += go[67];
	m_A80 += go[68];
	double RHS22 = Idr[65];
	RHS22 += Idr[66];
	RHS22 += Idr[67];
	RHS22 += Idr[68];
	RHS22 += Idr[69];
	RHS22 -= go[69] * *cnV[69];
	const double f0 = 1.0 / m_A0;
	const double f0_12 = -f0 * m_A30;
	m_A32 += m_A1 * f0_12;
	RHS12 += f0_12 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_15 = -f1 * m_A42;
	m_A43 += m_A3 * f1_15;
	RHS15 += f1_15 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_22 = -f2 * m_A80;
	m_A88 += m_A5 * f2_22;
	RHS22 += f2_22 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_19 = -f3 * m_A58;
	m_A62 += m_A7 * f3_19;
	m_A65 += m_A8 * f3_19;
	RHS19 += f3_19 * RHS3;
	const double f3_22 = -f3 * m_A81;
	m_A85 += m_A7 * f3_22;
	m_A88 += m_A8 * f3_22;
	RHS22 += f3_22 * RHS3;
	const double f4 = 1.0 / m_A9;
	const double f4_13 = -f4 * m_A34;
	m_A35 += m_A10 * f4_13;
	m_A36 += m_A11 * f4_13;
	RHS13 += f4_13 * RHS4;
	const double f4_16 = -f4 * m_A45;
	m_A46 += m_A10 * f4_16;
	m_A47 += m_A11 * f4_16;
	RHS16 += f4_16 * RHS4;
	const double f5 = 1.0 / m_A12;
	const double f5_21 = -f5 * m_A72;
	m_A75 += m_A13 * f5_21;
	RHS21 += f5_21 * RHS5;
	const double f6 = 1.0 / m_A14;
	const double f6_12 = -f6 * m_A31;
	m_A32 += m_A15 * f6_12;
	m_A33 += m_A16 * f6_12;
	RHS12 += f6_12 * RHS6;
	const double f6_21 = -f6 * m_A73;
	m_A74 += m_A15 * f6_21;
	m_A78 += m_A16 * f6_21;
	RHS21 += f6_21 * RHS6;
	const double f7 = 1.0 / m_A17;
	const double f7_19 = -f7 * m_A59;
	m_A62 += m_A18 * f7_19;
	m_A63 += m_A19 * f7_19;
	RHS19 += f7_19 * RHS7;
	const double f7_20 = -f7 * m_A66;
	m_A68 += m_A18 * f7_20;
	m_A69 += m_A19 * f7_20;
	RHS20 += f7_20 * RHS7;
	const double f8 = 1.0 / m_A20;
	const double f8_14 = -f8 * m_A38;
	m_A40 += m_A21 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f9 = 1.0 / m_A22;
	const double f9_14 = -f9 * m_A39;
	m_A40 += m_A23 * f9_14;
	m_A41 += m_A24 * f9_14;
	RHS14 += f9_14 * RHS9;
	const double f9_17 = -f9 * m_A50;
	m_A51 += m_A23 * f9_17;
	m_A52 += m_A24 * f9_17;
	RHS17 += f9_17 * RHS9;
	const double f10 = 1.0 / m_A25;
	const double f10_18 = -f10 * m_A54;
	m_A56 += m_A26 * f10_18;
	RHS18 += f10_18 * RHS10;
	const double f11 = 1.0 / m_A27;
	const double f11_18 = -f11 * m_A55;
	m_A56 += m_A28 * f11_18;
	m_A57 += m_A29 * f11_18;
	RHS18 += f11_18 * RHS11;
	const double f11_22 = -f11 * m_A82;
	m_A84 += m_A28 * f11_22;
	m_A88 += m_A29 * f11_22;
	RHS22 += f11_22 * RHS11;
	const double f12 = 1.0 / m_A32;
	const double f12_21 = -f12 * m_A74;
	m_A78 += m_A33 * f12_21;
	RHS21 += f12_21 * RHS12;
	const double f13 = 1.0 / m_A35;
	const double f13_16 = -f13 * m_A46;
	m_A47 += m_A36 * f13_16;
	m_A48 += m_A37 * f13_16;
	RHS16 += f13_16 * RHS13;
	const double f13_19 = -f13 * m_A60;
	m_A61 += m_A36 * f13_19;
	m_A62 += m_A37 * f13_19;
	RHS19 += f13_19 * RHS13;
	const double f14 = 1.0 / m_A40;
	const double f14_17 = -f14 * m_A51;
	m_A52 += m_A41 * f14_17;
	RHS17 += f14_17 * RHS14;
	const double f15 = 1.0 / m_A43;
	const double f15_20 = -f15 * m_A67;
	m_A69 += m_A44 * f15_20;
	RHS20 += f15_20 * RHS15;
	const double f16 = 1.0 / m_A47;
	const double f16_19 = -f16 * m_A61;
	m_A62 += m_A48 * f16_19;
	m_A64 += m_A49 * f16_19;
	RHS19 += f16_19 * RHS16;
	const double f16_21 = -f16 * m_A75;
	m_A76 += m_A48 * f16_21;
	m_A78 += m_A49 * f16_21;
	RHS21 += f16_21 * RHS16;
	const double f17 = 1.0 / m_A52;
	const double f17_22 = -f17 * m_A83;
	m_A88 += m_A53 * f17_22;
	RHS22 += f17_22 * RHS17;
	const double f18 = 1.0 / m_A56;
	const double f18_22 = -f18 * m_A84;
	m_A88 += m_A57 * f18_22;
	RHS22 += f18_22 * RHS18;
	const double f19 = 1.0 / m_A62;
	const double f19_20 = -f19 * m_A68;
	m_A69 += m_A63 * f19_20;
	m_A70 += m_A64 * f19_20;
	m_A71 += m_A65 * f19_20;
	RHS20 += f19_20 * RHS19;
	const double f19_21 = -f19 * m_A76;
	m_A77 += m_A63 * f19_21;
	m_A78 += m_A64 * f19_21;
	m_A79 += m_A65 * f19_21;
	RHS21 += f19_21 * RHS19;
	const double f19_22 = -f19 * m_A85;
	m_A86 += m_A63 * f19_22;
	m_A87 += m_A64 * f19_22;
	m_A88 += m_A65 * f19_22;
	RHS22 += f19_22 * RHS19;
	const double f20 = 1.0 / m_A69;
	const double f20_21 = -f20 * m_A77;
	m_A78 += m_A70 * f20_21;
	m_A79 += m_A71 * f20_21;
	RHS21 += f20_21 * RHS20;
	const double f20_22 = -f20 * m_A86;
	m_A87 += m_A70 * f20_22;
	m_A88 += m_A71 * f20_22;
	RHS22 += f20_22 * RHS20;
	const double f21 = 1.0 / m_A78;
	const double f21_22 = -f21 * m_A87;
	m_A88 += m_A79 * f21_22;
	RHS22 += f21_22 * RHS21;
	V[22] = RHS22 / m_A88;
	double tmp21 = 0.0;
	tmp21 += m_A79 * V[22];
	V[21] = (RHS21 - tmp21) / m_A78;
	double tmp20 = 0.0;
	tmp20 += m_A70 * V[21];
	tmp20 += m_A71 * V[22];
	V[20] = (RHS20 - tmp20) / m_A69;
	double tmp19 = 0.0;
	tmp19 += m_A63 * V[20];
	tmp19 += m_A64 * V[21];
	tmp19 += m_A65 * V[22];
	V[19] = (RHS19 - tmp19) / m_A62;
	double tmp18 = 0.0;
	tmp18 += m_A57 * V[22];
	V[18] = (RHS18 - tmp18) / m_A56;
	double tmp17 = 0.0;
	tmp17 += m_A53 * V[22];
	V[17] = (RHS17 - tmp17) / m_A52;
	double tmp16 = 0.0;
	tmp16 += m_A48 * V[19];
	tmp16 += m_A49 * V[21];
	V[16] = (RHS16 - tmp16) / m_A47;
	double tmp15 = 0.0;
	tmp15 += m_A44 * V[20];
	V[15] = (RHS15 - tmp15) / m_A43;
	double tmp14 = 0.0;
	tmp14 += m_A41 * V[17];
	V[14] = (RHS14 - tmp14) / m_A40;
	double tmp13 = 0.0;
	tmp13 += m_A36 * V[16];
	tmp13 += m_A37 * V[19];
	V[13] = (RHS13 - tmp13) / m_A35;
	double tmp12 = 0.0;
	tmp12 += m_A33 * V[21];
	V[12] = (RHS12 - tmp12) / m_A32;
	double tmp11 = 0.0;
	tmp11 += m_A28 * V[18];
	tmp11 += m_A29 * V[22];
	V[11] = (RHS11 - tmp11) / m_A27;
	double tmp10 = 0.0;
	tmp10 += m_A26 * V[18];
	V[10] = (RHS10 - tmp10) / m_A25;
	double tmp9 = 0.0;
	tmp9 += m_A23 * V[14];
	tmp9 += m_A24 * V[17];
	V[9] = (RHS9 - tmp9) / m_A22;
	double tmp8 = 0.0;
	tmp8 += m_A21 * V[14];
	V[8] = (RHS8 - tmp8) / m_A20;
	double tmp7 = 0.0;
	tmp7 += m_A18 * V[19];
	tmp7 += m_A19 * V[20];
	V[7] = (RHS7 - tmp7) / m_A17;
	double tmp6 = 0.0;
	tmp6 += m_A15 * V[12];
	tmp6 += m_A16 * V[21];
	V[6] = (RHS6 - tmp6) / m_A14;
	double tmp5 = 0.0;
	tmp5 += m_A13 * V[16];
	V[5] = (RHS5 - tmp5) / m_A12;
	double tmp4 = 0.0;
	tmp4 += m_A10 * V[13];
	tmp4 += m_A11 * V[16];
	V[4] = (RHS4 - tmp4) / m_A9;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[19];
	tmp3 += m_A8 * V[22];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[22];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[15];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[12];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// tailg
static void nl_gcr_c4cec7aed23b7b94_23_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A4 += go[2];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A5 += gt[7];
	m_A5 += gt[8];
	m_A5 += gt[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A7 += go[7];
	m_A6 += go[8];
	m_A6 += go[9];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A9 += gt[16];
	m_A9 += gt[17];
	m_A10 += go[13];
	m_A10 += go[14];
	m_A8 += go[15];
	m_A8 += go[16];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 -= go[17] * *cnV[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A12 += gt[21];
	m_A12 += gt[22];
	m_A13 += go[18];
	m_A13 += go[19];
	m_A11 += go[20];
	m_A11 += go[21];
	double RHS4 = Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 -= go[22] * *cnV[22];
	m_A17 += gt[23];
	m_A17 += gt[24];
	m_A17 += gt[25];
	m_A17 += gt[26];
	m_A17 += gt[27];
	m_A17 += gt[28];
	m_A18 += go[23];
	m_A16 += go[24];
	m_A16 += go[25];
	m_A15 += go[26];
	m_A14 += go[27];
	double RHS5 = Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 -= go[28] * *cnV[28];
	m_A22 += gt[29];
	m_A22 += gt[30];
	m_A22 += gt[31];
	m_A22 += gt[32];
	m_A20 += go[29];
	m_A20 += go[30];
	m_A19 += go[31];
	m_A21 += go[32];
	double RHS6 = Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A14;
	m_A17 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A8;
	m_A9 += m_A3 * f1_3;
	m_A10 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_5 = -f1 * m_A15;
	m_A16 += m_A3 * f1_5;
	m_A17 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A11;
	m_A12 += m_A6 * f2_4;
	m_A13 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_6 = -f2 * m_A19;
	m_A20 += m_A6 * f2_6;
	m_A22 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_5 = -f3 * m_A16;
	m_A17 += m_A10 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_6 = -f4 * m_A20;
	m_A22 += m_A13 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_6 = -f5 * m_A21;
	m_A22 += m_A18 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[6];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[6];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[5];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[6];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	tmp1 += m_A4 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// popeye
static void nl_gcr_c6f25bb06e161d1c_50_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A10 += go[9];
	m_A7 += go[10];
	m_A8 += go[11];
	m_A9 += go[12];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	m_A11 += gt[15];
	m_A11 += gt[16];
	m_A11 += gt[17];
	m_A11 += gt[18];
	m_A11 += gt[19];
	m_A13 += go[15];
	m_A13 += go[16];
	m_A12 += go[17];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A14 += gt[24];
	m_A16 += go[20];
	m_A15 += go[21];
	m_A15 += go[22];
	double RHS5 = Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 -= go[23] * *cnV[23];
	RHS5 -= go[24] * *cnV[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A19 += gt[27];
	m_A18 += go[25];
	m_A17 += go[26];
	double RHS6 = Idr[25];
	RHS6 += Idr[26];
	RHS6 += Idr[27];
	RHS6 -= go[27] * *cnV[27];
	m_A26 += gt[28];
	m_A26 += gt[29];
	m_A26 += gt[30];
	m_A24 += go[28];
	m_A23 += go[29];
	double RHS7 = Idr[28];
	RHS7 += Idr[29];
	RHS7 += Idr[30];
	RHS7 -= go[30] * *cnV[30];
	m_A33 += gt[31];
	m_A33 += gt[32];
	m_A33 += gt[33];
	m_A30 += go[31];
	m_A29 += go[32];
	double RHS8 = Idr[31];
	RHS8 += Idr[32];
	RHS8 += Idr[33];
	RHS8 -= go[33] * *cnV[33];
	m_A40 += gt[34];
	m_A40 += gt[35];
	m_A40 += gt[36];
	m_A40 += gt[37];
	m_A36 += go[34];
	m_A35 += go[35];
	double RHS9 = Idr[34];
	RHS9 += Idr[35];
	RHS9 += Idr[36];
	RHS9 += Idr[37];
	RHS9 -= go[36] * *cnV[36];
	RHS9 -= go[37] * *cnV[37];
	m_A45 += gt[38];
	m_A45 += gt[39];
	m_A45 += gt[40];
	m_A45 += gt[41];
	m_A45 += gt[42];
	m_A45 += gt[43];
	m_A45 += gt[44];
	m_A45 += gt[45];
	m_A43 += go[38];
	m_A43 += go[39];
	m_A42 += go[40];
	m_A42 += go[41];
	double RHS10 = Idr[38];
	RHS10 += Idr[39];
	RHS10 += Idr[40];
	RHS10 += Idr[41];
	RHS10 += Idr[42];
	RHS10 += Idr[43];
	RHS10 += Idr[44];
	RHS10 += Idr[45];
	RHS10 -= go[42] * *cnV[42];
	RHS10 -= go[43] * *cnV[43];
	RHS10 -= go[44] * *cnV[44];
	RHS10 -= go[45] * *cnV[45];
	m_A49 += gt[46];
	m_A49 += gt[47];
	m_A47 += go[46];
	double RHS11 = Idr[46];
	RHS11 += Idr[47];
	RHS11 -= go[47] * *cnV[47];
	const double f0 = 1.0 / m_A0;
	const double f0_8 = -f0 * m_A29;
	m_A33 += m_A1 * f0_8;
	RHS8 += f0_8 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_7 = -f1 * m_A23;
	m_A26 += m_A3 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_6 = -f2 * m_A17;
	m_A19 += m_A5 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_6 = -f3 * m_A18;
	m_A19 += m_A7 * f3_6;
	m_A20 += m_A8 * f3_6;
	m_A21 += m_A9 * f3_6;
	m_A22 += m_A10 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f3_7 = -f3 * m_A24;
	m_A25 += m_A7 * f3_7;
	m_A26 += m_A8 * f3_7;
	m_A27 += m_A9 * f3_7;
	m_A28 += m_A10 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f3_8 = -f3 * m_A30;
	m_A31 += m_A7 * f3_8;
	m_A32 += m_A8 * f3_8;
	m_A33 += m_A9 * f3_8;
	m_A34 += m_A10 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f3_9 = -f3 * m_A35;
	m_A37 += m_A7 * f3_9;
	m_A38 += m_A8 * f3_9;
	m_A39 += m_A9 * f3_9;
	m_A40 += m_A10 * f3_9;
	RHS9 += f3_9 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_9 = -f4 * m_A36;
	m_A40 += m_A12 * f4_9;
	m_A41 += m_A13 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f4_10 = -f4 * m_A42;
	m_A44 += m_A12 * f4_10;
	m_A45 += m_A13 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A14;
	const double f5_10 = -f5 * m_A43;
	m_A45 += m_A15 * f5_10;
	m_A46 += m_A16 * f5_10;
	RHS10 += f5_10 * RHS5;
	const double f5_11 = -f5 * m_A47;
	m_A48 += m_A15 * f5_11;
	m_A49 += m_A16 * f5_11;
	RHS11 += f5_11 * RHS5;
	const double f6 = 1.0 / m_A19;
	const double f6_7 = -f6 * m_A25;
	m_A26 += m_A20 * f6_7;
	m_A27 += m_A21 * f6_7;
	m_A28 += m_A22 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f6_8 = -f6 * m_A31;
	m_A32 += m_A20 * f6_8;
	m_A33 += m_A21 * f6_8;
	m_A34 += m_A22 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f6_9 = -f6 * m_A37;
	m_A38 += m_A20 * f6_9;
	m_A39 += m_A21 * f6_9;
	m_A40 += m_A22 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f7 = 1.0 / m_A26;
	const double f7_8 = -f7 * m_A32;
	m_A33 += m_A27 * f7_8;
	m_A34 += m_A28 * f7_8;
	RHS8 += f7_8 * RHS7;
	const double f7_9 = -f7 * m_A38;
	m_A39 += m_A27 * f7_9;
	m_A40 += m_A28 * f7_9;
	RHS9 += f7_9 * RHS7;
	const double f8 = 1.0 / m_A33;
	const double f8_9 = -f8 * m_A39;
	m_A40 += m_A34 * f8_9;
	RHS9 += f8_9 * RHS8;
	const double f9 = 1.0 / m_A40;
	const double f9_10 = -f9 * m_A44;
	m_A45 += m_A41 * f9_10;
	RHS10 += f9_10 * RHS9;
	const double f10 = 1.0 / m_A45;
	const double f10_11 = -f10 * m_A48;
	m_A49 += m_A46 * f10_11;
	RHS11 += f10_11 * RHS10;
	V[11] = RHS11 / m_A49;
	double tmp10 = 0.0;
	tmp10 += m_A46 * V[11];
	V[10] = (RHS10 - tmp10) / m_A45;
	double tmp9 = 0.0;
	tmp9 += m_A41 * V[10];
	V[9] = (RHS9 - tmp9) / m_A40;
	double tmp8 = 0.0;
	tmp8 += m_A34 * V[9];
	V[8] = (RHS8 - tmp8) / m_A33;
	double tmp7 = 0.0;
	tmp7 += m_A27 * V[8];
	tmp7 += m_A28 * V[9];
	V[7] = (RHS7 - tmp7) / m_A26;
	double tmp6 = 0.0;
	tmp6 += m_A20 * V[7];
	tmp6 += m_A21 * V[8];
	tmp6 += m_A22 * V[9];
	V[6] = (RHS6 - tmp6) / m_A19;
	double tmp5 = 0.0;
	tmp5 += m_A15 * V[10];
	tmp5 += m_A16 * V[11];
	V[5] = (RHS5 - tmp5) / m_A14;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[9];
	tmp4 += m_A13 * V[10];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[6];
	tmp3 += m_A8 * V[7];
	tmp3 += m_A9 * V[8];
	tmp3 += m_A10 * V[9];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[6];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[7];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[8];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// stuntcyc
static void nl_gcr_c924fe5960b1479e_20_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A3 += go[5];
	double RHS1 = Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A6 += go[8];
	m_A5 += go[9];
	double RHS2 = Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A8 += gt[19];
	m_A10 += go[13];
	m_A9 += go[14];
	m_A7 += go[15];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[16] * *cnV[16];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A14 += gt[20];
	m_A14 += gt[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A12 += go[20];
	m_A11 += go[21];
	m_A13 += go[22];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 -= go[23] * *cnV[23];
	m_A19 += gt[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A16 += go[24];
	m_A17 += go[25];
	double RHS5 = Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 -= go[26] * *cnV[26];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A7;
	m_A8 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A11;
	m_A14 += m_A3 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A12;
	m_A14 += m_A5 * f2_4;
	m_A15 += m_A6 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A16;
	m_A18 += m_A5 * f2_5;
	m_A19 += m_A6 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_4 = -f3 * m_A13;
	m_A14 += m_A9 * f3_4;
	m_A15 += m_A10 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A17;
	m_A18 += m_A9 * f3_5;
	m_A19 += m_A10 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A14;
	const double f4_5 = -f4 * m_A18;
	m_A19 += m_A15 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A19;
	double tmp4 = 0.0;
	tmp4 += m_A15 * V[5];
	V[4] = (RHS4 - tmp4) / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[4];
	tmp3 += m_A10 * V[5];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	tmp2 += m_A6 * V[5];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// dpatrol
static void nl_gcr_ca68d70bd8f2f62e_22_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A2 += go[0];
	m_A2 += go[1];
	m_A1 += go[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[3] * *cnV[3];
	m_A3 += gt[4];
	m_A3 += gt[5];
	m_A3 += gt[6];
	m_A3 += gt[7];
	m_A5 += go[4];
	m_A5 += go[5];
	m_A4 += go[6];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 -= go[7] * *cnV[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A7 += go[8];
	double RHS2 = Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	m_A10 += gt[11];
	m_A10 += gt[12];
	m_A10 += gt[13];
	m_A12 += go[11];
	m_A9 += go[12];
	m_A8 += go[13];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	m_A16 += gt[14];
	m_A16 += gt[15];
	m_A16 += gt[16];
	m_A16 += gt[17];
	m_A16 += gt[18];
	m_A17 += go[14];
	m_A14 += go[15];
	m_A14 += go[16];
	m_A13 += go[17];
	m_A13 += go[18];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	m_A21 += gt[19];
	m_A21 += gt[20];
	m_A21 += gt[21];
	m_A18 += go[19];
	m_A20 += go[20];
	m_A19 += go[21];
	double RHS5 = Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A8;
	m_A10 += m_A1 * f0_3;
	m_A11 += m_A2 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f0_4 = -f0 * m_A13;
	m_A15 += m_A1 * f0_4;
	m_A16 += m_A2 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A4 * f1_3;
	m_A11 += m_A5 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_4 = -f1 * m_A14;
	m_A15 += m_A4 * f1_4;
	m_A16 += m_A5 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_5 = -f2 * m_A18;
	m_A21 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_4 = -f3 * m_A15;
	m_A16 += m_A11 * f3_4;
	m_A17 += m_A12 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A19;
	m_A20 += m_A11 * f3_5;
	m_A21 += m_A12 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A16;
	const double f4_5 = -f4 * m_A20;
	m_A21 += m_A17 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A21;
	double tmp4 = 0.0;
	tmp4 += m_A17 * V[5];
	V[4] = (RHS4 - tmp4) / m_A16;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[4];
	tmp3 += m_A12 * V[5];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[3];
	tmp1 += m_A5 * V[4];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	tmp0 += m_A2 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// breakout
static void nl_gcr_cb2aae3366e0ac1c_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A5 += go[6];
	m_A4 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// barrier
static void nl_gcr_cc913f9c3f9293e7_19_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A3 += go[2];
	m_A4 += go[3];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	m_A5 += gt[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A7 += go[9];
	m_A6 += go[10];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A9 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[13] * *cnV[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A11 += go[14];
	m_A10 += go[15];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 -= go[16] * *cnV[16];
	m_A18 += gt[17];
	m_A18 += gt[18];
	m_A18 += gt[19];
	m_A18 += gt[20];
	m_A18 += gt[21];
	m_A18 += gt[22];
	m_A14 += go[17];
	m_A16 += go[18];
	m_A15 += go[19];
	double RHS5 = Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A14;
	m_A15 += m_A3 * f1_5;
	m_A17 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A11;
	m_A12 += m_A6 * f2_4;
	m_A13 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A15;
	m_A17 += m_A6 * f2_5;
	m_A18 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_5 = -f3 * m_A16;
	m_A18 += m_A9 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_5 = -f4 * m_A17;
	m_A18 += m_A13 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A18;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[5];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[5];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// 1942
static void nl_gcr_ce766957cb26ff3e_90_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A9 += go[12];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A11 += go[15];
	double RHS5 = Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[16] * *cnV[16];
	RHS5 -= go[17] * *cnV[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A12 += gt[21];
	m_A12 += gt[22];
	m_A12 += gt[23];
	m_A12 += gt[24];
	m_A19 += go[18];
	m_A13 += go[19];
	m_A15 += go[20];
	m_A17 += go[21];
	m_A18 += go[22];
	m_A16 += go[23];
	m_A14 += go[24];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 += Idr[21];
	RHS6 += Idr[22];
	RHS6 += Idr[23];
	RHS6 += Idr[24];
	m_A20 += gt[25];
	m_A20 += gt[26];
	m_A22 += go[25];
	m_A21 += go[26];
	double RHS7 = Idr[25];
	RHS7 += Idr[26];
	m_A25 += gt[27];
	m_A25 += gt[28];
	m_A24 += go[27];
	m_A23 += go[28];
	double RHS8 = Idr[27];
	RHS8 += Idr[28];
	m_A35 += gt[29];
	m_A35 += gt[30];
	m_A33 += go[29];
	m_A32 += go[30];
	double RHS9 = Idr[29];
	RHS9 += Idr[30];
	m_A45 += gt[31];
	m_A45 += gt[32];
	m_A42 += go[31];
	m_A41 += go[32];
	double RHS10 = Idr[31];
	RHS10 += Idr[32];
	m_A55 += gt[33];
	m_A55 += gt[34];
	m_A51 += go[33];
	m_A50 += go[34];
	double RHS11 = Idr[33];
	RHS11 += Idr[34];
	m_A65 += gt[35];
	m_A65 += gt[36];
	m_A60 += go[35];
	m_A59 += go[36];
	double RHS12 = Idr[35];
	RHS12 += Idr[36];
	m_A75 += gt[37];
	m_A75 += gt[38];
	m_A69 += go[37];
	m_A68 += go[38];
	double RHS13 = Idr[37];
	RHS13 += Idr[38];
	m_A85 += gt[39];
	m_A85 += gt[40];
	m_A85 += gt[41];
	m_A78 += go[39];
	m_A77 += go[40];
	double RHS14 = Idr[39];
	RHS14 += Idr[40];
	RHS14 += Idr[41];
	RHS14 -= go[41] * *cnV[41];
	m_A89 += gt[42];
	m_A89 += gt[43];
	m_A87 += go[42];
	double RHS15 = Idr[42];
	RHS15 += Idr[43];
	RHS15 -= go[43] * *cnV[43];
	const double f0 = 1.0 / m_A0;
	const double f0_9 = -f0 * m_A32;
	m_A35 += m_A1 * f0_9;
	RHS9 += f0_9 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_11 = -f1 * m_A50;
	m_A55 += m_A3 * f1_11;
	RHS11 += f1_11 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_13 = -f2 * m_A68;
	m_A75 += m_A5 * f2_13;
	RHS13 += f2_13 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_12 = -f3 * m_A59;
	m_A65 += m_A7 * f3_12;
	RHS12 += f3_12 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_10 = -f4 * m_A41;
	m_A45 += m_A9 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_8 = -f5 * m_A23;
	m_A25 += m_A11 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_8 = -f6 * m_A24;
	m_A25 += m_A13 * f6_8;
	m_A26 += m_A14 * f6_8;
	m_A27 += m_A15 * f6_8;
	m_A28 += m_A16 * f6_8;
	m_A29 += m_A17 * f6_8;
	m_A30 += m_A18 * f6_8;
	m_A31 += m_A19 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f6_9 = -f6 * m_A33;
	m_A34 += m_A13 * f6_9;
	m_A35 += m_A14 * f6_9;
	m_A36 += m_A15 * f6_9;
	m_A37 += m_A16 * f6_9;
	m_A38 += m_A17 * f6_9;
	m_A39 += m_A18 * f6_9;
	m_A40 += m_A19 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f6_10 = -f6 * m_A42;
	m_A43 += m_A13 * f6_10;
	m_A44 += m_A14 * f6_10;
	m_A45 += m_A15 * f6_10;
	m_A46 += m_A16 * f6_10;
	m_A47 += m_A17 * f6_10;
	m_A48 += m_A18 * f6_10;
	m_A49 += m_A19 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f6_11 = -f6 * m_A51;
	m_A52 += m_A13 * f6_11;
	m_A53 += m_A14 * f6_11;
	m_A54 += m_A15 * f6_11;
	m_A55 += m_A16 * f6_11;
	m_A56 += m_A17 * f6_11;
	m_A57 += m_A18 * f6_11;
	m_A58 += m_A19 * f6_11;
	RHS11 += f6_11 * RHS6;
	const double f6_12 = -f6 * m_A60;
	m_A61 += m_A13 * f6_12;
	m_A62 += m_A14 * f6_12;
	m_A63 += m_A15 * f6_12;
	m_A64 += m_A16 * f6_12;
	m_A65 += m_A17 * f6_12;
	m_A66 += m_A18 * f6_12;
	m_A67 += m_A19 * f6_12;
	RHS12 += f6_12 * RHS6;
	const double f6_13 = -f6 * m_A69;
	m_A70 += m_A13 * f6_13;
	m_A71 += m_A14 * f6_13;
	m_A72 += m_A15 * f6_13;
	m_A73 += m_A16 * f6_13;
	m_A74 += m_A17 * f6_13;
	m_A75 += m_A18 * f6_13;
	m_A76 += m_A19 * f6_13;
	RHS13 += f6_13 * RHS6;
	const double f6_14 = -f6 * m_A77;
	m_A79 += m_A13 * f6_14;
	m_A80 += m_A14 * f6_14;
	m_A81 += m_A15 * f6_14;
	m_A82 += m_A16 * f6_14;
	m_A83 += m_A17 * f6_14;
	m_A84 += m_A18 * f6_14;
	m_A85 += m_A19 * f6_14;
	RHS14 += f6_14 * RHS6;
	const double f7 = 1.0 / m_A20;
	const double f7_14 = -f7 * m_A78;
	m_A85 += m_A21 * f7_14;
	m_A86 += m_A22 * f7_14;
	RHS14 += f7_14 * RHS7;
	const double f7_15 = -f7 * m_A87;
	m_A88 += m_A21 * f7_15;
	m_A89 += m_A22 * f7_15;
	RHS15 += f7_15 * RHS7;
	const double f8 = 1.0 / m_A25;
	const double f8_9 = -f8 * m_A34;
	m_A35 += m_A26 * f8_9;
	m_A36 += m_A27 * f8_9;
	m_A37 += m_A28 * f8_9;
	m_A38 += m_A29 * f8_9;
	m_A39 += m_A30 * f8_9;
	m_A40 += m_A31 * f8_9;
	RHS9 += f8_9 * RHS8;
	const double f8_10 = -f8 * m_A43;
	m_A44 += m_A26 * f8_10;
	m_A45 += m_A27 * f8_10;
	m_A46 += m_A28 * f8_10;
	m_A47 += m_A29 * f8_10;
	m_A48 += m_A30 * f8_10;
	m_A49 += m_A31 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f8_11 = -f8 * m_A52;
	m_A53 += m_A26 * f8_11;
	m_A54 += m_A27 * f8_11;
	m_A55 += m_A28 * f8_11;
	m_A56 += m_A29 * f8_11;
	m_A57 += m_A30 * f8_11;
	m_A58 += m_A31 * f8_11;
	RHS11 += f8_11 * RHS8;
	const double f8_12 = -f8 * m_A61;
	m_A62 += m_A26 * f8_12;
	m_A63 += m_A27 * f8_12;
	m_A64 += m_A28 * f8_12;
	m_A65 += m_A29 * f8_12;
	m_A66 += m_A30 * f8_12;
	m_A67 += m_A31 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f8_13 = -f8 * m_A70;
	m_A71 += m_A26 * f8_13;
	m_A72 += m_A27 * f8_13;
	m_A73 += m_A28 * f8_13;
	m_A74 += m_A29 * f8_13;
	m_A75 += m_A30 * f8_13;
	m_A76 += m_A31 * f8_13;
	RHS13 += f8_13 * RHS8;
	const double f8_14 = -f8 * m_A79;
	m_A80 += m_A26 * f8_14;
	m_A81 += m_A27 * f8_14;
	m_A82 += m_A28 * f8_14;
	m_A83 += m_A29 * f8_14;
	m_A84 += m_A30 * f8_14;
	m_A85 += m_A31 * f8_14;
	RHS14 += f8_14 * RHS8;
	const double f9 = 1.0 / m_A35;
	const double f9_10 = -f9 * m_A44;
	m_A45 += m_A36 * f9_10;
	m_A46 += m_A37 * f9_10;
	m_A47 += m_A38 * f9_10;
	m_A48 += m_A39 * f9_10;
	m_A49 += m_A40 * f9_10;
	RHS10 += f9_10 * RHS9;
	const double f9_11 = -f9 * m_A53;
	m_A54 += m_A36 * f9_11;
	m_A55 += m_A37 * f9_11;
	m_A56 += m_A38 * f9_11;
	m_A57 += m_A39 * f9_11;
	m_A58 += m_A40 * f9_11;
	RHS11 += f9_11 * RHS9;
	const double f9_12 = -f9 * m_A62;
	m_A63 += m_A36 * f9_12;
	m_A64 += m_A37 * f9_12;
	m_A65 += m_A38 * f9_12;
	m_A66 += m_A39 * f9_12;
	m_A67 += m_A40 * f9_12;
	RHS12 += f9_12 * RHS9;
	const double f9_13 = -f9 * m_A71;
	m_A72 += m_A36 * f9_13;
	m_A73 += m_A37 * f9_13;
	m_A74 += m_A38 * f9_13;
	m_A75 += m_A39 * f9_13;
	m_A76 += m_A40 * f9_13;
	RHS13 += f9_13 * RHS9;
	const double f9_14 = -f9 * m_A80;
	m_A81 += m_A36 * f9_14;
	m_A82 += m_A37 * f9_14;
	m_A83 += m_A38 * f9_14;
	m_A84 += m_A39 * f9_14;
	m_A85 += m_A40 * f9_14;
	RHS14 += f9_14 * RHS9;
	const double f10 = 1.0 / m_A45;
	const double f10_11 = -f10 * m_A54;
	m_A55 += m_A46 * f10_11;
	m_A56 += m_A47 * f10_11;
	m_A57 += m_A48 * f10_11;
	m_A58 += m_A49 * f10_11;
	RHS11 += f10_11 * RHS10;
	const double f10_12 = -f10 * m_A63;
	m_A64 += m_A46 * f10_12;
	m_A65 += m_A47 * f10_12;
	m_A66 += m_A48 * f10_12;
	m_A67 += m_A49 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f10_13 = -f10 * m_A72;
	m_A73 += m_A46 * f10_13;
	m_A74 += m_A47 * f10_13;
	m_A75 += m_A48 * f10_13;
	m_A76 += m_A49 * f10_13;
	RHS13 += f10_13 * RHS10;
	const double f10_14 = -f10 * m_A81;
	m_A82 += m_A46 * f10_14;
	m_A83 += m_A47 * f10_14;
	m_A84 += m_A48 * f10_14;
	m_A85 += m_A49 * f10_14;
	RHS14 += f10_14 * RHS10;
	const double f11 = 1.0 / m_A55;
	const double f11_12 = -f11 * m_A64;
	m_A65 += m_A56 * f11_12;
	m_A66 += m_A57 * f11_12;
	m_A67 += m_A58 * f11_12;
	RHS12 += f11_12 * RHS11;
	const double f11_13 = -f11 * m_A73;
	m_A74 += m_A56 * f11_13;
	m_A75 += m_A57 * f11_13;
	m_A76 += m_A58 * f11_13;
	RHS13 += f11_13 * RHS11;
	const double f11_14 = -f11 * m_A82;
	m_A83 += m_A56 * f11_14;
	m_A84 += m_A57 * f11_14;
	m_A85 += m_A58 * f11_14;
	RHS14 += f11_14 * RHS11;
	const double f12 = 1.0 / m_A65;
	const double f12_13 = -f12 * m_A74;
	m_A75 += m_A66 * f12_13;
	m_A76 += m_A67 * f12_13;
	RHS13 += f12_13 * RHS12;
	const double f12_14 = -f12 * m_A83;
	m_A84 += m_A66 * f12_14;
	m_A85 += m_A67 * f12_14;
	RHS14 += f12_14 * RHS12;
	const double f13 = 1.0 / m_A75;
	const double f13_14 = -f13 * m_A84;
	m_A85 += m_A76 * f13_14;
	RHS14 += f13_14 * RHS13;
	const double f14 = 1.0 / m_A85;
	const double f14_15 = -f14 * m_A88;
	m_A89 += m_A86 * f14_15;
	RHS15 += f14_15 * RHS14;
	V[15] = RHS15 / m_A89;
	double tmp14 = 0.0;
	tmp14 += m_A86 * V[15];
	V[14] = (RHS14 - tmp14) / m_A85;
	double tmp13 = 0.0;
	tmp13 += m_A76 * V[14];
	V[13] = (RHS13 - tmp13) / m_A75;
	double tmp12 = 0.0;
	tmp12 += m_A66 * V[13];
	tmp12 += m_A67 * V[14];
	V[12] = (RHS12 - tmp12) / m_A65;
	double tmp11 = 0.0;
	tmp11 += m_A56 * V[12];
	tmp11 += m_A57 * V[13];
	tmp11 += m_A58 * V[14];
	V[11] = (RHS11 - tmp11) / m_A55;
	double tmp10 = 0.0;
	tmp10 += m_A46 * V[11];
	tmp10 += m_A47 * V[12];
	tmp10 += m_A48 * V[13];
	tmp10 += m_A49 * V[14];
	V[10] = (RHS10 - tmp10) / m_A45;
	double tmp9 = 0.0;
	tmp9 += m_A36 * V[10];
	tmp9 += m_A37 * V[11];
	tmp9 += m_A38 * V[12];
	tmp9 += m_A39 * V[13];
	tmp9 += m_A40 * V[14];
	V[9] = (RHS9 - tmp9) / m_A35;
	double tmp8 = 0.0;
	tmp8 += m_A26 * V[9];
	tmp8 += m_A27 * V[10];
	tmp8 += m_A28 * V[11];
	tmp8 += m_A29 * V[12];
	tmp8 += m_A30 * V[13];
	tmp8 += m_A31 * V[14];
	V[8] = (RHS8 - tmp8) / m_A25;
	double tmp7 = 0.0;
	tmp7 += m_A21 * V[14];
	tmp7 += m_A22 * V[15];
	V[7] = (RHS7 - tmp7) / m_A20;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[8];
	tmp6 += m_A14 * V[9];
	tmp6 += m_A15 * V[10];
	tmp6 += m_A16 * V[11];
	tmp6 += m_A17 * V[12];
	tmp6 += m_A18 * V[13];
	tmp6 += m_A19 * V[14];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[8];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[10];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[12];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[13];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[11];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[9];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// zac1b11142
static void nl_gcr_cfd3bbf5fbba4765_71_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A2 += gt[11];
	m_A2 += gt[12];
	m_A2 += gt[13];
	m_A3 += go[7];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 += Idr[12];
	RHS1 += Idr[13];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	RHS1 -= go[12] * *cnV[12];
	RHS1 -= go[13] * *cnV[13];
	m_A4 += gt[14];
	m_A4 += gt[15];
	m_A4 += gt[16];
	m_A5 += go[14];
	double RHS2 = Idr[14];
	RHS2 += Idr[15];
	RHS2 += Idr[16];
	RHS2 -= go[15] * *cnV[15];
	RHS2 -= go[16] * *cnV[16];
	m_A6 += gt[17];
	m_A6 += gt[18];
	m_A7 += go[17];
	double RHS3 = Idr[17];
	RHS3 += Idr[18];
	RHS3 -= go[18] * *cnV[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A9 += go[19];
	double RHS4 = Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	m_A10 += gt[22];
	m_A10 += gt[23];
	m_A11 += go[22];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[23] * *cnV[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A12 += gt[26];
	m_A13 += go[24];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	RHS6 += Idr[26];
	RHS6 -= go[25] * *cnV[25];
	RHS6 -= go[26] * *cnV[26];
	m_A14 += gt[27];
	m_A14 += gt[28];
	m_A14 += gt[29];
	m_A15 += go[27];
	double RHS7 = Idr[27];
	RHS7 += Idr[28];
	RHS7 += Idr[29];
	RHS7 -= go[28] * *cnV[28];
	RHS7 -= go[29] * *cnV[29];
	m_A17 += gt[30];
	m_A17 += gt[31];
	m_A17 += gt[32];
	m_A17 += gt[33];
	m_A17 += gt[34];
	m_A17 += gt[35];
	m_A16 += go[30];
	m_A18 += go[31];
	m_A19 += go[32];
	m_A19 += go[33];
	double RHS8 = Idr[30];
	RHS8 += Idr[31];
	RHS8 += Idr[32];
	RHS8 += Idr[33];
	RHS8 += Idr[34];
	RHS8 += Idr[35];
	RHS8 -= go[34] * *cnV[34];
	RHS8 -= go[35] * *cnV[35];
	m_A21 += gt[36];
	m_A21 += gt[37];
	m_A21 += gt[38];
	m_A22 += go[36];
	double RHS9 = Idr[36];
	RHS9 += Idr[37];
	RHS9 += Idr[38];
	RHS9 -= go[37] * *cnV[37];
	RHS9 -= go[38] * *cnV[38];
	m_A23 += gt[39];
	m_A23 += gt[40];
	m_A23 += gt[41];
	m_A25 += go[39];
	m_A24 += go[40];
	double RHS10 = Idr[39];
	RHS10 += Idr[40];
	RHS10 += Idr[41];
	RHS10 -= go[41] * *cnV[41];
	m_A27 += gt[42];
	m_A27 += gt[43];
	m_A27 += gt[44];
	m_A27 += gt[45];
	m_A27 += gt[46];
	m_A27 += gt[47];
	m_A26 += go[42];
	m_A29 += go[43];
	m_A29 += go[44];
	double RHS11 = Idr[42];
	RHS11 += Idr[43];
	RHS11 += Idr[44];
	RHS11 += Idr[45];
	RHS11 += Idr[46];
	RHS11 += Idr[47];
	RHS11 -= go[45] * *cnV[45];
	RHS11 -= go[46] * *cnV[46];
	RHS11 -= go[47] * *cnV[47];
	m_A31 += gt[48];
	m_A31 += gt[49];
	m_A32 += go[48];
	m_A30 += go[49];
	double RHS12 = Idr[48];
	RHS12 += Idr[49];
	m_A35 += gt[50];
	m_A35 += gt[51];
	m_A34 += go[50];
	m_A33 += go[51];
	double RHS13 = Idr[50];
	RHS13 += Idr[51];
	m_A38 += gt[52];
	m_A38 += gt[53];
	m_A37 += go[52];
	m_A36 += go[53];
	double RHS14 = Idr[52];
	RHS14 += Idr[53];
	m_A40 += gt[54];
	m_A40 += gt[55];
	m_A40 += gt[56];
	m_A40 += gt[57];
	m_A41 += go[54];
	m_A39 += go[55];
	double RHS15 = Idr[54];
	RHS15 += Idr[55];
	RHS15 += Idr[56];
	RHS15 += Idr[57];
	RHS15 -= go[56] * *cnV[56];
	RHS15 -= go[57] * *cnV[57];
	m_A44 += gt[58];
	m_A44 += gt[59];
	m_A43 += go[58];
	m_A42 += go[59];
	double RHS16 = Idr[58];
	RHS16 += Idr[59];
	m_A54 += gt[60];
	m_A54 += gt[61];
	m_A54 += gt[62];
	m_A54 += gt[63];
	m_A54 += gt[64];
	m_A54 += gt[65];
	m_A52 += go[60];
	m_A50 += go[61];
	m_A50 += go[62];
	m_A51 += go[63];
	m_A49 += go[64];
	m_A48 += go[65];
	double RHS17 = Idr[60];
	RHS17 += Idr[61];
	RHS17 += Idr[62];
	RHS17 += Idr[63];
	RHS17 += Idr[64];
	RHS17 += Idr[65];
	m_A65 += gt[66];
	m_A65 += gt[67];
	m_A65 += gt[68];
	m_A65 += gt[69];
	m_A65 += gt[70];
	m_A65 += gt[71];
	m_A61 += go[66];
	m_A60 += go[67];
	m_A60 += go[68];
	m_A59 += go[69];
	m_A58 += go[70];
	m_A57 += go[71];
	double RHS18 = Idr[66];
	RHS18 += Idr[67];
	RHS18 += Idr[68];
	RHS18 += Idr[69];
	RHS18 += Idr[70];
	RHS18 += Idr[71];
	m_A70 += gt[72];
	m_A70 += gt[73];
	m_A70 += gt[74];
	m_A70 += gt[75];
	m_A68 += go[72];
	m_A67 += go[73];
	double RHS19 = Idr[72];
	RHS19 += Idr[73];
	RHS19 += Idr[74];
	RHS19 += Idr[75];
	RHS19 -= go[74] * *cnV[74];
	RHS19 -= go[75] * *cnV[75];
	const double f0 = 1.0 / m_A0;
	const double f0_8 = -f0 * m_A16;
	m_A20 += m_A1 * f0_8;
	RHS8 += f0_8 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_11 = -f1 * m_A26;
	m_A28 += m_A3 * f1_11;
	RHS11 += f1_11 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_12 = -f2 * m_A30;
	m_A31 += m_A5 * f2_12;
	RHS12 += f2_12 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_13 = -f3 * m_A33;
	m_A35 += m_A7 * f3_13;
	RHS13 += f3_13 * RHS3;
	const double f3_17 = -f3 * m_A48;
	m_A52 += m_A7 * f3_17;
	RHS17 += f3_17 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_13 = -f4 * m_A34;
	m_A35 += m_A9 * f4_13;
	RHS13 += f4_13 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_14 = -f5 * m_A36;
	m_A38 += m_A11 * f5_14;
	RHS14 += f5_14 * RHS5;
	const double f5_18 = -f5 * m_A57;
	m_A61 += m_A11 * f5_18;
	RHS18 += f5_18 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_14 = -f6 * m_A37;
	m_A38 += m_A13 * f6_14;
	RHS14 += f6_14 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_17 = -f7 * m_A49;
	m_A54 += m_A15 * f7_17;
	RHS17 += f7_17 * RHS7;
	const double f7_19 = -f7 * m_A67;
	m_A68 += m_A15 * f7_19;
	RHS19 += f7_19 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_16 = -f8 * m_A42;
	m_A44 += m_A18 * f8_16;
	m_A45 += m_A19 * f8_16;
	m_A47 += m_A20 * f8_16;
	RHS16 += f8_16 * RHS8;
	const double f8_17 = -f8 * m_A50;
	m_A53 += m_A18 * f8_17;
	m_A54 += m_A19 * f8_17;
	m_A56 += m_A20 * f8_17;
	RHS17 += f8_17 * RHS8;
	const double f9 = 1.0 / m_A21;
	const double f9_15 = -f9 * m_A39;
	m_A41 += m_A22 * f9_15;
	RHS15 += f9_15 * RHS9;
	const double f9_18 = -f9 * m_A58;
	m_A65 += m_A22 * f9_18;
	RHS18 += f9_18 * RHS9;
	const double f10 = 1.0 / m_A23;
	const double f10_16 = -f10 * m_A43;
	m_A44 += m_A24 * f10_16;
	m_A46 += m_A25 * f10_16;
	RHS16 += f10_16 * RHS10;
	const double f10_18 = -f10 * m_A59;
	m_A63 += m_A24 * f10_18;
	m_A65 += m_A25 * f10_18;
	RHS18 += f10_18 * RHS10;
	const double f11 = 1.0 / m_A27;
	const double f11_18 = -f11 * m_A60;
	m_A62 += m_A28 * f11_18;
	m_A65 += m_A29 * f11_18;
	RHS18 += f11_18 * RHS11;
	const double f12 = 1.0 / m_A31;
	const double f12_17 = -f12 * m_A51;
	m_A54 += m_A32 * f12_17;
	RHS17 += f12_17 * RHS12;
	const double f13 = 1.0 / m_A35;
	const double f13_17 = -f13 * m_A52;
	RHS17 += f13_17 * RHS13;
	const double f14 = 1.0 / m_A38;
	const double f14_18 = -f14 * m_A61;
	RHS18 += f14_18 * RHS14;
	const double f15 = 1.0 / m_A40;
	const double f15_18 = -f15 * m_A62;
	m_A65 += m_A41 * f15_18;
	RHS18 += f15_18 * RHS15;
	const double f16 = 1.0 / m_A44;
	const double f16_17 = -f16 * m_A53;
	m_A54 += m_A45 * f16_17;
	m_A55 += m_A46 * f16_17;
	m_A56 += m_A47 * f16_17;
	RHS17 += f16_17 * RHS16;
	const double f16_18 = -f16 * m_A63;
	m_A64 += m_A45 * f16_18;
	m_A65 += m_A46 * f16_18;
	m_A66 += m_A47 * f16_18;
	RHS18 += f16_18 * RHS16;
	const double f17 = 1.0 / m_A54;
	const double f17_18 = -f17 * m_A64;
	m_A65 += m_A55 * f17_18;
	m_A66 += m_A56 * f17_18;
	RHS18 += f17_18 * RHS17;
	const double f17_19 = -f17 * m_A68;
	m_A69 += m_A55 * f17_19;
	m_A70 += m_A56 * f17_19;
	RHS19 += f17_19 * RHS17;
	const double f18 = 1.0 / m_A65;
	const double f18_19 = -f18 * m_A69;
	m_A70 += m_A66 * f18_19;
	RHS19 += f18_19 * RHS18;
	V[19] = RHS19 / m_A70;
	double tmp18 = 0.0;
	tmp18 += m_A66 * V[19];
	V[18] = (RHS18 - tmp18) / m_A65;
	double tmp17 = 0.0;
	tmp17 += m_A55 * V[18];
	tmp17 += m_A56 * V[19];
	V[17] = (RHS17 - tmp17) / m_A54;
	double tmp16 = 0.0;
	tmp16 += m_A45 * V[17];
	tmp16 += m_A46 * V[18];
	tmp16 += m_A47 * V[19];
	V[16] = (RHS16 - tmp16) / m_A44;
	double tmp15 = 0.0;
	tmp15 += m_A41 * V[18];
	V[15] = (RHS15 - tmp15) / m_A40;
	double tmp14 = 0.0;
	V[14] = (RHS14 - tmp14) / m_A38;
	double tmp13 = 0.0;
	V[13] = (RHS13 - tmp13) / m_A35;
	double tmp12 = 0.0;
	tmp12 += m_A32 * V[17];
	V[12] = (RHS12 - tmp12) / m_A31;
	double tmp11 = 0.0;
	tmp11 += m_A28 * V[15];
	tmp11 += m_A29 * V[18];
	V[11] = (RHS11 - tmp11) / m_A27;
	double tmp10 = 0.0;
	tmp10 += m_A24 * V[16];
	tmp10 += m_A25 * V[18];
	V[10] = (RHS10 - tmp10) / m_A23;
	double tmp9 = 0.0;
	tmp9 += m_A22 * V[18];
	V[9] = (RHS9 - tmp9) / m_A21;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[16];
	tmp8 += m_A19 * V[17];
	tmp8 += m_A20 * V[19];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[17];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[14];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[14];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[13];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[13];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[12];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[15];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[19];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// gunfight
static void nl_gcr_d05b3dbe370c7904_14_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A2 += go[0];
	m_A1 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[2] * *cnV[2];
	m_A4 += gt[3];
	m_A4 += gt[4];
	m_A3 += go[3];
	m_A6 += go[4];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	m_A9 += gt[5];
	m_A9 += gt[6];
	m_A9 += gt[7];
	m_A9 += gt[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A9 += gt[11];
	m_A9 += gt[12];
	m_A9 += gt[13];
	m_A7 += go[5];
	m_A10 += go[6];
	m_A10 += go[7];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	m_A13 += gt[14];
	m_A13 += gt[15];
	m_A13 += gt[16];
	m_A13 += gt[17];
	m_A13 += gt[18];
	m_A12 += go[14];
	m_A12 += go[15];
	m_A11 += go[16];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	const double f0 = 1.0 / m_A0;
	const double f0_1 = -f0 * m_A3;
	m_A4 += m_A1 * f0_1;
	m_A5 += m_A2 * f0_1;
	RHS1 += f0_1 * RHS0;
	const double f0_2 = -f0 * m_A7;
	m_A8 += m_A1 * f0_2;
	m_A9 += m_A2 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A4;
	const double f1_2 = -f1 * m_A8;
	m_A9 += m_A5 * f1_2;
	m_A10 += m_A6 * f1_2;
	RHS2 += f1_2 * RHS1;
	const double f1_3 = -f1 * m_A11;
	m_A12 += m_A5 * f1_3;
	m_A13 += m_A6 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A9;
	const double f2_3 = -f2 * m_A12;
	m_A13 += m_A10 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A13;
	double tmp2 = 0.0;
	tmp2 += m_A10 * V[3];
	V[2] = (RHS2 - tmp2) / m_A9;
	double tmp1 = 0.0;
	tmp1 += m_A5 * V[2];
	tmp1 += m_A6 * V[3];
	V[1] = (RHS1 - tmp1) / m_A4;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[1];
	tmp0 += m_A2 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// barrier
static void nl_gcr_d06bd7ddbfd17b5e_15_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A4 += go[2];
	m_A3 += go[3];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	m_A5 += gt[4];
	m_A5 += gt[5];
	m_A5 += gt[6];
	m_A6 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 += Idr[6];
	RHS2 -= go[5] * *cnV[5];
	RHS2 -= go[6] * *cnV[6];
	m_A9 += gt[7];
	m_A9 += gt[8];
	m_A7 += go[7];
	m_A8 += go[8];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	m_A14 += gt[9];
	m_A14 += gt[10];
	m_A12 += go[9];
	m_A11 += go[10];
	double RHS4 = Idr[9];
	RHS4 += Idr[10];
	const double f0 = 1.0 / m_A0;
	const double f0_3 = -f0 * m_A7;
	m_A9 += m_A1 * f0_3;
	RHS3 += f0_3 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A8;
	m_A9 += m_A3 * f1_3;
	m_A10 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_4 = -f1 * m_A11;
	m_A13 += m_A3 * f1_4;
	m_A14 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A12;
	m_A14 += m_A6 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_4 = -f3 * m_A13;
	m_A14 += m_A10 * f3_4;
	RHS4 += f3_4 * RHS3;
	V[4] = RHS4 / m_A14;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[4];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	tmp1 += m_A4 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[3];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// armora
static void nl_gcr_d27a39bc93616187_45_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A2 += gt[11];
	m_A5 += go[4];
	m_A4 += go[5];
	m_A4 += go[6];
	m_A3 += go[7];
	m_A3 += go[8];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A7 += go[12];
	double RHS2 = Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 += Idr[15];
	RHS2 -= go[13] * *cnV[13];
	RHS2 -= go[14] * *cnV[14];
	RHS2 -= go[15] * *cnV[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A10 += go[16];
	m_A9 += go[17];
	double RHS3 = Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 -= go[18] * *cnV[18];
	m_A11 += gt[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A11 += gt[22];
	m_A11 += gt[23];
	m_A11 += gt[24];
	m_A11 += gt[25];
	m_A11 += gt[26];
	m_A14 += go[19];
	m_A13 += go[20];
	m_A13 += go[21];
	m_A12 += go[22];
	m_A12 += go[23];
	double RHS4 = Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 += Idr[25];
	RHS4 += Idr[26];
	RHS4 -= go[24] * *cnV[24];
	RHS4 -= go[25] * *cnV[25];
	RHS4 -= go[26] * *cnV[26];
	m_A17 += gt[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A17 += gt[30];
	m_A17 += gt[31];
	m_A17 += gt[32];
	m_A16 += go[27];
	m_A16 += go[28];
	m_A15 += go[29];
	double RHS5 = Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 += Idr[30];
	RHS5 += Idr[31];
	RHS5 += Idr[32];
	RHS5 -= go[30] * *cnV[30];
	RHS5 -= go[31] * *cnV[31];
	RHS5 -= go[32] * *cnV[32];
	m_A22 += gt[33];
	m_A22 += gt[34];
	m_A22 += gt[35];
	m_A22 += gt[36];
	m_A22 += gt[37];
	m_A22 += gt[38];
	m_A21 += go[33];
	m_A21 += go[34];
	m_A20 += go[35];
	double RHS6 = Idr[33];
	RHS6 += Idr[34];
	RHS6 += Idr[35];
	RHS6 += Idr[36];
	RHS6 += Idr[37];
	RHS6 += Idr[38];
	RHS6 -= go[36] * *cnV[36];
	RHS6 -= go[37] * *cnV[37];
	RHS6 -= go[38] * *cnV[38];
	m_A27 += gt[39];
	m_A27 += gt[40];
	m_A27 += gt[41];
	m_A27 += gt[42];
	m_A27 += gt[43];
	m_A28 += go[39];
	m_A28 += go[40];
	m_A25 += go[41];
	m_A25 += go[42];
	double RHS7 = Idr[39];
	RHS7 += Idr[40];
	RHS7 += Idr[41];
	RHS7 += Idr[42];
	RHS7 += Idr[43];
	RHS7 -= go[43] * *cnV[43];
	m_A31 += gt[44];
	m_A31 += gt[45];
	m_A31 += gt[46];
	m_A31 += gt[47];
	m_A31 += gt[48];
	m_A32 += go[44];
	m_A32 += go[45];
	m_A29 += go[46];
	m_A29 += go[47];
	double RHS8 = Idr[44];
	RHS8 += Idr[45];
	RHS8 += Idr[46];
	RHS8 += Idr[47];
	RHS8 += Idr[48];
	RHS8 -= go[48] * *cnV[48];
	m_A37 += gt[49];
	m_A37 += gt[50];
	m_A37 += gt[51];
	m_A37 += gt[52];
	m_A37 += gt[53];
	m_A34 += go[49];
	m_A36 += go[50];
	m_A36 += go[51];
	m_A33 += go[52];
	double RHS9 = Idr[49];
	RHS9 += Idr[50];
	RHS9 += Idr[51];
	RHS9 += Idr[52];
	RHS9 += Idr[53];
	RHS9 -= go[53] * *cnV[53];
	m_A44 += gt[54];
	m_A44 += gt[55];
	m_A44 += gt[56];
	m_A44 += gt[57];
	m_A44 += gt[58];
	m_A42 += go[54];
	m_A42 += go[55];
	m_A40 += go[56];
	m_A39 += go[57];
	double RHS10 = Idr[54];
	RHS10 += Idr[55];
	RHS10 += Idr[56];
	RHS10 += Idr[57];
	RHS10 += Idr[58];
	RHS10 -= go[58] * *cnV[58];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A15;
	m_A17 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A16;
	m_A17 += m_A3 * f1_5;
	m_A18 += m_A4 * f1_5;
	m_A19 += m_A5 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f1_7 = -f1 * m_A25;
	m_A26 += m_A3 * f1_7;
	m_A27 += m_A4 * f1_7;
	m_A28 += m_A5 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f1_9 = -f1 * m_A33;
	m_A35 += m_A3 * f1_9;
	m_A36 += m_A4 * f1_9;
	m_A37 += m_A5 * f1_9;
	RHS9 += f1_9 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_6 = -f2 * m_A20;
	m_A22 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_9 = -f3 * m_A34;
	m_A37 += m_A9 * f3_9;
	m_A38 += m_A10 * f3_9;
	RHS9 += f3_9 * RHS3;
	const double f3_10 = -f3 * m_A39;
	m_A43 += m_A9 * f3_10;
	m_A44 += m_A10 * f3_10;
	RHS10 += f3_10 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_6 = -f4 * m_A21;
	m_A22 += m_A12 * f4_6;
	m_A23 += m_A13 * f4_6;
	m_A24 += m_A14 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f4_8 = -f4 * m_A29;
	m_A30 += m_A12 * f4_8;
	m_A31 += m_A13 * f4_8;
	m_A32 += m_A14 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f4_10 = -f4 * m_A40;
	m_A41 += m_A12 * f4_10;
	m_A42 += m_A13 * f4_10;
	m_A44 += m_A14 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_7 = -f5 * m_A26;
	m_A27 += m_A18 * f5_7;
	m_A28 += m_A19 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_9 = -f5 * m_A35;
	m_A36 += m_A18 * f5_9;
	m_A37 += m_A19 * f5_9;
	RHS9 += f5_9 * RHS5;
	const double f6 = 1.0 / m_A22;
	const double f6_8 = -f6 * m_A30;
	m_A31 += m_A23 * f6_8;
	m_A32 += m_A24 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f6_10 = -f6 * m_A41;
	m_A42 += m_A23 * f6_10;
	m_A44 += m_A24 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f7 = 1.0 / m_A27;
	const double f7_9 = -f7 * m_A36;
	m_A37 += m_A28 * f7_9;
	RHS9 += f7_9 * RHS7;
	const double f8 = 1.0 / m_A31;
	const double f8_10 = -f8 * m_A42;
	m_A44 += m_A32 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f9 = 1.0 / m_A37;
	const double f9_10 = -f9 * m_A43;
	m_A44 += m_A38 * f9_10;
	RHS10 += f9_10 * RHS9;
	V[10] = RHS10 / m_A44;
	double tmp9 = 0.0;
	tmp9 += m_A38 * V[10];
	V[9] = (RHS9 - tmp9) / m_A37;
	double tmp8 = 0.0;
	tmp8 += m_A32 * V[10];
	V[8] = (RHS8 - tmp8) / m_A31;
	double tmp7 = 0.0;
	tmp7 += m_A28 * V[9];
	V[7] = (RHS7 - tmp7) / m_A27;
	double tmp6 = 0.0;
	tmp6 += m_A23 * V[8];
	tmp6 += m_A24 * V[10];
	V[6] = (RHS6 - tmp6) / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[7];
	tmp5 += m_A19 * V[9];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[6];
	tmp4 += m_A13 * V[8];
	tmp4 += m_A14 * V[10];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[9];
	tmp3 += m_A10 * V[10];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[6];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	tmp1 += m_A4 * V[7];
	tmp1 += m_A5 * V[9];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_d7d45dc58b08cab9_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A5 += gt[6];
	m_A5 += gt[7];
	m_A5 += gt[8];
	m_A6 += go[6];
	m_A4 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[8] * *cnV[8];
	m_A9 += gt[9];
	m_A9 += gt[10];
	m_A7 += go[9];
	m_A8 += go[10];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A5 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A6 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[3];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// kidniki
static void nl_gcr_d8c511d38cef5f6f_34_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	m_A2 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[2] * *cnV[2];
	m_A3 += gt[3];
	m_A3 += gt[4];
	m_A3 += gt[5];
	m_A3 += gt[6];
	m_A3 += gt[7];
	m_A3 += gt[8];
	m_A3 += gt[9];
	m_A5 += go[3];
	m_A4 += go[4];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A7 += gt[10];
	m_A7 += gt[11];
	m_A7 += gt[12];
	m_A6 += go[10];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A9 += gt[15];
	m_A11 += go[13];
	m_A10 += go[14];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[15] * *cnV[15];
	m_A12 += gt[16];
	m_A12 += gt[17];
	m_A12 += gt[18];
	m_A14 += go[16];
	m_A13 += go[17];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 -= go[18] * *cnV[18];
	m_A17 += gt[19];
	m_A17 += gt[20];
	m_A17 += gt[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A17 += gt[24];
	m_A17 += gt[25];
	m_A15 += go[19];
	m_A18 += go[20];
	double RHS5 = Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	RHS5 -= go[23] * *cnV[23];
	RHS5 -= go[24] * *cnV[24];
	RHS5 -= go[25] * *cnV[25];
	m_A21 += gt[26];
	m_A21 += gt[27];
	m_A21 += gt[28];
	m_A21 += gt[29];
	m_A21 += gt[30];
	m_A21 += gt[31];
	m_A19 += go[26];
	m_A22 += go[27];
	m_A20 += go[28];
	double RHS6 = Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 -= go[29] * *cnV[29];
	RHS6 -= go[30] * *cnV[30];
	RHS6 -= go[31] * *cnV[31];
	m_A27 += gt[32];
	m_A27 += gt[33];
	m_A27 += gt[34];
	m_A27 += gt[35];
	m_A27 += gt[36];
	m_A26 += go[32];
	m_A25 += go[33];
	m_A23 += go[34];
	double RHS7 = Idr[32];
	RHS7 += Idr[33];
	RHS7 += Idr[34];
	RHS7 += Idr[35];
	RHS7 += Idr[36];
	RHS7 -= go[35] * *cnV[35];
	RHS7 -= go[36] * *cnV[36];
	m_A33 += gt[37];
	m_A33 += gt[38];
	m_A33 += gt[39];
	m_A30 += go[37];
	m_A31 += go[38];
	m_A29 += go[39];
	double RHS8 = Idr[37];
	RHS8 += Idr[38];
	RHS8 += Idr[39];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A6;
	m_A7 += m_A1 * f0_2;
	m_A8 += m_A2 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f0_5 = -f0 * m_A15;
	m_A16 += m_A1 * f0_5;
	m_A18 += m_A2 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f0_7 = -f0 * m_A23;
	m_A24 += m_A1 * f0_7;
	m_A27 += m_A2 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_6 = -f1 * m_A19;
	m_A20 += m_A4 * f1_6;
	m_A21 += m_A5 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A7;
	const double f2_5 = -f2 * m_A16;
	m_A18 += m_A8 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f2_7 = -f2 * m_A24;
	m_A27 += m_A8 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_6 = -f3 * m_A20;
	m_A21 += m_A10 * f3_6;
	m_A22 += m_A11 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f3_8 = -f3 * m_A29;
	m_A31 += m_A10 * f3_8;
	m_A33 += m_A11 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_7 = -f4 * m_A25;
	m_A27 += m_A13 * f4_7;
	m_A28 += m_A14 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f4_8 = -f4 * m_A30;
	m_A32 += m_A13 * f4_8;
	m_A33 += m_A14 * f4_8;
	RHS8 += f4_8 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_7 = -f5 * m_A26;
	m_A27 += m_A18 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f6 = 1.0 / m_A21;
	const double f6_8 = -f6 * m_A31;
	m_A33 += m_A22 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A27;
	const double f7_8 = -f7 * m_A32;
	m_A33 += m_A28 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A33;
	double tmp7 = 0.0;
	tmp7 += m_A28 * V[8];
	V[7] = (RHS7 - tmp7) / m_A27;
	double tmp6 = 0.0;
	tmp6 += m_A22 * V[8];
	V[6] = (RHS6 - tmp6) / m_A21;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[7];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[7];
	tmp4 += m_A14 * V[8];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[6];
	tmp3 += m_A11 * V[8];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A8 * V[7];
	V[2] = (RHS2 - tmp2) / m_A7;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[3];
	tmp1 += m_A5 * V[6];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	tmp0 += m_A2 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// warrior
static void nl_gcr_da598f43329e823_27_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A4 += go[2];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A5 += gt[7];
	m_A5 += gt[8];
	m_A5 += gt[9];
	m_A5 += gt[10];
	m_A8 += go[7];
	m_A6 += go[8];
	m_A6 += go[9];
	m_A7 += go[10];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	m_A10 += gt[11];
	m_A10 += gt[12];
	m_A10 += gt[13];
	m_A10 += gt[14];
	m_A10 += gt[15];
	m_A11 += go[11];
	m_A11 += go[12];
	m_A9 += go[13];
	m_A9 += go[14];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[15] * *cnV[15];
	m_A13 += gt[16];
	m_A13 += gt[17];
	m_A13 += gt[18];
	m_A13 += gt[19];
	m_A13 += gt[20];
	m_A15 += go[16];
	m_A15 += go[17];
	m_A12 += go[18];
	m_A12 += go[19];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 -= go[20] * *cnV[20];
	m_A21 += gt[21];
	m_A21 += gt[22];
	m_A21 += gt[23];
	m_A21 += gt[24];
	m_A21 += gt[25];
	m_A18 += go[21];
	m_A19 += go[22];
	m_A19 += go[23];
	m_A17 += go[24];
	m_A16 += go[25];
	double RHS5 = Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	m_A26 += gt[26];
	m_A26 += gt[27];
	m_A26 += gt[28];
	m_A26 += gt[29];
	m_A26 += gt[30];
	m_A24 += go[26];
	m_A24 += go[27];
	m_A23 += go[28];
	double RHS6 = Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 -= go[29] * *cnV[29];
	RHS6 -= go[30] * *cnV[30];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A16;
	m_A21 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A9;
	m_A10 += m_A3 * f1_3;
	m_A11 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_5 = -f1 * m_A17;
	m_A19 += m_A3 * f1_5;
	m_A21 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A12;
	m_A13 += m_A6 * f2_4;
	m_A14 += m_A7 * f2_4;
	m_A15 += m_A8 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A18;
	m_A20 += m_A6 * f2_5;
	m_A21 += m_A7 * f2_5;
	m_A22 += m_A8 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f2_6 = -f2 * m_A23;
	m_A24 += m_A6 * f2_6;
	m_A25 += m_A7 * f2_6;
	m_A26 += m_A8 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A10;
	const double f3_5 = -f3 * m_A19;
	m_A21 += m_A11 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A13;
	const double f4_5 = -f4 * m_A20;
	m_A21 += m_A14 * f4_5;
	m_A22 += m_A15 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f4_6 = -f4 * m_A24;
	m_A25 += m_A14 * f4_6;
	m_A26 += m_A15 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f5 = 1.0 / m_A21;
	const double f5_6 = -f5 * m_A25;
	m_A26 += m_A22 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A26;
	double tmp5 = 0.0;
	tmp5 += m_A22 * V[6];
	V[5] = (RHS5 - tmp5) / m_A21;
	double tmp4 = 0.0;
	tmp4 += m_A14 * V[5];
	tmp4 += m_A15 * V[6];
	V[4] = (RHS4 - tmp4) / m_A13;
	double tmp3 = 0.0;
	tmp3 += m_A11 * V[5];
	V[3] = (RHS3 - tmp3) / m_A10;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	tmp2 += m_A8 * V[6];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	tmp1 += m_A4 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// pongf
static void nl_gcr_dbafc5ddaf7a08f8_35_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A3 += go[4];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A5 += go[8];
	double RHS2 = Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A9 += go[11];
	m_A7 += go[12];
	m_A7 += go[13];
	m_A7 += go[14];
	m_A8 += go[15];
	double RHS3 = Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	m_A11 += gt[16];
	m_A11 += gt[17];
	m_A11 += gt[18];
	m_A11 += gt[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A11 += gt[22];
	m_A13 += go[16];
	m_A12 += go[17];
	m_A10 += go[18];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	RHS4 -= go[22] * *cnV[22];
	m_A15 += gt[23];
	m_A15 += gt[24];
	m_A15 += gt[25];
	m_A15 += gt[26];
	m_A15 += gt[27];
	m_A17 += go[23];
	m_A14 += go[24];
	m_A14 += go[25];
	m_A14 += go[26];
	double RHS5 = Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 -= go[27] * *cnV[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A22 += gt[30];
	m_A22 += gt[31];
	m_A19 += go[28];
	m_A20 += go[29];
	m_A18 += go[30];
	double RHS6 = Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 -= go[31] * *cnV[31];
	m_A28 += gt[32];
	m_A28 += gt[33];
	m_A28 += gt[34];
	m_A29 += go[32];
	m_A25 += go[33];
	m_A26 += go[34];
	double RHS7 = Idr[32];
	RHS7 += Idr[33];
	RHS7 += Idr[34];
	m_A34 += gt[35];
	m_A34 += gt[36];
	m_A34 += gt[37];
	m_A31 += go[35];
	m_A30 += go[36];
	m_A33 += go[37];
	double RHS8 = Idr[35];
	RHS8 += Idr[36];
	RHS8 += Idr[37];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A11 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_6 = -f1 * m_A18;
	m_A22 += m_A3 * f1_6;
	RHS6 += f1_6 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_7 = -f2 * m_A25;
	m_A28 += m_A5 * f2_7;
	RHS7 += f2_7 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_5 = -f3 * m_A14;
	m_A15 += m_A7 * f3_5;
	m_A16 += m_A8 * f3_5;
	m_A17 += m_A9 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f3_6 = -f3 * m_A19;
	m_A21 += m_A7 * f3_6;
	m_A22 += m_A8 * f3_6;
	m_A24 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f3_8 = -f3 * m_A30;
	m_A31 += m_A7 * f3_8;
	m_A32 += m_A8 * f3_8;
	m_A34 += m_A9 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_6 = -f4 * m_A20;
	m_A22 += m_A12 * f4_6;
	m_A23 += m_A13 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f4_7 = -f4 * m_A26;
	m_A27 += m_A12 * f4_7;
	m_A28 += m_A13 * f4_7;
	RHS7 += f4_7 * RHS4;
	const double f5 = 1.0 / m_A15;
	const double f5_6 = -f5 * m_A21;
	m_A22 += m_A16 * f5_6;
	m_A24 += m_A17 * f5_6;
	RHS6 += f5_6 * RHS5;
	const double f5_8 = -f5 * m_A31;
	m_A32 += m_A16 * f5_8;
	m_A34 += m_A17 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A22;
	const double f6_7 = -f6 * m_A27;
	m_A28 += m_A23 * f6_7;
	m_A29 += m_A24 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f6_8 = -f6 * m_A32;
	m_A33 += m_A23 * f6_8;
	m_A34 += m_A24 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f7 = 1.0 / m_A28;
	const double f7_8 = -f7 * m_A33;
	m_A34 += m_A29 * f7_8;
	RHS8 += f7_8 * RHS7;
	V[8] = RHS8 / m_A34;
	double tmp7 = 0.0;
	tmp7 += m_A29 * V[8];
	V[7] = (RHS7 - tmp7) / m_A28;
	double tmp6 = 0.0;
	tmp6 += m_A23 * V[7];
	tmp6 += m_A24 * V[8];
	V[6] = (RHS6 - tmp6) / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A16 * V[6];
	tmp5 += m_A17 * V[8];
	V[5] = (RHS5 - tmp5) / m_A15;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[6];
	tmp4 += m_A13 * V[7];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[5];
	tmp3 += m_A8 * V[6];
	tmp3 += m_A9 * V[8];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[7];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[6];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// sundance
static void nl_gcr_e02a162cb515a958_100_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A3 += go[7];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[8] * *cnV[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[9];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A6 += gt[17];
	m_A6 += gt[18];
	m_A7 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	RHS3 -= go[17] * *cnV[17];
	RHS3 -= go[18] * *cnV[18];
	m_A8 += gt[19];
	m_A8 += gt[20];
	m_A8 += gt[21];
	m_A8 += gt[22];
	m_A8 += gt[23];
	m_A8 += gt[24];
	m_A8 += gt[25];
	m_A9 += go[19];
	double RHS4 = Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 += Idr[25];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	RHS4 -= go[22] * *cnV[22];
	RHS4 -= go[23] * *cnV[23];
	RHS4 -= go[24] * *cnV[24];
	RHS4 -= go[25] * *cnV[25];
	m_A10 += gt[26];
	m_A10 += gt[27];
	m_A11 += go[26];
	double RHS5 = Idr[26];
	RHS5 += Idr[27];
	RHS5 -= go[27] * *cnV[27];
	m_A12 += gt[28];
	m_A12 += gt[29];
	m_A13 += go[28];
	double RHS6 = Idr[28];
	RHS6 += Idr[29];
	RHS6 -= go[29] * *cnV[29];
	m_A14 += gt[30];
	m_A14 += gt[31];
	m_A15 += go[30];
	double RHS7 = Idr[30];
	RHS7 += Idr[31];
	RHS7 -= go[31] * *cnV[31];
	m_A16 += gt[32];
	m_A16 += gt[33];
	m_A16 += gt[34];
	m_A16 += gt[35];
	m_A18 += go[32];
	m_A17 += go[33];
	m_A17 += go[34];
	double RHS8 = Idr[32];
	RHS8 += Idr[33];
	RHS8 += Idr[34];
	RHS8 += Idr[35];
	RHS8 -= go[35] * *cnV[35];
	m_A19 += gt[36];
	m_A19 += gt[37];
	m_A19 += gt[38];
	m_A20 += go[36];
	double RHS9 = Idr[36];
	RHS9 += Idr[37];
	RHS9 += Idr[38];
	RHS9 -= go[37] * *cnV[37];
	RHS9 -= go[38] * *cnV[38];
	m_A21 += gt[39];
	m_A21 += gt[40];
	m_A21 += gt[41];
	m_A22 += go[39];
	double RHS10 = Idr[39];
	RHS10 += Idr[40];
	RHS10 += Idr[41];
	RHS10 -= go[40] * *cnV[40];
	RHS10 -= go[41] * *cnV[41];
	m_A23 += gt[42];
	m_A23 += gt[43];
	m_A23 += gt[44];
	m_A23 += gt[45];
	m_A24 += go[42];
	m_A25 += go[43];
	m_A25 += go[44];
	double RHS11 = Idr[42];
	RHS11 += Idr[43];
	RHS11 += Idr[44];
	RHS11 += Idr[45];
	RHS11 -= go[45] * *cnV[45];
	m_A27 += gt[46];
	m_A27 += gt[47];
	m_A26 += go[46];
	double RHS12 = Idr[46];
	RHS12 += Idr[47];
	RHS12 -= go[47] * *cnV[47];
	m_A29 += gt[48];
	m_A29 += gt[49];
	m_A29 += gt[50];
	m_A29 += gt[51];
	m_A28 += go[48];
	m_A30 += go[49];
	double RHS13 = Idr[48];
	RHS13 += Idr[49];
	RHS13 += Idr[50];
	RHS13 += Idr[51];
	RHS13 -= go[50] * *cnV[50];
	RHS13 -= go[51] * *cnV[51];
	m_A31 += gt[52];
	m_A31 += gt[53];
	m_A31 += gt[54];
	m_A32 += go[52];
	double RHS14 = Idr[52];
	RHS14 += Idr[53];
	RHS14 += Idr[54];
	RHS14 -= go[53] * *cnV[53];
	RHS14 -= go[54] * *cnV[54];
	m_A34 += gt[55];
	m_A34 += gt[56];
	m_A35 += go[55];
	m_A33 += go[56];
	double RHS15 = Idr[55];
	RHS15 += Idr[56];
	m_A38 += gt[57];
	m_A38 += gt[58];
	m_A38 += gt[59];
	m_A39 += go[57];
	m_A37 += go[58];
	m_A36 += go[59];
	double RHS16 = Idr[57];
	RHS16 += Idr[58];
	RHS16 += Idr[59];
	m_A41 += gt[60];
	m_A41 += gt[61];
	m_A41 += gt[62];
	m_A41 += gt[63];
	m_A41 += gt[64];
	m_A41 += gt[65];
	m_A41 += gt[66];
	m_A41 += gt[67];
	m_A42 += go[60];
	m_A42 += go[61];
	m_A43 += go[62];
	m_A43 += go[63];
	m_A40 += go[64];
	m_A40 += go[65];
	double RHS17 = Idr[60];
	RHS17 += Idr[61];
	RHS17 += Idr[62];
	RHS17 += Idr[63];
	RHS17 += Idr[64];
	RHS17 += Idr[65];
	RHS17 += Idr[66];
	RHS17 += Idr[67];
	RHS17 -= go[66] * *cnV[66];
	RHS17 -= go[67] * *cnV[67];
	m_A46 += gt[68];
	m_A46 += gt[69];
	m_A46 += gt[70];
	m_A46 += gt[71];
	m_A44 += go[68];
	m_A48 += go[69];
	double RHS18 = Idr[68];
	RHS18 += Idr[69];
	RHS18 += Idr[70];
	RHS18 += Idr[71];
	RHS18 -= go[70] * *cnV[70];
	RHS18 -= go[71] * *cnV[71];
	m_A52 += gt[72];
	m_A52 += gt[73];
	m_A52 += gt[74];
	m_A52 += gt[75];
	m_A50 += go[72];
	m_A51 += go[73];
	m_A51 += go[74];
	m_A49 += go[75];
	double RHS19 = Idr[72];
	RHS19 += Idr[73];
	RHS19 += Idr[74];
	RHS19 += Idr[75];
	m_A55 += gt[76];
	m_A55 += gt[77];
	m_A55 += gt[78];
	m_A55 += gt[79];
	m_A56 += go[76];
	m_A54 += go[77];
	double RHS20 = Idr[76];
	RHS20 += Idr[77];
	RHS20 += Idr[78];
	RHS20 += Idr[79];
	RHS20 -= go[78] * *cnV[78];
	RHS20 -= go[79] * *cnV[79];
	m_A60 += gt[80];
	m_A60 += gt[81];
	m_A60 += gt[82];
	m_A60 += gt[83];
	m_A60 += gt[84];
	m_A62 += go[80];
	m_A59 += go[81];
	m_A58 += go[82];
	m_A57 += go[83];
	double RHS21 = Idr[80];
	RHS21 += Idr[81];
	RHS21 += Idr[82];
	RHS21 += Idr[83];
	RHS21 += Idr[84];
	RHS21 -= go[84] * *cnV[84];
	m_A64 += gt[85];
	m_A64 += gt[86];
	m_A64 += gt[87];
	m_A64 += gt[88];
	m_A65 += go[85];
	m_A63 += go[86];
	double RHS22 = Idr[85];
	RHS22 += Idr[86];
	RHS22 += Idr[87];
	RHS22 += Idr[88];
	RHS22 -= go[87] * *cnV[87];
	RHS22 -= go[88] * *cnV[88];
	m_A69 += gt[89];
	m_A69 += gt[90];
	m_A69 += gt[91];
	m_A69 += gt[92];
	m_A68 += go[89];
	m_A70 += go[90];
	m_A67 += go[91];
	m_A66 += go[92];
	double RHS23 = Idr[89];
	RHS23 += Idr[90];
	RHS23 += Idr[91];
	RHS23 += Idr[92];
	m_A77 += gt[93];
	m_A77 += gt[94];
	m_A77 += gt[95];
	m_A77 += gt[96];
	m_A77 += gt[97];
	m_A77 += gt[98];
	m_A71 += go[93];
	m_A72 += go[94];
	m_A73 += go[95];
	m_A76 += go[96];
	double RHS24 = Idr[93];
	RHS24 += Idr[94];
	RHS24 += Idr[95];
	RHS24 += Idr[96];
	RHS24 += Idr[97];
	RHS24 += Idr[98];
	RHS24 -= go[97] * *cnV[97];
	RHS24 -= go[98] * *cnV[98];
	m_A82 += gt[99];
	m_A82 += gt[100];
	m_A82 += gt[101];
	m_A82 += gt[102];
	m_A82 += gt[103];
	m_A82 += gt[104];
	m_A82 += gt[105];
	m_A82 += gt[106];
	m_A80 += go[99];
	m_A80 += go[100];
	m_A79 += go[101];
	m_A83 += go[102];
	m_A83 += go[103];
	double RHS25 = Idr[99];
	RHS25 += Idr[100];
	RHS25 += Idr[101];
	RHS25 += Idr[102];
	RHS25 += Idr[103];
	RHS25 += Idr[104];
	RHS25 += Idr[105];
	RHS25 += Idr[106];
	RHS25 -= go[104] * *cnV[104];
	RHS25 -= go[105] * *cnV[105];
	RHS25 -= go[106] * *cnV[106];
	m_A90 += gt[107];
	m_A90 += gt[108];
	m_A90 += gt[109];
	m_A90 += gt[110];
	m_A90 += gt[111];
	m_A91 += go[107];
	m_A86 += go[108];
	m_A87 += go[109];
	m_A85 += go[110];
	m_A84 += go[111];
	double RHS26 = Idr[107];
	RHS26 += Idr[108];
	RHS26 += Idr[109];
	RHS26 += Idr[110];
	RHS26 += Idr[111];
	m_A99 += gt[112];
	m_A99 += gt[113];
	m_A99 += gt[114];
	m_A99 += gt[115];
	m_A99 += gt[116];
	m_A99 += gt[117];
	m_A99 += gt[118];
	m_A99 += gt[119];
	m_A99 += gt[120];
	m_A92 += go[112];
	m_A93 += go[113];
	m_A93 += go[114];
	m_A97 += go[115];
	m_A97 += go[116];
	m_A94 += go[117];
	m_A98 += go[118];
	double RHS27 = Idr[112];
	RHS27 += Idr[113];
	RHS27 += Idr[114];
	RHS27 += Idr[115];
	RHS27 += Idr[116];
	RHS27 += Idr[117];
	RHS27 += Idr[118];
	RHS27 += Idr[119];
	RHS27 += Idr[120];
	RHS27 -= go[119] * *cnV[119];
	RHS27 -= go[120] * *cnV[120];
	const double f0 = 1.0 / m_A0;
	const double f0_27 = -f0 * m_A92;
	m_A95 += m_A1 * f0_27;
	RHS27 += f0_27 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_12 = -f1 * m_A26;
	m_A27 += m_A3 * f1_12;
	RHS12 += f1_12 * RHS1;
	const double f1_23 = -f1 * m_A66;
	m_A68 += m_A3 * f1_23;
	RHS23 += f1_23 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_13 = -f2 * m_A28;
	m_A30 += m_A5 * f2_13;
	RHS13 += f2_13 * RHS2;
	const double f2_23 = -f2 * m_A67;
	m_A69 += m_A5 * f2_23;
	RHS23 += f2_23 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_18 = -f3 * m_A44;
	m_A45 += m_A7 * f3_18;
	RHS18 += f3_18 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_24 = -f4 * m_A71;
	m_A74 += m_A9 * f4_24;
	RHS24 += f4_24 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_16 = -f5 * m_A36;
	m_A38 += m_A11 * f5_16;
	RHS16 += f5_16 * RHS5;
	const double f5_21 = -f5 * m_A57;
	m_A59 += m_A11 * f5_21;
	RHS21 += f5_21 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_15 = -f6 * m_A33;
	m_A34 += m_A13 * f6_15;
	RHS15 += f6_15 * RHS6;
	const double f6_26 = -f6 * m_A84;
	m_A86 += m_A13 * f6_26;
	RHS26 += f6_26 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_16 = -f7 * m_A37;
	m_A38 += m_A15 * f7_16;
	RHS16 += f7_16 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_17 = -f8 * m_A40;
	m_A41 += m_A17 * f8_17;
	m_A42 += m_A18 * f8_17;
	RHS17 += f8_17 * RHS8;
	const double f8_19 = -f8 * m_A49;
	m_A51 += m_A17 * f8_19;
	m_A52 += m_A18 * f8_19;
	RHS19 += f8_19 * RHS8;
	const double f9 = 1.0 / m_A19;
	const double f9_19 = -f9 * m_A50;
	m_A52 += m_A20 * f9_19;
	RHS19 += f9_19 * RHS9;
	const double f10 = 1.0 / m_A21;
	const double f10_22 = -f10 * m_A63;
	m_A65 += m_A22 * f10_22;
	RHS22 += f10_22 * RHS10;
	const double f10_26 = -f10 * m_A85;
	m_A90 += m_A22 * f10_26;
	RHS26 += f10_26 * RHS10;
	const double f11 = 1.0 / m_A23;
	const double f11_25 = -f11 * m_A79;
	m_A82 += m_A24 * f11_25;
	m_A83 += m_A25 * f11_25;
	RHS25 += f11_25 * RHS11;
	const double f11_27 = -f11 * m_A93;
	m_A97 += m_A24 * f11_27;
	m_A99 += m_A25 * f11_27;
	RHS27 += f11_27 * RHS11;
	const double f12 = 1.0 / m_A27;
	const double f12_23 = -f12 * m_A68;
	RHS23 += f12_23 * RHS12;
	const double f13 = 1.0 / m_A29;
	const double f13_18 = -f13 * m_A45;
	m_A47 += m_A30 * f13_18;
	RHS18 += f13_18 * RHS13;
	const double f14 = 1.0 / m_A31;
	const double f14_20 = -f14 * m_A54;
	m_A56 += m_A32 * f14_20;
	RHS20 += f14_20 * RHS14;
	const double f14_21 = -f14 * m_A58;
	m_A60 += m_A32 * f14_21;
	RHS21 += f14_21 * RHS14;
	const double f15 = 1.0 / m_A34;
	const double f15_24 = -f15 * m_A72;
	m_A77 += m_A35 * f15_24;
	RHS24 += f15_24 * RHS15;
	const double f15_26 = -f15 * m_A86;
	m_A89 += m_A35 * f15_26;
	RHS26 += f15_26 * RHS15;
	const double f16 = 1.0 / m_A38;
	const double f16_21 = -f16 * m_A59;
	m_A61 += m_A39 * f16_21;
	RHS21 += f16_21 * RHS16;
	const double f16_24 = -f16 * m_A73;
	m_A77 += m_A39 * f16_24;
	RHS24 += f16_24 * RHS16;
	const double f17 = 1.0 / m_A41;
	const double f17_19 = -f17 * m_A51;
	m_A52 += m_A42 * f17_19;
	m_A53 += m_A43 * f17_19;
	RHS19 += f17_19 * RHS17;
	const double f17_25 = -f17 * m_A80;
	m_A81 += m_A42 * f17_25;
	m_A82 += m_A43 * f17_25;
	RHS25 += f17_25 * RHS17;
	const double f18 = 1.0 / m_A46;
	const double f18_26 = -f18 * m_A87;
	m_A88 += m_A47 * f18_26;
	m_A90 += m_A48 * f18_26;
	RHS26 += f18_26 * RHS18;
	const double f19 = 1.0 / m_A52;
	const double f19_25 = -f19 * m_A81;
	m_A82 += m_A53 * f19_25;
	RHS25 += f19_25 * RHS19;
	const double f20 = 1.0 / m_A55;
	const double f20_24 = -f20 * m_A74;
	m_A75 += m_A56 * f20_24;
	RHS24 += f20_24 * RHS20;
	const double f21 = 1.0 / m_A60;
	const double f21_24 = -f21 * m_A75;
	m_A77 += m_A61 * f21_24;
	m_A78 += m_A62 * f21_24;
	RHS24 += f21_24 * RHS21;
	const double f21_27 = -f21 * m_A94;
	m_A96 += m_A61 * f21_27;
	m_A99 += m_A62 * f21_27;
	RHS27 += f21_27 * RHS21;
	const double f22 = 1.0 / m_A64;
	const double f22_27 = -f22 * m_A95;
	m_A98 += m_A65 * f22_27;
	RHS27 += f22_27 * RHS22;
	const double f23 = 1.0 / m_A69;
	const double f23_24 = -f23 * m_A76;
	m_A77 += m_A70 * f23_24;
	RHS24 += f23_24 * RHS23;
	const double f23_26 = -f23 * m_A88;
	m_A89 += m_A70 * f23_26;
	RHS26 += f23_26 * RHS23;
	const double f24 = 1.0 / m_A77;
	const double f24_26 = -f24 * m_A89;
	m_A91 += m_A78 * f24_26;
	RHS26 += f24_26 * RHS24;
	const double f24_27 = -f24 * m_A96;
	m_A99 += m_A78 * f24_27;
	RHS27 += f24_27 * RHS24;
	const double f25 = 1.0 / m_A82;
	const double f25_27 = -f25 * m_A97;
	m_A99 += m_A83 * f25_27;
	RHS27 += f25_27 * RHS25;
	const double f26 = 1.0 / m_A90;
	const double f26_27 = -f26 * m_A98;
	m_A99 += m_A91 * f26_27;
	RHS27 += f26_27 * RHS26;
	V[27] = RHS27 / m_A99;
	double tmp26 = 0.0;
	tmp26 += m_A91 * V[27];
	V[26] = (RHS26 - tmp26) / m_A90;
	double tmp25 = 0.0;
	tmp25 += m_A83 * V[27];
	V[25] = (RHS25 - tmp25) / m_A82;
	double tmp24 = 0.0;
	tmp24 += m_A78 * V[27];
	V[24] = (RHS24 - tmp24) / m_A77;
	double tmp23 = 0.0;
	tmp23 += m_A70 * V[24];
	V[23] = (RHS23 - tmp23) / m_A69;
	double tmp22 = 0.0;
	tmp22 += m_A65 * V[26];
	V[22] = (RHS22 - tmp22) / m_A64;
	double tmp21 = 0.0;
	tmp21 += m_A61 * V[24];
	tmp21 += m_A62 * V[27];
	V[21] = (RHS21 - tmp21) / m_A60;
	double tmp20 = 0.0;
	tmp20 += m_A56 * V[21];
	V[20] = (RHS20 - tmp20) / m_A55;
	double tmp19 = 0.0;
	tmp19 += m_A53 * V[25];
	V[19] = (RHS19 - tmp19) / m_A52;
	double tmp18 = 0.0;
	tmp18 += m_A47 * V[23];
	tmp18 += m_A48 * V[26];
	V[18] = (RHS18 - tmp18) / m_A46;
	double tmp17 = 0.0;
	tmp17 += m_A42 * V[19];
	tmp17 += m_A43 * V[25];
	V[17] = (RHS17 - tmp17) / m_A41;
	double tmp16 = 0.0;
	tmp16 += m_A39 * V[24];
	V[16] = (RHS16 - tmp16) / m_A38;
	double tmp15 = 0.0;
	tmp15 += m_A35 * V[24];
	V[15] = (RHS15 - tmp15) / m_A34;
	double tmp14 = 0.0;
	tmp14 += m_A32 * V[21];
	V[14] = (RHS14 - tmp14) / m_A31;
	double tmp13 = 0.0;
	tmp13 += m_A30 * V[23];
	V[13] = (RHS13 - tmp13) / m_A29;
	double tmp12 = 0.0;
	V[12] = (RHS12 - tmp12) / m_A27;
	double tmp11 = 0.0;
	tmp11 += m_A24 * V[25];
	tmp11 += m_A25 * V[27];
	V[11] = (RHS11 - tmp11) / m_A23;
	double tmp10 = 0.0;
	tmp10 += m_A22 * V[26];
	V[10] = (RHS10 - tmp10) / m_A21;
	double tmp9 = 0.0;
	tmp9 += m_A20 * V[19];
	V[9] = (RHS9 - tmp9) / m_A19;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[17];
	tmp8 += m_A18 * V[19];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[16];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[15];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[16];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[20];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[13];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[23];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[12];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[22];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// speedfrk
static void nl_gcr_e07b5b086812756c_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A3 += go[3];
	m_A3 += go[4];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A5 += go[7];
	m_A5 += go[8];
	m_A4 += go[9];
	double RHS2 = Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// solarq
static void nl_gcr_e081f90c2e0313f6_45_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A2 += gt[10];
	m_A2 += gt[11];
	m_A5 += go[4];
	m_A4 += go[5];
	m_A4 += go[6];
	m_A3 += go[7];
	m_A3 += go[8];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 += Idr[10];
	RHS1 += Idr[11];
	RHS1 -= go[9] * *cnV[9];
	RHS1 -= go[10] * *cnV[10];
	RHS1 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A7 += go[12];
	double RHS2 = Idr[12];
	RHS2 += Idr[13];
	RHS2 += Idr[14];
	RHS2 += Idr[15];
	RHS2 -= go[13] * *cnV[13];
	RHS2 -= go[14] * *cnV[14];
	RHS2 -= go[15] * *cnV[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A8 += gt[18];
	m_A10 += go[16];
	m_A9 += go[17];
	double RHS3 = Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 -= go[18] * *cnV[18];
	m_A11 += gt[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A11 += gt[22];
	m_A11 += gt[23];
	m_A11 += gt[24];
	m_A11 += gt[25];
	m_A11 += gt[26];
	m_A14 += go[19];
	m_A13 += go[20];
	m_A13 += go[21];
	m_A12 += go[22];
	m_A12 += go[23];
	double RHS4 = Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 += Idr[24];
	RHS4 += Idr[25];
	RHS4 += Idr[26];
	RHS4 -= go[24] * *cnV[24];
	RHS4 -= go[25] * *cnV[25];
	RHS4 -= go[26] * *cnV[26];
	m_A17 += gt[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A17 += gt[30];
	m_A17 += gt[31];
	m_A17 += gt[32];
	m_A16 += go[27];
	m_A16 += go[28];
	m_A15 += go[29];
	double RHS5 = Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 += Idr[30];
	RHS5 += Idr[31];
	RHS5 += Idr[32];
	RHS5 -= go[30] * *cnV[30];
	RHS5 -= go[31] * *cnV[31];
	RHS5 -= go[32] * *cnV[32];
	m_A22 += gt[33];
	m_A22 += gt[34];
	m_A22 += gt[35];
	m_A22 += gt[36];
	m_A22 += gt[37];
	m_A22 += gt[38];
	m_A21 += go[33];
	m_A21 += go[34];
	m_A20 += go[35];
	double RHS6 = Idr[33];
	RHS6 += Idr[34];
	RHS6 += Idr[35];
	RHS6 += Idr[36];
	RHS6 += Idr[37];
	RHS6 += Idr[38];
	RHS6 -= go[36] * *cnV[36];
	RHS6 -= go[37] * *cnV[37];
	RHS6 -= go[38] * *cnV[38];
	m_A27 += gt[39];
	m_A27 += gt[40];
	m_A27 += gt[41];
	m_A27 += gt[42];
	m_A27 += gt[43];
	m_A28 += go[39];
	m_A28 += go[40];
	m_A25 += go[41];
	m_A25 += go[42];
	double RHS7 = Idr[39];
	RHS7 += Idr[40];
	RHS7 += Idr[41];
	RHS7 += Idr[42];
	RHS7 += Idr[43];
	RHS7 -= go[43] * *cnV[43];
	m_A33 += gt[44];
	m_A33 += gt[45];
	m_A33 += gt[46];
	m_A33 += gt[47];
	m_A33 += gt[48];
	m_A32 += go[44];
	m_A32 += go[45];
	m_A29 += go[46];
	m_A30 += go[47];
	double RHS8 = Idr[44];
	RHS8 += Idr[45];
	RHS8 += Idr[46];
	RHS8 += Idr[47];
	RHS8 += Idr[48];
	RHS8 -= go[48] * *cnV[48];
	m_A37 += gt[49];
	m_A37 += gt[50];
	m_A37 += gt[51];
	m_A37 += gt[52];
	m_A37 += gt[53];
	m_A38 += go[49];
	m_A38 += go[50];
	m_A35 += go[51];
	m_A35 += go[52];
	double RHS9 = Idr[49];
	RHS9 += Idr[50];
	RHS9 += Idr[51];
	RHS9 += Idr[52];
	RHS9 += Idr[53];
	RHS9 -= go[53] * *cnV[53];
	m_A44 += gt[54];
	m_A44 += gt[55];
	m_A44 += gt[56];
	m_A44 += gt[57];
	m_A44 += gt[58];
	m_A43 += go[54];
	m_A43 += go[55];
	m_A40 += go[56];
	m_A39 += go[57];
	double RHS10 = Idr[54];
	RHS10 += Idr[55];
	RHS10 += Idr[56];
	RHS10 += Idr[57];
	RHS10 += Idr[58];
	RHS10 -= go[58] * *cnV[58];
	const double f0 = 1.0 / m_A0;
	const double f0_5 = -f0 * m_A15;
	m_A17 += m_A1 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A16;
	m_A17 += m_A3 * f1_5;
	m_A18 += m_A4 * f1_5;
	m_A19 += m_A5 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f1_7 = -f1 * m_A25;
	m_A26 += m_A3 * f1_7;
	m_A27 += m_A4 * f1_7;
	m_A28 += m_A5 * f1_7;
	RHS7 += f1_7 * RHS1;
	const double f1_8 = -f1 * m_A29;
	m_A31 += m_A3 * f1_8;
	m_A32 += m_A4 * f1_8;
	m_A33 += m_A5 * f1_8;
	RHS8 += f1_8 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_6 = -f2 * m_A20;
	m_A22 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_8 = -f3 * m_A30;
	m_A33 += m_A9 * f3_8;
	m_A34 += m_A10 * f3_8;
	RHS8 += f3_8 * RHS3;
	const double f3_10 = -f3 * m_A39;
	m_A42 += m_A9 * f3_10;
	m_A44 += m_A10 * f3_10;
	RHS10 += f3_10 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_6 = -f4 * m_A21;
	m_A22 += m_A12 * f4_6;
	m_A23 += m_A13 * f4_6;
	m_A24 += m_A14 * f4_6;
	RHS6 += f4_6 * RHS4;
	const double f4_9 = -f4 * m_A35;
	m_A36 += m_A12 * f4_9;
	m_A37 += m_A13 * f4_9;
	m_A38 += m_A14 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f4_10 = -f4 * m_A40;
	m_A41 += m_A12 * f4_10;
	m_A43 += m_A13 * f4_10;
	m_A44 += m_A14 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_7 = -f5 * m_A26;
	m_A27 += m_A18 * f5_7;
	m_A28 += m_A19 * f5_7;
	RHS7 += f5_7 * RHS5;
	const double f5_8 = -f5 * m_A31;
	m_A32 += m_A18 * f5_8;
	m_A33 += m_A19 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A22;
	const double f6_9 = -f6 * m_A36;
	m_A37 += m_A23 * f6_9;
	m_A38 += m_A24 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f6_10 = -f6 * m_A41;
	m_A43 += m_A23 * f6_10;
	m_A44 += m_A24 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f7 = 1.0 / m_A27;
	const double f7_8 = -f7 * m_A32;
	m_A33 += m_A28 * f7_8;
	RHS8 += f7_8 * RHS7;
	const double f8 = 1.0 / m_A33;
	const double f8_10 = -f8 * m_A42;
	m_A44 += m_A34 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f9 = 1.0 / m_A37;
	const double f9_10 = -f9 * m_A43;
	m_A44 += m_A38 * f9_10;
	RHS10 += f9_10 * RHS9;
	V[10] = RHS10 / m_A44;
	double tmp9 = 0.0;
	tmp9 += m_A38 * V[10];
	V[9] = (RHS9 - tmp9) / m_A37;
	double tmp8 = 0.0;
	tmp8 += m_A34 * V[10];
	V[8] = (RHS8 - tmp8) / m_A33;
	double tmp7 = 0.0;
	tmp7 += m_A28 * V[8];
	V[7] = (RHS7 - tmp7) / m_A27;
	double tmp6 = 0.0;
	tmp6 += m_A23 * V[9];
	tmp6 += m_A24 * V[10];
	V[6] = (RHS6 - tmp6) / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[7];
	tmp5 += m_A19 * V[8];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[6];
	tmp4 += m_A13 * V[9];
	tmp4 += m_A14 * V[10];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[8];
	tmp3 += m_A10 * V[10];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[6];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[5];
	tmp1 += m_A4 * V[7];
	tmp1 += m_A5 * V[8];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// spacewar
static void nl_gcr_e0b492db40bba291_20_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	m_A4 += go[3];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	m_A5 += gt[4];
	m_A5 += gt[5];
	m_A7 += go[4];
	m_A6 += go[5];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	m_A9 += gt[6];
	m_A9 += gt[7];
	m_A9 += gt[8];
	m_A8 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 += Idr[8];
	RHS3 -= go[7] * *cnV[7];
	RHS3 -= go[8] * *cnV[8];
	m_A15 += gt[9];
	m_A15 += gt[10];
	m_A15 += gt[11];
	m_A11 += go[9];
	m_A13 += go[10];
	m_A12 += go[11];
	double RHS4 = Idr[9];
	RHS4 += Idr[10];
	RHS4 += Idr[11];
	m_A19 += gt[12];
	m_A19 += gt[13];
	m_A19 += gt[14];
	m_A17 += go[12];
	double RHS5 = Idr[12];
	RHS5 += Idr[13];
	RHS5 += Idr[14];
	RHS5 -= go[13] * *cnV[13];
	RHS5 -= go[14] * *cnV[14];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A11;
	m_A15 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A8;
	m_A9 += m_A3 * f1_3;
	m_A10 += m_A4 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f1_4 = -f1 * m_A12;
	m_A14 += m_A3 * f1_4;
	m_A15 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A13;
	m_A15 += m_A6 * f2_4;
	m_A16 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A17;
	m_A18 += m_A6 * f2_5;
	m_A19 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A9;
	const double f3_4 = -f3 * m_A14;
	m_A15 += m_A10 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f4 = 1.0 / m_A15;
	const double f4_5 = -f4 * m_A18;
	m_A19 += m_A16 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A19;
	double tmp4 = 0.0;
	tmp4 += m_A16 * V[5];
	V[4] = (RHS4 - tmp4) / m_A15;
	double tmp3 = 0.0;
	tmp3 += m_A10 * V[4];
	V[3] = (RHS3 - tmp3) / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	tmp1 += m_A4 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// speedfrk
static void nl_gcr_e4f2ffbf201a3d0c_37_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A5 += go[6];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A7 += go[9];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 -= go[10] * *cnV[10];
	RHS3 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A9 += go[12];
	double RHS4 = Idr[12];
	RHS4 += Idr[13];
	RHS4 += Idr[14];
	RHS4 -= go[13] * *cnV[13];
	RHS4 -= go[14] * *cnV[14];
	m_A10 += gt[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A11 += go[15];
	double RHS5 = Idr[15];
	RHS5 += Idr[16];
	RHS5 += Idr[17];
	RHS5 -= go[16] * *cnV[16];
	RHS5 -= go[17] * *cnV[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A13 += go[18];
	double RHS6 = Idr[18];
	RHS6 += Idr[19];
	RHS6 += Idr[20];
	RHS6 -= go[19] * *cnV[19];
	RHS6 -= go[20] * *cnV[20];
	m_A14 += gt[21];
	m_A14 += gt[22];
	m_A14 += gt[23];
	m_A15 += go[21];
	double RHS7 = Idr[21];
	RHS7 += Idr[22];
	RHS7 += Idr[23];
	RHS7 -= go[22] * *cnV[22];
	RHS7 -= go[23] * *cnV[23];
	m_A16 += gt[24];
	m_A16 += gt[25];
	m_A16 += gt[26];
	m_A17 += go[24];
	double RHS8 = Idr[24];
	RHS8 += Idr[25];
	RHS8 += Idr[26];
	RHS8 -= go[25] * *cnV[25];
	RHS8 -= go[26] * *cnV[26];
	m_A18 += gt[27];
	m_A18 += gt[28];
	m_A18 += gt[29];
	m_A19 += go[27];
	double RHS9 = Idr[27];
	RHS9 += Idr[28];
	RHS9 += Idr[29];
	RHS9 -= go[28] * *cnV[28];
	RHS9 -= go[29] * *cnV[29];
	m_A24 += gt[30];
	m_A24 += gt[31];
	m_A24 += gt[32];
	m_A24 += gt[33];
	m_A24 += gt[34];
	m_A25 += go[30];
	m_A23 += go[31];
	m_A22 += go[32];
	m_A21 += go[33];
	m_A20 += go[34];
	double RHS10 = Idr[30];
	RHS10 += Idr[31];
	RHS10 += Idr[32];
	RHS10 += Idr[33];
	RHS10 += Idr[34];
	m_A29 += gt[35];
	m_A29 += gt[36];
	m_A29 += gt[37];
	m_A29 += gt[38];
	m_A29 += gt[39];
	m_A30 += go[35];
	m_A28 += go[36];
	m_A27 += go[37];
	m_A26 += go[38];
	double RHS11 = Idr[35];
	RHS11 += Idr[36];
	RHS11 += Idr[37];
	RHS11 += Idr[38];
	RHS11 += Idr[39];
	RHS11 -= go[39] * *cnV[39];
	m_A36 += gt[40];
	m_A36 += gt[41];
	m_A36 += gt[42];
	m_A36 += gt[43];
	m_A36 += gt[44];
	m_A35 += go[40];
	m_A34 += go[41];
	m_A33 += go[42];
	m_A32 += go[43];
	m_A31 += go[44];
	double RHS12 = Idr[40];
	RHS12 += Idr[41];
	RHS12 += Idr[42];
	RHS12 += Idr[43];
	RHS12 += Idr[44];
	const double f0 = 1.0 / m_A0;
	const double f0_10 = -f0 * m_A20;
	m_A24 += m_A1 * f0_10;
	RHS10 += f0_10 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_10 = -f1 * m_A21;
	m_A24 += m_A3 * f1_10;
	RHS10 += f1_10 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_10 = -f2 * m_A22;
	m_A24 += m_A5 * f2_10;
	RHS10 += f2_10 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_11 = -f3 * m_A26;
	m_A29 += m_A7 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_12 = -f4 * m_A31;
	m_A36 += m_A9 * f4_12;
	RHS12 += f4_12 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_10 = -f5 * m_A23;
	m_A24 += m_A11 * f5_10;
	RHS10 += f5_10 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_11 = -f6 * m_A27;
	m_A29 += m_A13 * f6_11;
	RHS11 += f6_11 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_12 = -f7 * m_A32;
	m_A36 += m_A15 * f7_12;
	RHS12 += f7_12 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_12 = -f8 * m_A33;
	m_A36 += m_A17 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f9 = 1.0 / m_A18;
	const double f9_11 = -f9 * m_A28;
	m_A29 += m_A19 * f9_11;
	RHS11 += f9_11 * RHS9;
	const double f10 = 1.0 / m_A24;
	const double f10_12 = -f10 * m_A34;
	m_A36 += m_A25 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f11 = 1.0 / m_A29;
	const double f11_12 = -f11 * m_A35;
	m_A36 += m_A30 * f11_12;
	RHS12 += f11_12 * RHS11;
	V[12] = RHS12 / m_A36;
	double tmp11 = 0.0;
	tmp11 += m_A30 * V[12];
	V[11] = (RHS11 - tmp11) / m_A29;
	double tmp10 = 0.0;
	tmp10 += m_A25 * V[12];
	V[10] = (RHS10 - tmp10) / m_A24;
	double tmp9 = 0.0;
	tmp9 += m_A19 * V[11];
	V[9] = (RHS9 - tmp9) / m_A18;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[12];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[12];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[11];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[10];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[12];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[11];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[10];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[10];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[10];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// pongf
static void nl_gcr_e51b463cd890ef6d_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A6 += gt[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A5 += go[5];
	m_A4 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 -= go[7] * *cnV[7];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// sundance
static void nl_gcr_e5b7711fac1ea80c_8_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[0] * *cnV[0];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A1 += gt[3];
	m_A1 += gt[4];
	m_A1 += gt[5];
	m_A1 += gt[6];
	m_A1 += gt[7];
	m_A1 += gt[8];
	m_A1 += gt[9];
	m_A2 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A4 += gt[12];
	m_A4 += gt[13];
	m_A3 += go[10];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[11] * *cnV[11];
	RHS2 -= go[12] * *cnV[12];
	RHS2 -= go[13] * *cnV[13];
	m_A7 += gt[14];
	m_A7 += gt[15];
	m_A7 += gt[16];
	m_A5 += go[14];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 -= go[15] * *cnV[15];
	RHS3 -= go[16] * *cnV[16];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A3;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A1;
	const double f1_3 = -f1 * m_A5;
	m_A6 += m_A2 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_3 = -f2 * m_A6;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A7;
	double tmp2 = 0.0;
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A2 * V[2];
	V[1] = (RHS1 - tmp1) / m_A1;
	double tmp0 = 0.0;
	V[0] = (RHS0 - tmp0) / m_A0;
}

// ripoff
static void nl_gcr_e60314070a75e121_20_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A0 += gt[6];
	m_A2 += go[0];
	m_A2 += go[1];
	m_A1 += go[2];
	m_A1 += go[3];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 += Idr[6];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	RHS0 -= go[6] * *cnV[6];
	m_A3 += gt[7];
	m_A3 += gt[8];
	m_A4 += go[7];
	double RHS1 = Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[8] * *cnV[8];
	m_A6 += gt[9];
	m_A6 += gt[10];
	m_A6 += gt[11];
	m_A6 += gt[12];
	m_A7 += go[9];
	m_A5 += go[10];
	m_A5 += go[11];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[12] * *cnV[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A8 += gt[16];
	m_A8 += gt[17];
	m_A9 += go[13];
	m_A9 += go[14];
	m_A10 += go[15];
	m_A10 += go[16];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 -= go[17] * *cnV[17];
	m_A13 += gt[18];
	m_A13 += gt[19];
	m_A13 += gt[20];
	m_A13 += gt[21];
	m_A12 += go[18];
	m_A12 += go[19];
	m_A14 += go[20];
	m_A11 += go[21];
	double RHS4 = Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	m_A19 += gt[22];
	m_A19 += gt[23];
	m_A19 += gt[24];
	m_A19 += gt[25];
	m_A19 += gt[26];
	m_A19 += gt[27];
	m_A19 += gt[28];
	m_A19 += gt[29];
	m_A18 += go[22];
	m_A17 += go[23];
	m_A17 += go[24];
	m_A16 += go[25];
	m_A15 += go[26];
	m_A15 += go[27];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 += Idr[27];
	RHS5 += Idr[28];
	RHS5 += Idr[29];
	RHS5 -= go[28] * *cnV[28];
	RHS5 -= go[29] * *cnV[29];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A5;
	m_A6 += m_A1 * f0_2;
	m_A7 += m_A2 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f0_5 = -f0 * m_A15;
	m_A16 += m_A1 * f0_5;
	m_A19 += m_A2 * f0_5;
	RHS5 += f0_5 * RHS0;
	const double f1 = 1.0 / m_A3;
	const double f1_4 = -f1 * m_A11;
	m_A13 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A6;
	const double f2_5 = -f2 * m_A16;
	m_A19 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_4 = -f3 * m_A12;
	m_A13 += m_A9 * f3_4;
	m_A14 += m_A10 * f3_4;
	RHS4 += f3_4 * RHS3;
	const double f3_5 = -f3 * m_A17;
	m_A18 += m_A9 * f3_5;
	m_A19 += m_A10 * f3_5;
	RHS5 += f3_5 * RHS3;
	const double f4 = 1.0 / m_A13;
	const double f4_5 = -f4 * m_A18;
	m_A19 += m_A14 * f4_5;
	RHS5 += f4_5 * RHS4;
	V[5] = RHS5 / m_A19;
	double tmp4 = 0.0;
	tmp4 += m_A14 * V[5];
	V[4] = (RHS4 - tmp4) / m_A13;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[4];
	tmp3 += m_A10 * V[5];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A4 * V[4];
	V[1] = (RHS1 - tmp1) / m_A3;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	tmp0 += m_A2 * V[5];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// cheekyms
static void nl_gcr_e75302e17c866419_150_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	double m_A119(0.0);
	double m_A120(0.0);
	double m_A121(0.0);
	double m_A122(0.0);
	double m_A123(0.0);
	double m_A124(0.0);
	double m_A125(0.0);
	double m_A126(0.0);
	double m_A127(0.0);
	double m_A128(0.0);
	double m_A129(0.0);
	double m_A130(0.0);
	double m_A131(0.0);
	double m_A132(0.0);
	double m_A133(0.0);
	double m_A134(0.0);
	double m_A135(0.0);
	double m_A136(0.0);
	double m_A137(0.0);
	double m_A138(0.0);
	double m_A139(0.0);
	double m_A140(0.0);
	double m_A141(0.0);
	double m_A142(0.0);
	double m_A143(0.0);
	double m_A144(0.0);
	double m_A145(0.0);
	double m_A146(0.0);
	double m_A147(0.0);
	double m_A148(0.0);
	double m_A149(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A6 += go[6];
	m_A5 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 -= go[8] * *cnV[8];
	m_A7 += gt[9];
	m_A7 += gt[10];
	m_A7 += gt[11];
	m_A7 += gt[12];
	m_A7 += gt[13];
	m_A10 += go[9];
	m_A9 += go[10];
	m_A8 += go[11];
	double RHS3 = Idr[9];
	RHS3 += Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	m_A11 += gt[14];
	m_A11 += gt[15];
	m_A11 += gt[16];
	m_A12 += go[14];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 -= go[15] * *cnV[15];
	RHS4 -= go[16] * *cnV[16];
	m_A13 += gt[17];
	m_A13 += gt[18];
	m_A13 += gt[19];
	m_A13 += gt[20];
	m_A13 += gt[21];
	m_A13 += gt[22];
	m_A13 += gt[23];
	m_A15 += go[17];
	m_A14 += go[18];
	double RHS5 = Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 -= go[19] * *cnV[19];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	RHS5 -= go[23] * *cnV[23];
	m_A16 += gt[24];
	m_A16 += gt[25];
	m_A16 += gt[26];
	m_A17 += go[24];
	double RHS6 = Idr[24];
	RHS6 += Idr[25];
	RHS6 += Idr[26];
	RHS6 -= go[25] * *cnV[25];
	RHS6 -= go[26] * *cnV[26];
	m_A18 += gt[27];
	m_A18 += gt[28];
	m_A19 += go[27];
	double RHS7 = Idr[27];
	RHS7 += Idr[28];
	RHS7 -= go[28] * *cnV[28];
	m_A20 += gt[29];
	m_A20 += gt[30];
	m_A20 += gt[31];
	m_A21 += go[29];
	m_A23 += go[30];
	m_A22 += go[31];
	double RHS8 = Idr[29];
	RHS8 += Idr[30];
	RHS8 += Idr[31];
	m_A24 += gt[32];
	m_A24 += gt[33];
	m_A24 += gt[34];
	m_A25 += go[32];
	double RHS9 = Idr[32];
	RHS9 += Idr[33];
	RHS9 += Idr[34];
	RHS9 -= go[33] * *cnV[33];
	RHS9 -= go[34] * *cnV[34];
	m_A26 += gt[35];
	m_A26 += gt[36];
	m_A26 += gt[37];
	m_A26 += gt[38];
	m_A27 += go[35];
	m_A28 += go[36];
	double RHS10 = Idr[35];
	RHS10 += Idr[36];
	RHS10 += Idr[37];
	RHS10 += Idr[38];
	RHS10 -= go[37] * *cnV[37];
	RHS10 -= go[38] * *cnV[38];
	m_A29 += gt[39];
	m_A29 += gt[40];
	m_A30 += go[39];
	double RHS11 = Idr[39];
	RHS11 += Idr[40];
	RHS11 -= go[40] * *cnV[40];
	m_A31 += gt[41];
	m_A31 += gt[42];
	m_A31 += gt[43];
	m_A31 += gt[44];
	m_A32 += go[41];
	m_A33 += go[42];
	double RHS12 = Idr[41];
	RHS12 += Idr[42];
	RHS12 += Idr[43];
	RHS12 += Idr[44];
	RHS12 -= go[43] * *cnV[43];
	RHS12 -= go[44] * *cnV[44];
	m_A34 += gt[45];
	m_A34 += gt[46];
	m_A34 += gt[47];
	m_A36 += go[45];
	m_A35 += go[46];
	double RHS13 = Idr[45];
	RHS13 += Idr[46];
	RHS13 += Idr[47];
	RHS13 -= go[47] * *cnV[47];
	m_A37 += gt[48];
	m_A37 += gt[49];
	m_A38 += go[48];
	double RHS14 = Idr[48];
	RHS14 += Idr[49];
	RHS14 -= go[49] * *cnV[49];
	m_A39 += gt[50];
	m_A39 += gt[51];
	m_A40 += go[50];
	double RHS15 = Idr[50];
	RHS15 += Idr[51];
	RHS15 -= go[51] * *cnV[51];
	m_A41 += gt[52];
	m_A41 += gt[53];
	m_A42 += go[52];
	double RHS16 = Idr[52];
	RHS16 += Idr[53];
	RHS16 -= go[53] * *cnV[53];
	m_A43 += gt[54];
	m_A43 += gt[55];
	m_A43 += gt[56];
	m_A43 += gt[57];
	m_A43 += gt[58];
	m_A44 += go[54];
	m_A46 += go[55];
	m_A45 += go[56];
	double RHS17 = Idr[54];
	RHS17 += Idr[55];
	RHS17 += Idr[56];
	RHS17 += Idr[57];
	RHS17 += Idr[58];
	RHS17 -= go[57] * *cnV[57];
	RHS17 -= go[58] * *cnV[58];
	m_A47 += gt[59];
	m_A47 += gt[60];
	m_A47 += gt[61];
	m_A47 += gt[62];
	m_A47 += gt[63];
	m_A48 += go[59];
	m_A50 += go[60];
	m_A49 += go[61];
	double RHS18 = Idr[59];
	RHS18 += Idr[60];
	RHS18 += Idr[61];
	RHS18 += Idr[62];
	RHS18 += Idr[63];
	RHS18 -= go[62] * *cnV[62];
	RHS18 -= go[63] * *cnV[63];
	m_A51 += gt[64];
	m_A51 += gt[65];
	m_A52 += go[64];
	double RHS19 = Idr[64];
	RHS19 += Idr[65];
	RHS19 -= go[65] * *cnV[65];
	m_A55 += gt[66];
	m_A55 += gt[67];
	m_A54 += go[66];
	m_A53 += go[67];
	double RHS20 = Idr[66];
	RHS20 += Idr[67];
	m_A60 += gt[68];
	m_A60 += gt[69];
	m_A60 += gt[70];
	m_A58 += go[68];
	m_A57 += go[69];
	double RHS21 = Idr[68];
	RHS21 += Idr[69];
	RHS21 += Idr[70];
	RHS21 -= go[70] * *cnV[70];
	m_A63 += gt[71];
	m_A63 += gt[72];
	m_A64 += go[71];
	double RHS22 = Idr[71];
	RHS22 += Idr[72];
	RHS22 -= go[72] * *cnV[72];
	m_A65 += gt[73];
	m_A65 += gt[74];
	m_A65 += gt[75];
	m_A66 += go[73];
	double RHS23 = Idr[73];
	RHS23 += Idr[74];
	RHS23 += Idr[75];
	RHS23 -= go[74] * *cnV[74];
	RHS23 -= go[75] * *cnV[75];
	m_A69 += gt[76];
	m_A69 += gt[77];
	m_A69 += gt[78];
	m_A67 += go[76];
	m_A68 += go[77];
	double RHS24 = Idr[76];
	RHS24 += Idr[77];
	RHS24 += Idr[78];
	RHS24 -= go[78] * *cnV[78];
	m_A76 += gt[79];
	m_A76 += gt[80];
	m_A73 += go[79];
	m_A72 += go[80];
	double RHS25 = Idr[79];
	RHS25 += Idr[80];
	m_A81 += gt[81];
	m_A81 += gt[82];
	m_A80 += go[81];
	m_A79 += go[82];
	double RHS26 = Idr[81];
	RHS26 += Idr[82];
	m_A84 += gt[83];
	m_A84 += gt[84];
	m_A84 += gt[85];
	m_A85 += go[83];
	m_A83 += go[84];
	double RHS27 = Idr[83];
	RHS27 += Idr[84];
	RHS27 += Idr[85];
	RHS27 -= go[85] * *cnV[85];
	m_A88 += gt[86];
	m_A88 += gt[87];
	m_A87 += go[86];
	m_A86 += go[87];
	double RHS28 = Idr[86];
	RHS28 += Idr[87];
	m_A95 += gt[88];
	m_A95 += gt[89];
	m_A95 += gt[90];
	m_A95 += gt[91];
	m_A95 += gt[92];
	m_A90 += go[88];
	m_A92 += go[89];
	m_A91 += go[90];
	double RHS29 = Idr[88];
	RHS29 += Idr[89];
	RHS29 += Idr[90];
	RHS29 += Idr[91];
	RHS29 += Idr[92];
	RHS29 -= go[91] * *cnV[91];
	RHS29 -= go[92] * *cnV[92];
	m_A100 += gt[93];
	m_A100 += gt[94];
	m_A100 += gt[95];
	m_A100 += gt[96];
	m_A100 += gt[97];
	m_A100 += gt[98];
	m_A100 += gt[99];
	m_A98 += go[93];
	m_A101 += go[94];
	double RHS30 = Idr[93];
	RHS30 += Idr[94];
	RHS30 += Idr[95];
	RHS30 += Idr[96];
	RHS30 += Idr[97];
	RHS30 += Idr[98];
	RHS30 += Idr[99];
	RHS30 -= go[95] * *cnV[95];
	RHS30 -= go[96] * *cnV[96];
	RHS30 -= go[97] * *cnV[97];
	RHS30 -= go[98] * *cnV[98];
	RHS30 -= go[99] * *cnV[99];
	m_A103 += gt[100];
	m_A103 += gt[101];
	m_A103 += gt[102];
	m_A103 += gt[103];
	m_A103 += gt[104];
	m_A103 += gt[105];
	m_A104 += go[100];
	m_A104 += go[101];
	m_A102 += go[102];
	double RHS31 = Idr[100];
	RHS31 += Idr[101];
	RHS31 += Idr[102];
	RHS31 += Idr[103];
	RHS31 += Idr[104];
	RHS31 += Idr[105];
	RHS31 -= go[103] * *cnV[103];
	RHS31 -= go[104] * *cnV[104];
	RHS31 -= go[105] * *cnV[105];
	m_A110 += gt[106];
	m_A110 += gt[107];
	m_A110 += gt[108];
	m_A106 += go[106];
	m_A107 += go[107];
	m_A105 += go[108];
	double RHS32 = Idr[106];
	RHS32 += Idr[107];
	RHS32 += Idr[108];
	m_A114 += gt[109];
	m_A114 += gt[110];
	m_A114 += gt[111];
	m_A114 += gt[112];
	m_A114 += gt[113];
	m_A114 += gt[114];
	m_A114 += gt[115];
	m_A112 += go[109];
	m_A115 += go[110];
	double RHS33 = Idr[109];
	RHS33 += Idr[110];
	RHS33 += Idr[111];
	RHS33 += Idr[112];
	RHS33 += Idr[113];
	RHS33 += Idr[114];
	RHS33 += Idr[115];
	RHS33 -= go[111] * *cnV[111];
	RHS33 -= go[112] * *cnV[112];
	RHS33 -= go[113] * *cnV[113];
	RHS33 -= go[114] * *cnV[114];
	RHS33 -= go[115] * *cnV[115];
	m_A121 += gt[116];
	m_A121 += gt[117];
	m_A121 += gt[118];
	m_A121 += gt[119];
	m_A121 += gt[120];
	m_A121 += gt[121];
	m_A121 += gt[122];
	m_A118 += go[116];
	m_A116 += go[117];
	double RHS34 = Idr[116];
	RHS34 += Idr[117];
	RHS34 += Idr[118];
	RHS34 += Idr[119];
	RHS34 += Idr[120];
	RHS34 += Idr[121];
	RHS34 += Idr[122];
	RHS34 -= go[118] * *cnV[118];
	RHS34 -= go[119] * *cnV[119];
	RHS34 -= go[120] * *cnV[120];
	RHS34 -= go[121] * *cnV[121];
	RHS34 -= go[122] * *cnV[122];
	m_A125 += gt[123];
	m_A125 += gt[124];
	m_A125 += gt[125];
	m_A124 += go[123];
	m_A126 += go[124];
	m_A123 += go[125];
	double RHS35 = Idr[123];
	RHS35 += Idr[124];
	RHS35 += Idr[125];
	m_A132 += gt[126];
	m_A132 += gt[127];
	m_A132 += gt[128];
	m_A127 += go[126];
	m_A128 += go[127];
	m_A130 += go[128];
	double RHS36 = Idr[126];
	RHS36 += Idr[127];
	RHS36 += Idr[128];
	m_A149 += gt[129];
	m_A149 += gt[130];
	m_A149 += gt[131];
	m_A149 += gt[132];
	m_A149 += gt[133];
	m_A149 += gt[134];
	m_A149 += gt[135];
	m_A149 += gt[136];
	m_A149 += gt[137];
	m_A149 += gt[138];
	m_A149 += gt[139];
	m_A140 += go[129];
	m_A147 += go[130];
	m_A139 += go[131];
	m_A138 += go[132];
	m_A137 += go[133];
	m_A136 += go[134];
	m_A135 += go[135];
	m_A134 += go[136];
	m_A143 += go[137];
	m_A143 += go[138];
	double RHS37 = Idr[129];
	RHS37 += Idr[130];
	RHS37 += Idr[131];
	RHS37 += Idr[132];
	RHS37 += Idr[133];
	RHS37 += Idr[134];
	RHS37 += Idr[135];
	RHS37 += Idr[136];
	RHS37 += Idr[137];
	RHS37 += Idr[138];
	RHS37 += Idr[139];
	RHS37 -= go[139] * *cnV[139];
	const double f0 = 1.0 / m_A0;
	const double f0_31 = -f0 * m_A102;
	m_A103 += m_A1 * f0_31;
	RHS31 += f0_31 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_20 = -f1 * m_A53;
	m_A55 += m_A3 * f1_20;
	RHS20 += f1_20 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_20 = -f2 * m_A54;
	m_A55 += m_A5 * f2_20;
	m_A56 += m_A6 * f2_20;
	RHS20 += f2_20 * RHS2;
	const double f2_21 = -f2 * m_A57;
	m_A59 += m_A5 * f2_21;
	m_A60 += m_A6 * f2_21;
	RHS21 += f2_21 * RHS2;
	const double f2_34 = -f2 * m_A116;
	m_A117 += m_A5 * f2_34;
	m_A118 += m_A6 * f2_34;
	RHS34 += f2_34 * RHS2;
	const double f3 = 1.0 / m_A7;
	const double f3_21 = -f3 * m_A58;
	m_A60 += m_A8 * f3_21;
	m_A61 += m_A9 * f3_21;
	m_A62 += m_A10 * f3_21;
	RHS21 += f3_21 * RHS3;
	const double f3_25 = -f3 * m_A72;
	m_A74 += m_A8 * f3_25;
	m_A76 += m_A9 * f3_25;
	m_A78 += m_A10 * f3_25;
	RHS25 += f3_25 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_24 = -f4 * m_A67;
	m_A69 += m_A12 * f4_24;
	RHS24 += f4_24 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_29 = -f5 * m_A90;
	m_A91 += m_A14 * f5_29;
	m_A93 += m_A15 * f5_29;
	RHS29 += f5_29 * RHS5;
	const double f6 = 1.0 / m_A16;
	const double f6_26 = -f6 * m_A79;
	m_A81 += m_A17 * f6_26;
	RHS26 += f6_26 * RHS6;
	const double f7 = 1.0 / m_A18;
	const double f7_27 = -f7 * m_A83;
	m_A84 += m_A19 * f7_27;
	RHS27 += f7_27 * RHS7;
	const double f8 = 1.0 / m_A20;
	const double f8_24 = -f8 * m_A68;
	m_A69 += m_A21 * f8_24;
	m_A70 += m_A22 * f8_24;
	m_A71 += m_A23 * f8_24;
	RHS24 += f8_24 * RHS8;
	const double f8_25 = -f8 * m_A73;
	m_A75 += m_A21 * f8_25;
	m_A76 += m_A22 * f8_25;
	m_A77 += m_A23 * f8_25;
	RHS25 += f8_25 * RHS8;
	const double f8_29 = -f8 * m_A91;
	m_A93 += m_A21 * f8_29;
	m_A94 += m_A22 * f8_29;
	m_A95 += m_A23 * f8_29;
	RHS29 += f8_29 * RHS8;
	const double f9 = 1.0 / m_A24;
	const double f9_28 = -f9 * m_A86;
	m_A88 += m_A25 * f9_28;
	RHS28 += f9_28 * RHS9;
	const double f10 = 1.0 / m_A26;
	const double f10_26 = -f10 * m_A80;
	m_A81 += m_A27 * f10_26;
	m_A82 += m_A28 * f10_26;
	RHS26 += f10_26 * RHS10;
	const double f10_33 = -f10 * m_A112;
	m_A113 += m_A27 * f10_33;
	m_A115 += m_A28 * f10_33;
	RHS33 += f10_33 * RHS10;
	const double f10_36 = -f10 * m_A127;
	m_A129 += m_A27 * f10_36;
	m_A132 += m_A28 * f10_36;
	RHS36 += f10_36 * RHS10;
	const double f11 = 1.0 / m_A29;
	const double f11_32 = -f11 * m_A105;
	m_A110 += m_A30 * f11_32;
	RHS32 += f11_32 * RHS11;
	const double f12 = 1.0 / m_A31;
	const double f12_28 = -f12 * m_A87;
	m_A88 += m_A32 * f12_28;
	m_A89 += m_A33 * f12_28;
	RHS28 += f12_28 * RHS12;
	const double f12_30 = -f12 * m_A98;
	m_A99 += m_A32 * f12_30;
	m_A101 += m_A33 * f12_30;
	RHS30 += f12_30 * RHS12;
	const double f12_32 = -f12 * m_A106;
	m_A108 += m_A32 * f12_32;
	m_A110 += m_A33 * f12_32;
	RHS32 += f12_32 * RHS12;
	const double f13 = 1.0 / m_A34;
	const double f13_29 = -f13 * m_A92;
	m_A95 += m_A35 * f13_29;
	m_A97 += m_A36 * f13_29;
	RHS29 += f13_29 * RHS13;
	const double f13_37 = -f13 * m_A134;
	m_A141 += m_A35 * f13_37;
	m_A149 += m_A36 * f13_37;
	RHS37 += f13_37 * RHS13;
	const double f14 = 1.0 / m_A37;
	const double f14_35 = -f14 * m_A123;
	m_A125 += m_A38 * f14_35;
	RHS35 += f14_35 * RHS14;
	const double f15 = 1.0 / m_A39;
	const double f15_35 = -f15 * m_A124;
	m_A125 += m_A40 * f15_35;
	RHS35 += f15_35 * RHS15;
	const double f16 = 1.0 / m_A41;
	const double f16_37 = -f16 * m_A135;
	m_A149 += m_A42 * f16_37;
	RHS37 += f16_37 * RHS16;
	const double f17 = 1.0 / m_A43;
	const double f17_36 = -f17 * m_A128;
	m_A131 += m_A44 * f17_36;
	m_A132 += m_A45 * f17_36;
	m_A133 += m_A46 * f17_36;
	RHS36 += f17_36 * RHS17;
	const double f17_37 = -f17 * m_A136;
	m_A145 += m_A44 * f17_37;
	m_A148 += m_A45 * f17_37;
	m_A149 += m_A46 * f17_37;
	RHS37 += f17_37 * RHS17;
	const double f18 = 1.0 / m_A47;
	const double f18_32 = -f18 * m_A107;
	m_A109 += m_A48 * f18_32;
	m_A110 += m_A49 * f18_32;
	m_A111 += m_A50 * f18_32;
	RHS32 += f18_32 * RHS18;
	const double f18_37 = -f18 * m_A137;
	m_A142 += m_A48 * f18_37;
	m_A144 += m_A49 * f18_37;
	m_A149 += m_A50 * f18_37;
	RHS37 += f18_37 * RHS18;
	const double f19 = 1.0 / m_A51;
	const double f19_37 = -f19 * m_A138;
	m_A149 += m_A52 * f19_37;
	RHS37 += f19_37 * RHS19;
	const double f20 = 1.0 / m_A55;
	const double f20_21 = -f20 * m_A59;
	m_A60 += m_A56 * f20_21;
	RHS21 += f20_21 * RHS20;
	const double f20_34 = -f20 * m_A117;
	m_A118 += m_A56 * f20_34;
	RHS34 += f20_34 * RHS20;
	const double f21 = 1.0 / m_A60;
	const double f21_25 = -f21 * m_A74;
	m_A76 += m_A61 * f21_25;
	m_A78 += m_A62 * f21_25;
	RHS25 += f21_25 * RHS21;
	const double f21_34 = -f21 * m_A118;
	m_A119 += m_A61 * f21_34;
	m_A121 += m_A62 * f21_34;
	RHS34 += f21_34 * RHS21;
	const double f22 = 1.0 / m_A63;
	const double f22_37 = -f22 * m_A139;
	m_A149 += m_A64 * f22_37;
	RHS37 += f22_37 * RHS22;
	const double f23 = 1.0 / m_A65;
	const double f23_37 = -f23 * m_A140;
	m_A149 += m_A66 * f23_37;
	RHS37 += f23_37 * RHS23;
	const double f24 = 1.0 / m_A69;
	const double f24_25 = -f24 * m_A75;
	m_A76 += m_A70 * f24_25;
	m_A77 += m_A71 * f24_25;
	RHS25 += f24_25 * RHS24;
	const double f24_29 = -f24 * m_A93;
	m_A94 += m_A70 * f24_29;
	m_A95 += m_A71 * f24_29;
	RHS29 += f24_29 * RHS24;
	const double f25 = 1.0 / m_A76;
	const double f25_29 = -f25 * m_A94;
	m_A95 += m_A77 * f25_29;
	m_A96 += m_A78 * f25_29;
	RHS29 += f25_29 * RHS25;
	const double f25_34 = -f25 * m_A119;
	m_A120 += m_A77 * f25_34;
	m_A121 += m_A78 * f25_34;
	RHS34 += f25_34 * RHS25;
	const double f26 = 1.0 / m_A81;
	const double f26_33 = -f26 * m_A113;
	m_A115 += m_A82 * f26_33;
	RHS33 += f26_33 * RHS26;
	const double f26_36 = -f26 * m_A129;
	m_A132 += m_A82 * f26_36;
	RHS36 += f26_36 * RHS26;
	const double f27 = 1.0 / m_A84;
	const double f27_36 = -f27 * m_A130;
	m_A132 += m_A85 * f27_36;
	RHS36 += f27_36 * RHS27;
	const double f28 = 1.0 / m_A88;
	const double f28_30 = -f28 * m_A99;
	m_A101 += m_A89 * f28_30;
	RHS30 += f28_30 * RHS28;
	const double f28_32 = -f28 * m_A108;
	m_A110 += m_A89 * f28_32;
	RHS32 += f28_32 * RHS28;
	const double f29 = 1.0 / m_A95;
	const double f29_34 = -f29 * m_A120;
	m_A121 += m_A96 * f29_34;
	m_A122 += m_A97 * f29_34;
	RHS34 += f29_34 * RHS29;
	const double f29_37 = -f29 * m_A141;
	m_A146 += m_A96 * f29_37;
	m_A149 += m_A97 * f29_37;
	RHS37 += f29_37 * RHS29;
	const double f30 = 1.0 / m_A100;
	const double f30_32 = -f30 * m_A109;
	m_A110 += m_A101 * f30_32;
	RHS32 += f30_32 * RHS30;
	const double f30_37 = -f30 * m_A142;
	m_A144 += m_A101 * f30_37;
	RHS37 += f30_37 * RHS30;
	const double f31 = 1.0 / m_A103;
	const double f31_37 = -f31 * m_A143;
	m_A149 += m_A104 * f31_37;
	RHS37 += f31_37 * RHS31;
	const double f32 = 1.0 / m_A110;
	const double f32_37 = -f32 * m_A144;
	m_A149 += m_A111 * f32_37;
	RHS37 += f32_37 * RHS32;
	const double f33 = 1.0 / m_A114;
	const double f33_36 = -f33 * m_A131;
	m_A132 += m_A115 * f33_36;
	RHS36 += f33_36 * RHS33;
	const double f33_37 = -f33 * m_A145;
	m_A148 += m_A115 * f33_37;
	RHS37 += f33_37 * RHS33;
	const double f34 = 1.0 / m_A121;
	const double f34_37 = -f34 * m_A146;
	m_A149 += m_A122 * f34_37;
	RHS37 += f34_37 * RHS34;
	const double f35 = 1.0 / m_A125;
	const double f35_37 = -f35 * m_A147;
	m_A149 += m_A126 * f35_37;
	RHS37 += f35_37 * RHS35;
	const double f36 = 1.0 / m_A132;
	const double f36_37 = -f36 * m_A148;
	m_A149 += m_A133 * f36_37;
	RHS37 += f36_37 * RHS36;
	V[37] = RHS37 / m_A149;
	double tmp36 = 0.0;
	tmp36 += m_A133 * V[37];
	V[36] = (RHS36 - tmp36) / m_A132;
	double tmp35 = 0.0;
	tmp35 += m_A126 * V[37];
	V[35] = (RHS35 - tmp35) / m_A125;
	double tmp34 = 0.0;
	tmp34 += m_A122 * V[37];
	V[34] = (RHS34 - tmp34) / m_A121;
	double tmp33 = 0.0;
	tmp33 += m_A115 * V[36];
	V[33] = (RHS33 - tmp33) / m_A114;
	double tmp32 = 0.0;
	tmp32 += m_A111 * V[37];
	V[32] = (RHS32 - tmp32) / m_A110;
	double tmp31 = 0.0;
	tmp31 += m_A104 * V[37];
	V[31] = (RHS31 - tmp31) / m_A103;
	double tmp30 = 0.0;
	tmp30 += m_A101 * V[32];
	V[30] = (RHS30 - tmp30) / m_A100;
	double tmp29 = 0.0;
	tmp29 += m_A96 * V[34];
	tmp29 += m_A97 * V[37];
	V[29] = (RHS29 - tmp29) / m_A95;
	double tmp28 = 0.0;
	tmp28 += m_A89 * V[32];
	V[28] = (RHS28 - tmp28) / m_A88;
	double tmp27 = 0.0;
	tmp27 += m_A85 * V[36];
	V[27] = (RHS27 - tmp27) / m_A84;
	double tmp26 = 0.0;
	tmp26 += m_A82 * V[36];
	V[26] = (RHS26 - tmp26) / m_A81;
	double tmp25 = 0.0;
	tmp25 += m_A77 * V[29];
	tmp25 += m_A78 * V[34];
	V[25] = (RHS25 - tmp25) / m_A76;
	double tmp24 = 0.0;
	tmp24 += m_A70 * V[25];
	tmp24 += m_A71 * V[29];
	V[24] = (RHS24 - tmp24) / m_A69;
	double tmp23 = 0.0;
	tmp23 += m_A66 * V[37];
	V[23] = (RHS23 - tmp23) / m_A65;
	double tmp22 = 0.0;
	tmp22 += m_A64 * V[37];
	V[22] = (RHS22 - tmp22) / m_A63;
	double tmp21 = 0.0;
	tmp21 += m_A61 * V[25];
	tmp21 += m_A62 * V[34];
	V[21] = (RHS21 - tmp21) / m_A60;
	double tmp20 = 0.0;
	tmp20 += m_A56 * V[21];
	V[20] = (RHS20 - tmp20) / m_A55;
	double tmp19 = 0.0;
	tmp19 += m_A52 * V[37];
	V[19] = (RHS19 - tmp19) / m_A51;
	double tmp18 = 0.0;
	tmp18 += m_A48 * V[30];
	tmp18 += m_A49 * V[32];
	tmp18 += m_A50 * V[37];
	V[18] = (RHS18 - tmp18) / m_A47;
	double tmp17 = 0.0;
	tmp17 += m_A44 * V[33];
	tmp17 += m_A45 * V[36];
	tmp17 += m_A46 * V[37];
	V[17] = (RHS17 - tmp17) / m_A43;
	double tmp16 = 0.0;
	tmp16 += m_A42 * V[37];
	V[16] = (RHS16 - tmp16) / m_A41;
	double tmp15 = 0.0;
	tmp15 += m_A40 * V[35];
	V[15] = (RHS15 - tmp15) / m_A39;
	double tmp14 = 0.0;
	tmp14 += m_A38 * V[35];
	V[14] = (RHS14 - tmp14) / m_A37;
	double tmp13 = 0.0;
	tmp13 += m_A35 * V[29];
	tmp13 += m_A36 * V[37];
	V[13] = (RHS13 - tmp13) / m_A34;
	double tmp12 = 0.0;
	tmp12 += m_A32 * V[28];
	tmp12 += m_A33 * V[32];
	V[12] = (RHS12 - tmp12) / m_A31;
	double tmp11 = 0.0;
	tmp11 += m_A30 * V[32];
	V[11] = (RHS11 - tmp11) / m_A29;
	double tmp10 = 0.0;
	tmp10 += m_A27 * V[26];
	tmp10 += m_A28 * V[36];
	V[10] = (RHS10 - tmp10) / m_A26;
	double tmp9 = 0.0;
	tmp9 += m_A25 * V[28];
	V[9] = (RHS9 - tmp9) / m_A24;
	double tmp8 = 0.0;
	tmp8 += m_A21 * V[24];
	tmp8 += m_A22 * V[25];
	tmp8 += m_A23 * V[29];
	V[8] = (RHS8 - tmp8) / m_A20;
	double tmp7 = 0.0;
	tmp7 += m_A19 * V[27];
	V[7] = (RHS7 - tmp7) / m_A18;
	double tmp6 = 0.0;
	tmp6 += m_A17 * V[26];
	V[6] = (RHS6 - tmp6) / m_A16;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[8];
	tmp5 += m_A15 * V[24];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[24];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A8 * V[21];
	tmp3 += m_A9 * V[25];
	tmp3 += m_A10 * V[34];
	V[3] = (RHS3 - tmp3) / m_A7;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[20];
	tmp2 += m_A6 * V[21];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[20];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[31];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// spacewar
static void nl_gcr_e9e8211f43d8f4b3_22_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A3 += go[2];
	m_A4 += go[3];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	m_A5 += gt[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A7 += go[9];
	m_A6 += go[10];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A8 += gt[12];
	m_A8 += gt[13];
	m_A9 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[13] * *cnV[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A11 += go[14];
	m_A10 += go[15];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 += Idr[16];
	RHS4 -= go[16] * *cnV[16];
	m_A17 += gt[17];
	m_A17 += gt[18];
	m_A17 += gt[19];
	m_A17 += gt[20];
	m_A17 += gt[21];
	m_A17 += gt[22];
	m_A14 += go[17];
	m_A18 += go[18];
	m_A15 += go[19];
	double RHS5 = Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	m_A21 += gt[23];
	m_A21 += gt[24];
	m_A19 += go[23];
	m_A20 += go[24];
	double RHS6 = Idr[23];
	RHS6 += Idr[24];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_5 = -f1 * m_A14;
	m_A15 += m_A3 * f1_5;
	m_A16 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_4 = -f2 * m_A11;
	m_A12 += m_A6 * f2_4;
	m_A13 += m_A7 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f2_5 = -f2 * m_A15;
	m_A16 += m_A6 * f2_5;
	m_A17 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_6 = -f3 * m_A19;
	m_A21 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_5 = -f4 * m_A16;
	m_A17 += m_A13 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_6 = -f5 * m_A20;
	m_A21 += m_A18 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A21;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[6];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[5];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[6];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[4];
	tmp2 += m_A7 * V[5];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	tmp1 += m_A4 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_ea2b6e3a05e6ef0b_23_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A4 += go[4];
	m_A3 += go[5];
	m_A3 += go[6];
	double RHS1 = Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A5 += gt[13];
	m_A7 += go[10];
	m_A6 += go[11];
	m_A6 += go[12];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 += Idr[13];
	RHS2 -= go[13] * *cnV[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A9 += go[14];
	double RHS3 = Idr[14];
	RHS3 += Idr[15];
	RHS3 -= go[15] * *cnV[15];
	m_A12 += gt[16];
	m_A12 += gt[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A12 += gt[21];
	m_A11 += go[16];
	m_A11 += go[17];
	m_A10 += go[18];
	double RHS4 = Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 += Idr[21];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	RHS4 -= go[21] * *cnV[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A17 += gt[24];
	m_A17 += gt[25];
	m_A17 += gt[26];
	m_A15 += go[22];
	m_A15 += go[23];
	m_A14 += go[24];
	double RHS5 = Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 += Idr[26];
	RHS5 -= go[25] * *cnV[25];
	RHS5 -= go[26] * *cnV[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A22 += gt[30];
	m_A22 += gt[31];
	m_A20 += go[27];
	m_A19 += go[28];
	double RHS6 = Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 -= go[29] * *cnV[29];
	RHS6 -= go[30] * *cnV[30];
	RHS6 -= go[31] * *cnV[31];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A11;
	m_A12 += m_A3 * f1_4;
	m_A13 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f1_5 = -f1 * m_A14;
	m_A16 += m_A3 * f1_5;
	m_A17 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_5 = -f2 * m_A15;
	m_A17 += m_A6 * f2_5;
	m_A18 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f2_6 = -f2 * m_A19;
	m_A21 += m_A6 * f2_6;
	m_A22 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_6 = -f3 * m_A20;
	m_A22 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_5 = -f4 * m_A16;
	m_A17 += m_A13 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_6 = -f5 * m_A21;
	m_A22 += m_A18 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[6];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[5];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[6];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[5];
	tmp2 += m_A7 * V[6];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	tmp1 += m_A4 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// starcas
static void nl_gcr_ec4f6d2dad5961b9_64_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A0 += gt[3];
	m_A0 += gt[4];
	m_A0 += gt[5];
	m_A1 += go[0];
	m_A1 += go[1];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 += Idr[3];
	RHS0 += Idr[4];
	RHS0 += Idr[5];
	RHS0 -= go[2] * *cnV[2];
	RHS0 -= go[3] * *cnV[3];
	RHS0 -= go[4] * *cnV[4];
	RHS0 -= go[5] * *cnV[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A2 += gt[9];
	m_A3 += go[6];
	double RHS1 = Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 += Idr[9];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	RHS1 -= go[9] * *cnV[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[10];
	double RHS2 = Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A6 += gt[14];
	m_A6 += gt[15];
	m_A6 += gt[16];
	m_A6 += gt[17];
	m_A6 += gt[18];
	m_A6 += gt[19];
	m_A9 += go[12];
	m_A7 += go[13];
	m_A7 += go[14];
	m_A8 += go[15];
	m_A8 += go[16];
	m_A10 += go[17];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 += Idr[15];
	RHS3 += Idr[16];
	RHS3 += Idr[17];
	RHS3 += Idr[18];
	RHS3 += Idr[19];
	RHS3 -= go[18] * *cnV[18];
	RHS3 -= go[19] * *cnV[19];
	m_A11 += gt[20];
	m_A11 += gt[21];
	m_A11 += gt[22];
	m_A11 += gt[23];
	m_A12 += go[20];
	double RHS4 = Idr[20];
	RHS4 += Idr[21];
	RHS4 += Idr[22];
	RHS4 += Idr[23];
	RHS4 -= go[21] * *cnV[21];
	RHS4 -= go[22] * *cnV[22];
	RHS4 -= go[23] * *cnV[23];
	m_A13 += gt[24];
	m_A13 += gt[25];
	m_A14 += go[24];
	double RHS5 = Idr[24];
	RHS5 += Idr[25];
	RHS5 -= go[25] * *cnV[25];
	m_A15 += gt[26];
	m_A15 += gt[27];
	m_A15 += gt[28];
	m_A15 += gt[29];
	m_A15 += gt[30];
	m_A15 += gt[31];
	m_A15 += gt[32];
	m_A15 += gt[33];
	m_A18 += go[26];
	m_A16 += go[27];
	m_A16 += go[28];
	m_A17 += go[29];
	m_A17 += go[30];
	m_A19 += go[31];
	double RHS6 = Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 += Idr[31];
	RHS6 += Idr[32];
	RHS6 += Idr[33];
	RHS6 -= go[32] * *cnV[32];
	RHS6 -= go[33] * *cnV[33];
	m_A21 += gt[34];
	m_A21 += gt[35];
	m_A21 += gt[36];
	m_A21 += gt[37];
	m_A21 += gt[38];
	m_A23 += go[34];
	m_A23 += go[35];
	m_A20 += go[36];
	m_A20 += go[37];
	double RHS7 = Idr[34];
	RHS7 += Idr[35];
	RHS7 += Idr[36];
	RHS7 += Idr[37];
	RHS7 += Idr[38];
	RHS7 -= go[38] * *cnV[38];
	m_A26 += gt[39];
	m_A26 += gt[40];
	m_A26 += gt[41];
	m_A26 += gt[42];
	m_A26 += gt[43];
	m_A28 += go[39];
	m_A28 += go[40];
	m_A25 += go[41];
	m_A25 += go[42];
	double RHS8 = Idr[39];
	RHS8 += Idr[40];
	RHS8 += Idr[41];
	RHS8 += Idr[42];
	RHS8 += Idr[43];
	RHS8 -= go[43] * *cnV[43];
	m_A33 += gt[44];
	m_A33 += gt[45];
	m_A33 += gt[46];
	m_A33 += gt[47];
	m_A33 += gt[48];
	m_A31 += go[44];
	m_A31 += go[45];
	m_A30 += go[46];
	m_A35 += go[47];
	m_A35 += go[48];
	double RHS9 = Idr[44];
	RHS9 += Idr[45];
	RHS9 += Idr[46];
	RHS9 += Idr[47];
	RHS9 += Idr[48];
	m_A39 += gt[49];
	m_A39 += gt[50];
	m_A39 += gt[51];
	m_A39 += gt[52];
	m_A39 += gt[53];
	m_A37 += go[49];
	m_A37 += go[50];
	m_A36 += go[51];
	m_A41 += go[52];
	m_A41 += go[53];
	double RHS10 = Idr[49];
	RHS10 += Idr[50];
	RHS10 += Idr[51];
	RHS10 += Idr[52];
	RHS10 += Idr[53];
	m_A46 += gt[54];
	m_A46 += gt[55];
	m_A46 += gt[56];
	m_A46 += gt[57];
	m_A46 += gt[58];
	m_A44 += go[54];
	m_A44 += go[55];
	m_A43 += go[56];
	m_A42 += go[57];
	double RHS11 = Idr[54];
	RHS11 += Idr[55];
	RHS11 += Idr[56];
	RHS11 += Idr[57];
	RHS11 += Idr[58];
	RHS11 -= go[58] * *cnV[58];
	m_A52 += gt[59];
	m_A52 += gt[60];
	m_A52 += gt[61];
	m_A52 += gt[62];
	m_A52 += gt[63];
	m_A50 += go[59];
	m_A50 += go[60];
	m_A49 += go[61];
	m_A48 += go[62];
	double RHS12 = Idr[59];
	RHS12 += Idr[60];
	RHS12 += Idr[61];
	RHS12 += Idr[62];
	RHS12 += Idr[63];
	RHS12 -= go[63] * *cnV[63];
	m_A63 += gt[64];
	m_A63 += gt[65];
	m_A63 += gt[66];
	m_A63 += gt[67];
	m_A63 += gt[68];
	m_A63 += gt[69];
	m_A63 += gt[70];
	m_A63 += gt[71];
	m_A63 += gt[72];
	m_A63 += gt[73];
	m_A63 += gt[74];
	m_A56 += go[64];
	m_A60 += go[65];
	m_A60 += go[66];
	m_A55 += go[67];
	m_A59 += go[68];
	m_A59 += go[69];
	m_A54 += go[70];
	m_A54 += go[71];
	double RHS13 = Idr[64];
	RHS13 += Idr[65];
	RHS13 += Idr[66];
	RHS13 += Idr[67];
	RHS13 += Idr[68];
	RHS13 += Idr[69];
	RHS13 += Idr[70];
	RHS13 += Idr[71];
	RHS13 += Idr[72];
	RHS13 += Idr[73];
	RHS13 += Idr[74];
	RHS13 -= go[72] * *cnV[72];
	RHS13 -= go[73] * *cnV[73];
	RHS13 -= go[74] * *cnV[74];
	const double f0 = 1.0 / m_A0;
	const double f0_13 = -f0 * m_A54;
	m_A63 += m_A1 * f0_13;
	RHS13 += f0_13 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_9 = -f1 * m_A30;
	m_A33 += m_A3 * f1_9;
	RHS9 += f1_9 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_11 = -f2 * m_A42;
	m_A46 += m_A5 * f2_11;
	RHS11 += f2_11 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_7 = -f3 * m_A20;
	m_A21 += m_A7 * f3_7;
	m_A22 += m_A8 * f3_7;
	m_A23 += m_A9 * f3_7;
	m_A24 += m_A10 * f3_7;
	RHS7 += f3_7 * RHS3;
	const double f3_9 = -f3 * m_A31;
	m_A32 += m_A7 * f3_9;
	m_A33 += m_A8 * f3_9;
	m_A34 += m_A9 * f3_9;
	m_A35 += m_A10 * f3_9;
	RHS9 += f3_9 * RHS3;
	const double f3_11 = -f3 * m_A43;
	m_A44 += m_A7 * f3_11;
	m_A45 += m_A8 * f3_11;
	m_A46 += m_A9 * f3_11;
	m_A47 += m_A10 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f3_13 = -f3 * m_A55;
	m_A57 += m_A7 * f3_13;
	m_A59 += m_A8 * f3_13;
	m_A61 += m_A9 * f3_13;
	m_A63 += m_A10 * f3_13;
	RHS13 += f3_13 * RHS3;
	const double f4 = 1.0 / m_A11;
	const double f4_10 = -f4 * m_A36;
	m_A39 += m_A12 * f4_10;
	RHS10 += f4_10 * RHS4;
	const double f5 = 1.0 / m_A13;
	const double f5_12 = -f5 * m_A48;
	m_A52 += m_A14 * f5_12;
	RHS12 += f5_12 * RHS5;
	const double f6 = 1.0 / m_A15;
	const double f6_8 = -f6 * m_A25;
	m_A26 += m_A16 * f6_8;
	m_A27 += m_A17 * f6_8;
	m_A28 += m_A18 * f6_8;
	m_A29 += m_A19 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f6_10 = -f6 * m_A37;
	m_A38 += m_A16 * f6_10;
	m_A39 += m_A17 * f6_10;
	m_A40 += m_A18 * f6_10;
	m_A41 += m_A19 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f6_12 = -f6 * m_A49;
	m_A50 += m_A16 * f6_12;
	m_A51 += m_A17 * f6_12;
	m_A52 += m_A18 * f6_12;
	m_A53 += m_A19 * f6_12;
	RHS12 += f6_12 * RHS6;
	const double f6_13 = -f6 * m_A56;
	m_A58 += m_A16 * f6_13;
	m_A60 += m_A17 * f6_13;
	m_A62 += m_A18 * f6_13;
	m_A63 += m_A19 * f6_13;
	RHS13 += f6_13 * RHS6;
	const double f7 = 1.0 / m_A21;
	const double f7_9 = -f7 * m_A32;
	m_A33 += m_A22 * f7_9;
	m_A34 += m_A23 * f7_9;
	m_A35 += m_A24 * f7_9;
	RHS9 += f7_9 * RHS7;
	const double f7_11 = -f7 * m_A44;
	m_A45 += m_A22 * f7_11;
	m_A46 += m_A23 * f7_11;
	m_A47 += m_A24 * f7_11;
	RHS11 += f7_11 * RHS7;
	const double f7_13 = -f7 * m_A57;
	m_A59 += m_A22 * f7_13;
	m_A61 += m_A23 * f7_13;
	m_A63 += m_A24 * f7_13;
	RHS13 += f7_13 * RHS7;
	const double f8 = 1.0 / m_A26;
	const double f8_10 = -f8 * m_A38;
	m_A39 += m_A27 * f8_10;
	m_A40 += m_A28 * f8_10;
	m_A41 += m_A29 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f8_12 = -f8 * m_A50;
	m_A51 += m_A27 * f8_12;
	m_A52 += m_A28 * f8_12;
	m_A53 += m_A29 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f8_13 = -f8 * m_A58;
	m_A60 += m_A27 * f8_13;
	m_A62 += m_A28 * f8_13;
	m_A63 += m_A29 * f8_13;
	RHS13 += f8_13 * RHS8;
	const double f9 = 1.0 / m_A33;
	const double f9_11 = -f9 * m_A45;
	m_A46 += m_A34 * f9_11;
	m_A47 += m_A35 * f9_11;
	RHS11 += f9_11 * RHS9;
	const double f9_13 = -f9 * m_A59;
	m_A61 += m_A34 * f9_13;
	m_A63 += m_A35 * f9_13;
	RHS13 += f9_13 * RHS9;
	const double f10 = 1.0 / m_A39;
	const double f10_12 = -f10 * m_A51;
	m_A52 += m_A40 * f10_12;
	m_A53 += m_A41 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f10_13 = -f10 * m_A60;
	m_A62 += m_A40 * f10_13;
	m_A63 += m_A41 * f10_13;
	RHS13 += f10_13 * RHS10;
	const double f11 = 1.0 / m_A46;
	const double f11_13 = -f11 * m_A61;
	m_A63 += m_A47 * f11_13;
	RHS13 += f11_13 * RHS11;
	const double f12 = 1.0 / m_A52;
	const double f12_13 = -f12 * m_A62;
	m_A63 += m_A53 * f12_13;
	RHS13 += f12_13 * RHS12;
	V[13] = RHS13 / m_A63;
	double tmp12 = 0.0;
	tmp12 += m_A53 * V[13];
	V[12] = (RHS12 - tmp12) / m_A52;
	double tmp11 = 0.0;
	tmp11 += m_A47 * V[13];
	V[11] = (RHS11 - tmp11) / m_A46;
	double tmp10 = 0.0;
	tmp10 += m_A40 * V[12];
	tmp10 += m_A41 * V[13];
	V[10] = (RHS10 - tmp10) / m_A39;
	double tmp9 = 0.0;
	tmp9 += m_A34 * V[11];
	tmp9 += m_A35 * V[13];
	V[9] = (RHS9 - tmp9) / m_A33;
	double tmp8 = 0.0;
	tmp8 += m_A27 * V[10];
	tmp8 += m_A28 * V[12];
	tmp8 += m_A29 * V[13];
	V[8] = (RHS8 - tmp8) / m_A26;
	double tmp7 = 0.0;
	tmp7 += m_A22 * V[9];
	tmp7 += m_A23 * V[11];
	tmp7 += m_A24 * V[13];
	V[7] = (RHS7 - tmp7) / m_A21;
	double tmp6 = 0.0;
	tmp6 += m_A16 * V[8];
	tmp6 += m_A17 * V[10];
	tmp6 += m_A18 * V[12];
	tmp6 += m_A19 * V[13];
	V[6] = (RHS6 - tmp6) / m_A15;
	double tmp5 = 0.0;
	tmp5 += m_A14 * V[12];
	V[5] = (RHS5 - tmp5) / m_A13;
	double tmp4 = 0.0;
	tmp4 += m_A12 * V[10];
	V[4] = (RHS4 - tmp4) / m_A11;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[7];
	tmp3 += m_A8 * V[9];
	tmp3 += m_A9 * V[11];
	tmp3 += m_A10 * V[13];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[11];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[9];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[13];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// barrier
static void nl_gcr_ecf17036ce1c07cf_10_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 -= go[4] * *cnV[4];
	RHS1 -= go[5] * *cnV[5];
	m_A5 += gt[6];
	m_A5 += gt[7];
	m_A5 += gt[8];
	m_A5 += gt[9];
	m_A4 += go[6];
	m_A6 += go[7];
	double RHS2 = Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	m_A9 += gt[10];
	m_A9 += gt[11];
	m_A9 += gt[12];
	m_A9 += gt[13];
	m_A9 += gt[14];
	m_A7 += go[10];
	m_A8 += go[11];
	double RHS3 = Idr[10];
	RHS3 += Idr[11];
	RHS3 += Idr[12];
	RHS3 += Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[12] * *cnV[12];
	RHS3 -= go[13] * *cnV[13];
	RHS3 -= go[14] * *cnV[14];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A5 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_3 = -f1 * m_A7;
	m_A9 += m_A3 * f1_3;
	RHS3 += f1_3 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_3 = -f2 * m_A8;
	m_A9 += m_A6 * f2_3;
	RHS3 += f2_3 * RHS2;
	V[3] = RHS3 / m_A9;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[3];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[3];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// armora
static void nl_gcr_ee2cacaa15d32491_67_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A9 += go[8];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 -= go[9] * *cnV[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A10 += gt[12];
	m_A12 += go[10];
	m_A11 += go[11];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 += Idr[12];
	RHS5 -= go[12] * *cnV[12];
	m_A13 += gt[13];
	m_A13 += gt[14];
	m_A13 += gt[15];
	m_A15 += go[13];
	m_A14 += go[14];
	double RHS6 = Idr[13];
	RHS6 += Idr[14];
	RHS6 += Idr[15];
	RHS6 -= go[15] * *cnV[15];
	m_A16 += gt[16];
	m_A16 += gt[17];
	m_A16 += gt[18];
	m_A18 += go[16];
	m_A17 += go[17];
	double RHS7 = Idr[16];
	RHS7 += Idr[17];
	RHS7 += Idr[18];
	RHS7 -= go[18] * *cnV[18];
	m_A19 += gt[19];
	m_A19 += gt[20];
	m_A19 += gt[21];
	m_A19 += gt[22];
	m_A19 += gt[23];
	m_A19 += gt[24];
	m_A19 += gt[25];
	m_A21 += go[19];
	m_A20 += go[20];
	double RHS8 = Idr[19];
	RHS8 += Idr[20];
	RHS8 += Idr[21];
	RHS8 += Idr[22];
	RHS8 += Idr[23];
	RHS8 += Idr[24];
	RHS8 += Idr[25];
	RHS8 -= go[21] * *cnV[21];
	RHS8 -= go[22] * *cnV[22];
	RHS8 -= go[23] * *cnV[23];
	RHS8 -= go[24] * *cnV[24];
	RHS8 -= go[25] * *cnV[25];
	m_A22 += gt[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A23 += go[26];
	m_A24 += go[27];
	double RHS9 = Idr[26];
	RHS9 += Idr[27];
	RHS9 += Idr[28];
	RHS9 -= go[28] * *cnV[28];
	m_A26 += gt[29];
	m_A26 += gt[30];
	m_A26 += gt[31];
	m_A27 += go[29];
	m_A25 += go[30];
	double RHS10 = Idr[29];
	RHS10 += Idr[30];
	RHS10 += Idr[31];
	RHS10 -= go[31] * *cnV[31];
	m_A30 += gt[32];
	m_A30 += gt[33];
	m_A30 += gt[34];
	m_A29 += go[32];
	m_A28 += go[33];
	double RHS11 = Idr[32];
	RHS11 += Idr[33];
	RHS11 += Idr[34];
	RHS11 -= go[34] * *cnV[34];
	m_A33 += gt[35];
	m_A33 += gt[36];
	m_A33 += gt[37];
	m_A34 += go[35];
	m_A32 += go[36];
	double RHS12 = Idr[35];
	RHS12 += Idr[36];
	RHS12 += Idr[37];
	RHS12 -= go[37] * *cnV[37];
	m_A37 += gt[38];
	m_A37 += gt[39];
	m_A37 += gt[40];
	m_A36 += go[38];
	m_A35 += go[39];
	double RHS13 = Idr[38];
	RHS13 += Idr[39];
	RHS13 += Idr[40];
	RHS13 -= go[40] * *cnV[40];
	m_A41 += gt[41];
	m_A41 += gt[42];
	m_A41 += gt[43];
	m_A39 += go[41];
	m_A42 += go[42];
	double RHS14 = Idr[41];
	RHS14 += Idr[42];
	RHS14 += Idr[43];
	RHS14 -= go[43] * *cnV[43];
	m_A45 += gt[44];
	m_A45 += gt[45];
	m_A45 += gt[46];
	m_A44 += go[44];
	m_A43 += go[45];
	double RHS15 = Idr[44];
	RHS15 += Idr[45];
	RHS15 += Idr[46];
	RHS15 -= go[46] * *cnV[46];
	m_A49 += gt[47];
	m_A49 += gt[48];
	m_A49 += gt[49];
	m_A47 += go[47];
	m_A50 += go[48];
	double RHS16 = Idr[47];
	RHS16 += Idr[48];
	RHS16 += Idr[49];
	RHS16 -= go[49] * *cnV[49];
	m_A53 += gt[50];
	m_A53 += gt[51];
	m_A53 += gt[52];
	m_A51 += go[50];
	m_A52 += go[51];
	double RHS17 = Idr[50];
	RHS17 += Idr[51];
	RHS17 += Idr[52];
	RHS17 -= go[52] * *cnV[52];
	m_A57 += gt[53];
	m_A57 += gt[54];
	m_A57 += gt[55];
	m_A55 += go[53];
	m_A58 += go[54];
	double RHS18 = Idr[53];
	RHS18 += Idr[54];
	RHS18 += Idr[55];
	RHS18 -= go[55] * *cnV[55];
	m_A66 += gt[56];
	m_A66 += gt[57];
	m_A66 += gt[58];
	m_A66 += gt[59];
	m_A66 += gt[60];
	m_A66 += gt[61];
	m_A66 += gt[62];
	m_A66 += gt[63];
	m_A59 += go[56];
	m_A60 += go[57];
	m_A65 += go[58];
	m_A63 += go[59];
	m_A62 += go[60];
	m_A61 += go[61];
	double RHS19 = Idr[56];
	RHS19 += Idr[57];
	RHS19 += Idr[58];
	RHS19 += Idr[59];
	RHS19 += Idr[60];
	RHS19 += Idr[61];
	RHS19 += Idr[62];
	RHS19 += Idr[63];
	RHS19 -= go[62] * *cnV[62];
	RHS19 -= go[63] * *cnV[63];
	const double f0 = 1.0 / m_A0;
	const double f0_11 = -f0 * m_A28;
	m_A30 += m_A1 * f0_11;
	RHS11 += f0_11 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_13 = -f1 * m_A35;
	m_A37 += m_A3 * f1_13;
	RHS13 += f1_13 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_15 = -f2 * m_A43;
	m_A45 += m_A5 * f2_15;
	RHS15 += f2_15 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_10 = -f3 * m_A25;
	m_A26 += m_A7 * f3_10;
	RHS10 += f3_10 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_12 = -f4 * m_A32;
	m_A33 += m_A9 * f4_12;
	RHS12 += f4_12 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_11 = -f5 * m_A29;
	m_A30 += m_A11 * f5_11;
	m_A31 += m_A12 * f5_11;
	RHS11 += f5_11 * RHS5;
	const double f5_14 = -f5 * m_A39;
	m_A40 += m_A11 * f5_14;
	m_A41 += m_A12 * f5_14;
	RHS14 += f5_14 * RHS5;
	const double f6 = 1.0 / m_A13;
	const double f6_13 = -f6 * m_A36;
	m_A37 += m_A14 * f6_13;
	m_A38 += m_A15 * f6_13;
	RHS13 += f6_13 * RHS6;
	const double f6_16 = -f6 * m_A47;
	m_A48 += m_A14 * f6_16;
	m_A49 += m_A15 * f6_16;
	RHS16 += f6_16 * RHS6;
	const double f7 = 1.0 / m_A16;
	const double f7_15 = -f7 * m_A44;
	m_A45 += m_A17 * f7_15;
	m_A46 += m_A18 * f7_15;
	RHS15 += f7_15 * RHS7;
	const double f7_18 = -f7 * m_A55;
	m_A56 += m_A17 * f7_18;
	m_A57 += m_A18 * f7_18;
	RHS18 += f7_18 * RHS7;
	const double f8 = 1.0 / m_A19;
	const double f8_19 = -f8 * m_A59;
	m_A61 += m_A20 * f8_19;
	m_A66 += m_A21 * f8_19;
	RHS19 += f8_19 * RHS8;
	const double f9 = 1.0 / m_A22;
	const double f9_17 = -f9 * m_A51;
	m_A53 += m_A23 * f9_17;
	m_A54 += m_A24 * f9_17;
	RHS17 += f9_17 * RHS9;
	const double f9_19 = -f9 * m_A60;
	m_A64 += m_A23 * f9_19;
	m_A66 += m_A24 * f9_19;
	RHS19 += f9_19 * RHS9;
	const double f10 = 1.0 / m_A26;
	const double f10_19 = -f10 * m_A61;
	m_A66 += m_A27 * f10_19;
	RHS19 += f10_19 * RHS10;
	const double f11 = 1.0 / m_A30;
	const double f11_14 = -f11 * m_A40;
	m_A41 += m_A31 * f11_14;
	RHS14 += f11_14 * RHS11;
	const double f12 = 1.0 / m_A33;
	const double f12_17 = -f12 * m_A52;
	m_A53 += m_A34 * f12_17;
	RHS17 += f12_17 * RHS12;
	const double f13 = 1.0 / m_A37;
	const double f13_16 = -f13 * m_A48;
	m_A49 += m_A38 * f13_16;
	RHS16 += f13_16 * RHS13;
	const double f14 = 1.0 / m_A41;
	const double f14_19 = -f14 * m_A62;
	m_A66 += m_A42 * f14_19;
	RHS19 += f14_19 * RHS14;
	const double f15 = 1.0 / m_A45;
	const double f15_18 = -f15 * m_A56;
	m_A57 += m_A46 * f15_18;
	RHS18 += f15_18 * RHS15;
	const double f16 = 1.0 / m_A49;
	const double f16_19 = -f16 * m_A63;
	m_A66 += m_A50 * f16_19;
	RHS19 += f16_19 * RHS16;
	const double f17 = 1.0 / m_A53;
	const double f17_19 = -f17 * m_A64;
	m_A66 += m_A54 * f17_19;
	RHS19 += f17_19 * RHS17;
	const double f18 = 1.0 / m_A57;
	const double f18_19 = -f18 * m_A65;
	m_A66 += m_A58 * f18_19;
	RHS19 += f18_19 * RHS18;
	V[19] = RHS19 / m_A66;
	double tmp18 = 0.0;
	tmp18 += m_A58 * V[19];
	V[18] = (RHS18 - tmp18) / m_A57;
	double tmp17 = 0.0;
	tmp17 += m_A54 * V[19];
	V[17] = (RHS17 - tmp17) / m_A53;
	double tmp16 = 0.0;
	tmp16 += m_A50 * V[19];
	V[16] = (RHS16 - tmp16) / m_A49;
	double tmp15 = 0.0;
	tmp15 += m_A46 * V[18];
	V[15] = (RHS15 - tmp15) / m_A45;
	double tmp14 = 0.0;
	tmp14 += m_A42 * V[19];
	V[14] = (RHS14 - tmp14) / m_A41;
	double tmp13 = 0.0;
	tmp13 += m_A38 * V[16];
	V[13] = (RHS13 - tmp13) / m_A37;
	double tmp12 = 0.0;
	tmp12 += m_A34 * V[17];
	V[12] = (RHS12 - tmp12) / m_A33;
	double tmp11 = 0.0;
	tmp11 += m_A31 * V[14];
	V[11] = (RHS11 - tmp11) / m_A30;
	double tmp10 = 0.0;
	tmp10 += m_A27 * V[19];
	V[10] = (RHS10 - tmp10) / m_A26;
	double tmp9 = 0.0;
	tmp9 += m_A23 * V[17];
	tmp9 += m_A24 * V[19];
	V[9] = (RHS9 - tmp9) / m_A22;
	double tmp8 = 0.0;
	tmp8 += m_A20 * V[10];
	tmp8 += m_A21 * V[19];
	V[8] = (RHS8 - tmp8) / m_A19;
	double tmp7 = 0.0;
	tmp7 += m_A17 * V[15];
	tmp7 += m_A18 * V[18];
	V[7] = (RHS7 - tmp7) / m_A16;
	double tmp6 = 0.0;
	tmp6 += m_A14 * V[13];
	tmp6 += m_A15 * V[16];
	V[6] = (RHS6 - tmp6) / m_A13;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[11];
	tmp5 += m_A12 * V[14];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[12];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[10];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[15];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[13];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[11];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// barrier
static void nl_gcr_f425d4008ae1d2c6_13_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A5 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 -= go[6] * *cnV[6];
	m_A6 += gt[7];
	m_A6 += gt[8];
	m_A7 += go[7];
	double RHS3 = Idr[7];
	RHS3 += Idr[8];
	RHS3 -= go[8] * *cnV[8];
	m_A12 += gt[9];
	m_A12 += gt[10];
	m_A12 += gt[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A11 += go[9];
	m_A10 += go[10];
	m_A9 += go[11];
	m_A8 += go[12];
	double RHS4 = Idr[9];
	RHS4 += Idr[10];
	RHS4 += Idr[11];
	RHS4 += Idr[12];
	RHS4 += Idr[13];
	RHS4 -= go[13] * *cnV[13];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A8;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A9;
	m_A12 += m_A3 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_4 = -f2 * m_A10;
	m_A12 += m_A5 * f2_4;
	RHS4 += f2_4 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_4 = -f3 * m_A11;
	m_A12 += m_A7 * f3_4;
	RHS4 += f3_4 * RHS3;
	V[4] = RHS4 / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[4];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[4];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// boxingb
static void nl_gcr_f43cf2a28a5a5561_23_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A2 += gt[5];
	m_A2 += gt[6];
	m_A2 += gt[7];
	m_A2 += gt[8];
	m_A4 += go[3];
	m_A3 += go[4];
	m_A3 += go[5];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 += Idr[5];
	RHS1 += Idr[6];
	RHS1 += Idr[7];
	RHS1 += Idr[8];
	RHS1 -= go[6] * *cnV[6];
	RHS1 -= go[7] * *cnV[7];
	RHS1 -= go[8] * *cnV[8];
	m_A5 += gt[9];
	m_A5 += gt[10];
	m_A5 += gt[11];
	m_A5 += gt[12];
	m_A7 += go[9];
	m_A6 += go[10];
	m_A6 += go[11];
	double RHS2 = Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 += Idr[12];
	RHS2 -= go[12] * *cnV[12];
	m_A8 += gt[13];
	m_A8 += gt[14];
	m_A9 += go[13];
	double RHS3 = Idr[13];
	RHS3 += Idr[14];
	RHS3 -= go[14] * *cnV[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A12 += gt[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A12 += gt[20];
	m_A11 += go[15];
	m_A11 += go[16];
	m_A10 += go[17];
	double RHS4 = Idr[15];
	RHS4 += Idr[16];
	RHS4 += Idr[17];
	RHS4 += Idr[18];
	RHS4 += Idr[19];
	RHS4 += Idr[20];
	RHS4 -= go[18] * *cnV[18];
	RHS4 -= go[19] * *cnV[19];
	RHS4 -= go[20] * *cnV[20];
	m_A17 += gt[21];
	m_A17 += gt[22];
	m_A17 += gt[23];
	m_A17 += gt[24];
	m_A17 += gt[25];
	m_A15 += go[21];
	m_A15 += go[22];
	m_A14 += go[23];
	double RHS5 = Idr[21];
	RHS5 += Idr[22];
	RHS5 += Idr[23];
	RHS5 += Idr[24];
	RHS5 += Idr[25];
	RHS5 -= go[24] * *cnV[24];
	RHS5 -= go[25] * *cnV[25];
	m_A22 += gt[26];
	m_A22 += gt[27];
	m_A22 += gt[28];
	m_A22 += gt[29];
	m_A22 += gt[30];
	m_A20 += go[26];
	m_A19 += go[27];
	double RHS6 = Idr[26];
	RHS6 += Idr[27];
	RHS6 += Idr[28];
	RHS6 += Idr[29];
	RHS6 += Idr[30];
	RHS6 -= go[28] * *cnV[28];
	RHS6 -= go[29] * *cnV[29];
	RHS6 -= go[30] * *cnV[30];
	const double f0 = 1.0 / m_A0;
	const double f0_4 = -f0 * m_A10;
	m_A12 += m_A1 * f0_4;
	RHS4 += f0_4 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_4 = -f1 * m_A11;
	m_A12 += m_A3 * f1_4;
	m_A13 += m_A4 * f1_4;
	RHS4 += f1_4 * RHS1;
	const double f1_5 = -f1 * m_A14;
	m_A16 += m_A3 * f1_5;
	m_A17 += m_A4 * f1_5;
	RHS5 += f1_5 * RHS1;
	const double f2 = 1.0 / m_A5;
	const double f2_5 = -f2 * m_A15;
	m_A17 += m_A6 * f2_5;
	m_A18 += m_A7 * f2_5;
	RHS5 += f2_5 * RHS2;
	const double f2_6 = -f2 * m_A19;
	m_A21 += m_A6 * f2_6;
	m_A22 += m_A7 * f2_6;
	RHS6 += f2_6 * RHS2;
	const double f3 = 1.0 / m_A8;
	const double f3_6 = -f3 * m_A20;
	m_A22 += m_A9 * f3_6;
	RHS6 += f3_6 * RHS3;
	const double f4 = 1.0 / m_A12;
	const double f4_5 = -f4 * m_A16;
	m_A17 += m_A13 * f4_5;
	RHS5 += f4_5 * RHS4;
	const double f5 = 1.0 / m_A17;
	const double f5_6 = -f5 * m_A21;
	m_A22 += m_A18 * f5_6;
	RHS6 += f5_6 * RHS5;
	V[6] = RHS6 / m_A22;
	double tmp5 = 0.0;
	tmp5 += m_A18 * V[6];
	V[5] = (RHS5 - tmp5) / m_A17;
	double tmp4 = 0.0;
	tmp4 += m_A13 * V[5];
	V[4] = (RHS4 - tmp4) / m_A12;
	double tmp3 = 0.0;
	tmp3 += m_A9 * V[6];
	V[3] = (RHS3 - tmp3) / m_A8;
	double tmp2 = 0.0;
	tmp2 += m_A6 * V[5];
	tmp2 += m_A7 * V[6];
	V[2] = (RHS2 - tmp2) / m_A5;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[4];
	tmp1 += m_A4 * V[5];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[4];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// konami2x
static void nl_gcr_f6900d3f36a91049_85_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A9 += go[8];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 -= go[9] * *cnV[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A11 += go[10];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 -= go[11] * *cnV[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A13 += go[12];
	double RHS6 = Idr[12];
	RHS6 += Idr[13];
	RHS6 -= go[13] * *cnV[13];
	m_A14 += gt[14];
	m_A14 += gt[15];
	m_A15 += go[14];
	double RHS7 = Idr[14];
	RHS7 += Idr[15];
	RHS7 -= go[15] * *cnV[15];
	m_A16 += gt[16];
	m_A16 += gt[17];
	m_A17 += go[16];
	double RHS8 = Idr[16];
	RHS8 += Idr[17];
	RHS8 -= go[17] * *cnV[17];
	m_A18 += gt[18];
	m_A18 += gt[19];
	m_A19 += go[18];
	double RHS9 = Idr[18];
	RHS9 += Idr[19];
	RHS9 -= go[19] * *cnV[19];
	m_A20 += gt[20];
	m_A20 += gt[21];
	m_A21 += go[20];
	double RHS10 = Idr[20];
	RHS10 += Idr[21];
	RHS10 -= go[21] * *cnV[21];
	m_A22 += gt[22];
	m_A22 += gt[23];
	m_A23 += go[22];
	double RHS11 = Idr[22];
	RHS11 += Idr[23];
	RHS11 -= go[23] * *cnV[23];
	m_A24 += gt[24];
	m_A24 += gt[25];
	m_A25 += go[24];
	double RHS12 = Idr[24];
	RHS12 += Idr[25];
	RHS12 -= go[25] * *cnV[25];
	m_A26 += gt[26];
	m_A26 += gt[27];
	m_A26 += gt[28];
	m_A26 += gt[29];
	m_A26 += gt[30];
	m_A26 += gt[31];
	m_A26 += gt[32];
	m_A27 += go[26];
	double RHS13 = Idr[26];
	RHS13 += Idr[27];
	RHS13 += Idr[28];
	RHS13 += Idr[29];
	RHS13 += Idr[30];
	RHS13 += Idr[31];
	RHS13 += Idr[32];
	RHS13 -= go[27] * *cnV[27];
	RHS13 -= go[28] * *cnV[28];
	RHS13 -= go[29] * *cnV[29];
	RHS13 -= go[30] * *cnV[30];
	RHS13 -= go[31] * *cnV[31];
	RHS13 -= go[32] * *cnV[32];
	m_A28 += gt[33];
	m_A28 += gt[34];
	m_A29 += go[33];
	double RHS14 = Idr[33];
	RHS14 += Idr[34];
	RHS14 -= go[34] * *cnV[34];
	m_A30 += gt[35];
	m_A30 += gt[36];
	m_A31 += go[35];
	double RHS15 = Idr[35];
	RHS15 += Idr[36];
	RHS15 -= go[36] * *cnV[36];
	m_A35 += gt[37];
	m_A35 += gt[38];
	m_A35 += gt[39];
	m_A35 += gt[40];
	m_A36 += go[37];
	m_A34 += go[38];
	m_A33 += go[39];
	m_A32 += go[40];
	double RHS16 = Idr[37];
	RHS16 += Idr[38];
	RHS16 += Idr[39];
	RHS16 += Idr[40];
	m_A37 += gt[41];
	m_A37 += gt[42];
	m_A38 += go[41];
	double RHS17 = Idr[41];
	RHS17 += Idr[42];
	RHS17 -= go[42] * *cnV[42];
	m_A39 += gt[43];
	m_A39 += gt[44];
	m_A40 += go[43];
	double RHS18 = Idr[43];
	RHS18 += Idr[44];
	RHS18 -= go[44] * *cnV[44];
	m_A41 += gt[45];
	m_A41 += gt[46];
	m_A42 += go[45];
	double RHS19 = Idr[45];
	RHS19 += Idr[46];
	RHS19 -= go[46] * *cnV[46];
	m_A43 += gt[47];
	m_A43 += gt[48];
	m_A44 += go[47];
	double RHS20 = Idr[47];
	RHS20 += Idr[48];
	RHS20 -= go[48] * *cnV[48];
	m_A46 += gt[49];
	m_A46 += gt[50];
	m_A46 += gt[51];
	m_A45 += go[49];
	m_A47 += go[50];
	double RHS21 = Idr[49];
	RHS21 += Idr[50];
	RHS21 += Idr[51];
	RHS21 -= go[51] * *cnV[51];
	m_A51 += gt[52];
	m_A51 += gt[53];
	m_A51 += gt[54];
	m_A51 += gt[55];
	m_A52 += go[52];
	m_A50 += go[53];
	m_A49 += go[54];
	m_A48 += go[55];
	double RHS22 = Idr[52];
	RHS22 += Idr[53];
	RHS22 += Idr[54];
	RHS22 += Idr[55];
	m_A56 += gt[56];
	m_A56 += gt[57];
	m_A56 += gt[58];
	m_A56 += gt[59];
	m_A57 += go[56];
	m_A55 += go[57];
	m_A54 += go[58];
	m_A53 += go[59];
	double RHS23 = Idr[56];
	RHS23 += Idr[57];
	RHS23 += Idr[58];
	RHS23 += Idr[59];
	m_A61 += gt[60];
	m_A61 += gt[61];
	m_A61 += gt[62];
	m_A61 += gt[63];
	m_A62 += go[60];
	m_A60 += go[61];
	m_A59 += go[62];
	m_A58 += go[63];
	double RHS24 = Idr[60];
	RHS24 += Idr[61];
	RHS24 += Idr[62];
	RHS24 += Idr[63];
	m_A66 += gt[64];
	m_A66 += gt[65];
	m_A66 += gt[66];
	m_A66 += gt[67];
	m_A67 += go[64];
	m_A65 += go[65];
	m_A64 += go[66];
	m_A63 += go[67];
	double RHS25 = Idr[64];
	RHS25 += Idr[65];
	RHS25 += Idr[66];
	RHS25 += Idr[67];
	m_A71 += gt[68];
	m_A71 += gt[69];
	m_A71 += gt[70];
	m_A71 += gt[71];
	m_A72 += go[68];
	m_A70 += go[69];
	m_A69 += go[70];
	m_A68 += go[71];
	double RHS26 = Idr[68];
	RHS26 += Idr[69];
	RHS26 += Idr[70];
	RHS26 += Idr[71];
	m_A75 += gt[72];
	m_A75 += gt[73];
	m_A75 += gt[74];
	m_A75 += gt[75];
	m_A75 += gt[76];
	m_A73 += go[72];
	m_A74 += go[73];
	m_A76 += go[74];
	double RHS27 = Idr[72];
	RHS27 += Idr[73];
	RHS27 += Idr[74];
	RHS27 += Idr[75];
	RHS27 += Idr[76];
	RHS27 -= go[75] * *cnV[75];
	RHS27 -= go[76] * *cnV[76];
	m_A84 += gt[77];
	m_A84 += gt[78];
	m_A84 += gt[79];
	m_A84 += gt[80];
	m_A84 += gt[81];
	m_A84 += gt[82];
	m_A84 += gt[83];
	m_A84 += gt[84];
	m_A83 += go[77];
	m_A80 += go[78];
	m_A82 += go[79];
	m_A81 += go[80];
	m_A79 += go[81];
	m_A78 += go[82];
	m_A77 += go[83];
	double RHS28 = Idr[77];
	RHS28 += Idr[78];
	RHS28 += Idr[79];
	RHS28 += Idr[80];
	RHS28 += Idr[81];
	RHS28 += Idr[82];
	RHS28 += Idr[83];
	RHS28 += Idr[84];
	RHS28 -= go[84] * *cnV[84];
	const double f0 = 1.0 / m_A0;
	const double f0_16 = -f0 * m_A32;
	m_A35 += m_A1 * f0_16;
	RHS16 += f0_16 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_16 = -f1 * m_A33;
	m_A35 += m_A3 * f1_16;
	RHS16 += f1_16 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_16 = -f2 * m_A34;
	m_A35 += m_A5 * f2_16;
	RHS16 += f2_16 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_22 = -f3 * m_A48;
	m_A51 += m_A7 * f3_22;
	RHS22 += f3_22 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_22 = -f4 * m_A49;
	m_A51 += m_A9 * f4_22;
	RHS22 += f4_22 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_22 = -f5 * m_A50;
	m_A51 += m_A11 * f5_22;
	RHS22 += f5_22 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_23 = -f6 * m_A53;
	m_A56 += m_A13 * f6_23;
	RHS23 += f6_23 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_23 = -f7 * m_A54;
	m_A56 += m_A15 * f7_23;
	RHS23 += f7_23 * RHS7;
	const double f8 = 1.0 / m_A16;
	const double f8_23 = -f8 * m_A55;
	m_A56 += m_A17 * f8_23;
	RHS23 += f8_23 * RHS8;
	const double f9 = 1.0 / m_A18;
	const double f9_25 = -f9 * m_A63;
	m_A66 += m_A19 * f9_25;
	RHS25 += f9_25 * RHS9;
	const double f10 = 1.0 / m_A20;
	const double f10_26 = -f10 * m_A68;
	m_A71 += m_A21 * f10_26;
	RHS26 += f10_26 * RHS10;
	const double f11 = 1.0 / m_A22;
	const double f11_24 = -f11 * m_A58;
	m_A61 += m_A23 * f11_24;
	RHS24 += f11_24 * RHS11;
	const double f12 = 1.0 / m_A24;
	const double f12_24 = -f12 * m_A59;
	m_A61 += m_A25 * f12_24;
	RHS24 += f12_24 * RHS12;
	const double f13 = 1.0 / m_A26;
	const double f13_27 = -f13 * m_A73;
	m_A76 += m_A27 * f13_27;
	RHS27 += f13_27 * RHS13;
	const double f14 = 1.0 / m_A28;
	const double f14_24 = -f14 * m_A60;
	m_A61 += m_A29 * f14_24;
	RHS24 += f14_24 * RHS14;
	const double f15 = 1.0 / m_A30;
	const double f15_21 = -f15 * m_A45;
	m_A46 += m_A31 * f15_21;
	RHS21 += f15_21 * RHS15;
	const double f16 = 1.0 / m_A35;
	const double f16_28 = -f16 * m_A77;
	m_A84 += m_A36 * f16_28;
	RHS28 += f16_28 * RHS16;
	const double f17 = 1.0 / m_A37;
	const double f17_25 = -f17 * m_A64;
	m_A66 += m_A38 * f17_25;
	RHS25 += f17_25 * RHS17;
	const double f18 = 1.0 / m_A39;
	const double f18_25 = -f18 * m_A65;
	m_A66 += m_A40 * f18_25;
	RHS25 += f18_25 * RHS18;
	const double f19 = 1.0 / m_A41;
	const double f19_26 = -f19 * m_A69;
	m_A71 += m_A42 * f19_26;
	RHS26 += f19_26 * RHS19;
	const double f20 = 1.0 / m_A43;
	const double f20_26 = -f20 * m_A70;
	m_A71 += m_A44 * f20_26;
	RHS26 += f20_26 * RHS20;
	const double f21 = 1.0 / m_A46;
	const double f21_27 = -f21 * m_A74;
	m_A75 += m_A47 * f21_27;
	RHS27 += f21_27 * RHS21;
	const double f22 = 1.0 / m_A51;
	const double f22_28 = -f22 * m_A78;
	m_A84 += m_A52 * f22_28;
	RHS28 += f22_28 * RHS22;
	const double f23 = 1.0 / m_A56;
	const double f23_28 = -f23 * m_A79;
	m_A84 += m_A57 * f23_28;
	RHS28 += f23_28 * RHS23;
	const double f24 = 1.0 / m_A61;
	const double f24_28 = -f24 * m_A80;
	m_A84 += m_A62 * f24_28;
	RHS28 += f24_28 * RHS24;
	const double f25 = 1.0 / m_A66;
	const double f25_28 = -f25 * m_A81;
	m_A84 += m_A67 * f25_28;
	RHS28 += f25_28 * RHS25;
	const double f26 = 1.0 / m_A71;
	const double f26_28 = -f26 * m_A82;
	m_A84 += m_A72 * f26_28;
	RHS28 += f26_28 * RHS26;
	const double f27 = 1.0 / m_A75;
	const double f27_28 = -f27 * m_A83;
	m_A84 += m_A76 * f27_28;
	RHS28 += f27_28 * RHS27;
	V[28] = RHS28 / m_A84;
	double tmp27 = 0.0;
	tmp27 += m_A76 * V[28];
	V[27] = (RHS27 - tmp27) / m_A75;
	double tmp26 = 0.0;
	tmp26 += m_A72 * V[28];
	V[26] = (RHS26 - tmp26) / m_A71;
	double tmp25 = 0.0;
	tmp25 += m_A67 * V[28];
	V[25] = (RHS25 - tmp25) / m_A66;
	double tmp24 = 0.0;
	tmp24 += m_A62 * V[28];
	V[24] = (RHS24 - tmp24) / m_A61;
	double tmp23 = 0.0;
	tmp23 += m_A57 * V[28];
	V[23] = (RHS23 - tmp23) / m_A56;
	double tmp22 = 0.0;
	tmp22 += m_A52 * V[28];
	V[22] = (RHS22 - tmp22) / m_A51;
	double tmp21 = 0.0;
	tmp21 += m_A47 * V[27];
	V[21] = (RHS21 - tmp21) / m_A46;
	double tmp20 = 0.0;
	tmp20 += m_A44 * V[26];
	V[20] = (RHS20 - tmp20) / m_A43;
	double tmp19 = 0.0;
	tmp19 += m_A42 * V[26];
	V[19] = (RHS19 - tmp19) / m_A41;
	double tmp18 = 0.0;
	tmp18 += m_A40 * V[25];
	V[18] = (RHS18 - tmp18) / m_A39;
	double tmp17 = 0.0;
	tmp17 += m_A38 * V[25];
	V[17] = (RHS17 - tmp17) / m_A37;
	double tmp16 = 0.0;
	tmp16 += m_A36 * V[28];
	V[16] = (RHS16 - tmp16) / m_A35;
	double tmp15 = 0.0;
	tmp15 += m_A31 * V[21];
	V[15] = (RHS15 - tmp15) / m_A30;
	double tmp14 = 0.0;
	tmp14 += m_A29 * V[24];
	V[14] = (RHS14 - tmp14) / m_A28;
	double tmp13 = 0.0;
	tmp13 += m_A27 * V[28];
	V[13] = (RHS13 - tmp13) / m_A26;
	double tmp12 = 0.0;
	tmp12 += m_A25 * V[24];
	V[12] = (RHS12 - tmp12) / m_A24;
	double tmp11 = 0.0;
	tmp11 += m_A23 * V[24];
	V[11] = (RHS11 - tmp11) / m_A22;
	double tmp10 = 0.0;
	tmp10 += m_A21 * V[26];
	V[10] = (RHS10 - tmp10) / m_A20;
	double tmp9 = 0.0;
	tmp9 += m_A19 * V[25];
	V[9] = (RHS9 - tmp9) / m_A18;
	double tmp8 = 0.0;
	tmp8 += m_A17 * V[23];
	V[8] = (RHS8 - tmp8) / m_A16;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[23];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[23];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[22];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[22];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[22];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[16];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[16];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[16];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// breakout
static void nl_gcr_f7dc4f87b5a8ba93_7_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A0 += gt[2];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 += Idr[2];
	RHS0 -= go[1] * *cnV[1];
	RHS0 -= go[2] * *cnV[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[3];
	double RHS1 = Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[4] * *cnV[4];
	m_A6 += gt[5];
	m_A6 += gt[6];
	m_A5 += go[5];
	m_A4 += go[6];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	const double f0 = 1.0 / m_A0;
	const double f0_2 = -f0 * m_A4;
	m_A6 += m_A1 * f0_2;
	RHS2 += f0_2 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_2 = -f1 * m_A5;
	m_A6 += m_A3 * f1_2;
	RHS2 += f1_2 * RHS1;
	V[2] = RHS2 / m_A6;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[2];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[2];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// kidniki
static void nl_gcr_fc02559fdbfb0e10_67_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 -= go[3] * *cnV[3];
	m_A4 += gt[4];
	m_A4 += gt[5];
	m_A5 += go[4];
	double RHS2 = Idr[4];
	RHS2 += Idr[5];
	RHS2 -= go[5] * *cnV[5];
	m_A6 += gt[6];
	m_A6 += gt[7];
	m_A7 += go[6];
	double RHS3 = Idr[6];
	RHS3 += Idr[7];
	RHS3 -= go[7] * *cnV[7];
	m_A8 += gt[8];
	m_A8 += gt[9];
	m_A9 += go[8];
	double RHS4 = Idr[8];
	RHS4 += Idr[9];
	RHS4 -= go[9] * *cnV[9];
	m_A10 += gt[10];
	m_A10 += gt[11];
	m_A11 += go[10];
	double RHS5 = Idr[10];
	RHS5 += Idr[11];
	RHS5 -= go[11] * *cnV[11];
	m_A12 += gt[12];
	m_A12 += gt[13];
	m_A12 += gt[14];
	m_A12 += gt[15];
	m_A12 += gt[16];
	m_A12 += gt[17];
	m_A12 += gt[18];
	m_A12 += gt[19];
	m_A14 += go[12];
	m_A15 += go[13];
	m_A17 += go[14];
	m_A18 += go[15];
	m_A16 += go[16];
	m_A13 += go[17];
	double RHS6 = Idr[12];
	RHS6 += Idr[13];
	RHS6 += Idr[14];
	RHS6 += Idr[15];
	RHS6 += Idr[16];
	RHS6 += Idr[17];
	RHS6 += Idr[18];
	RHS6 += Idr[19];
	RHS6 -= go[18] * *cnV[18];
	RHS6 -= go[19] * *cnV[19];
	m_A21 += gt[20];
	m_A21 += gt[21];
	m_A21 += gt[22];
	m_A21 += gt[23];
	m_A20 += go[20];
	m_A19 += go[21];
	double RHS7 = Idr[20];
	RHS7 += Idr[21];
	RHS7 += Idr[22];
	RHS7 += Idr[23];
	RHS7 -= go[22] * *cnV[22];
	RHS7 -= go[23] * *cnV[23];
	m_A30 += gt[24];
	m_A30 += gt[25];
	m_A30 += gt[26];
	m_A30 += gt[27];
	m_A28 += go[24];
	m_A27 += go[25];
	double RHS8 = Idr[24];
	RHS8 += Idr[25];
	RHS8 += Idr[26];
	RHS8 += Idr[27];
	RHS8 -= go[26] * *cnV[26];
	RHS8 -= go[27] * *cnV[27];
	m_A39 += gt[28];
	m_A39 += gt[29];
	m_A39 += gt[30];
	m_A39 += gt[31];
	m_A36 += go[28];
	m_A35 += go[29];
	double RHS9 = Idr[28];
	RHS9 += Idr[29];
	RHS9 += Idr[30];
	RHS9 += Idr[31];
	RHS9 -= go[30] * *cnV[30];
	RHS9 -= go[31] * *cnV[31];
	m_A48 += gt[32];
	m_A48 += gt[33];
	m_A48 += gt[34];
	m_A48 += gt[35];
	m_A44 += go[32];
	m_A43 += go[33];
	double RHS10 = Idr[32];
	RHS10 += Idr[33];
	RHS10 += Idr[34];
	RHS10 += Idr[35];
	RHS10 -= go[34] * *cnV[34];
	RHS10 -= go[35] * *cnV[35];
	m_A57 += gt[36];
	m_A57 += gt[37];
	m_A57 += gt[38];
	m_A57 += gt[39];
	m_A52 += go[36];
	m_A51 += go[37];
	double RHS11 = Idr[36];
	RHS11 += Idr[37];
	RHS11 += Idr[38];
	RHS11 += Idr[39];
	RHS11 -= go[38] * *cnV[38];
	RHS11 -= go[39] * *cnV[39];
	m_A66 += gt[40];
	m_A66 += gt[41];
	m_A66 += gt[42];
	m_A66 += gt[43];
	m_A60 += go[40];
	m_A59 += go[41];
	double RHS12 = Idr[40];
	RHS12 += Idr[41];
	RHS12 += Idr[42];
	RHS12 += Idr[43];
	RHS12 -= go[42] * *cnV[42];
	RHS12 -= go[43] * *cnV[43];
	const double f0 = 1.0 / m_A0;
	const double f0_7 = -f0 * m_A19;
	m_A21 += m_A1 * f0_7;
	RHS7 += f0_7 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_10 = -f1 * m_A43;
	m_A48 += m_A3 * f1_10;
	RHS10 += f1_10 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_12 = -f2 * m_A59;
	m_A66 += m_A5 * f2_12;
	RHS12 += f2_12 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_11 = -f3 * m_A51;
	m_A57 += m_A7 * f3_11;
	RHS11 += f3_11 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_9 = -f4 * m_A35;
	m_A39 += m_A9 * f4_9;
	RHS9 += f4_9 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_8 = -f5 * m_A27;
	m_A30 += m_A11 * f5_8;
	RHS8 += f5_8 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_7 = -f6 * m_A20;
	m_A21 += m_A13 * f6_7;
	m_A22 += m_A14 * f6_7;
	m_A23 += m_A15 * f6_7;
	m_A24 += m_A16 * f6_7;
	m_A25 += m_A17 * f6_7;
	m_A26 += m_A18 * f6_7;
	RHS7 += f6_7 * RHS6;
	const double f6_8 = -f6 * m_A28;
	m_A29 += m_A13 * f6_8;
	m_A30 += m_A14 * f6_8;
	m_A31 += m_A15 * f6_8;
	m_A32 += m_A16 * f6_8;
	m_A33 += m_A17 * f6_8;
	m_A34 += m_A18 * f6_8;
	RHS8 += f6_8 * RHS6;
	const double f6_9 = -f6 * m_A36;
	m_A37 += m_A13 * f6_9;
	m_A38 += m_A14 * f6_9;
	m_A39 += m_A15 * f6_9;
	m_A40 += m_A16 * f6_9;
	m_A41 += m_A17 * f6_9;
	m_A42 += m_A18 * f6_9;
	RHS9 += f6_9 * RHS6;
	const double f6_10 = -f6 * m_A44;
	m_A45 += m_A13 * f6_10;
	m_A46 += m_A14 * f6_10;
	m_A47 += m_A15 * f6_10;
	m_A48 += m_A16 * f6_10;
	m_A49 += m_A17 * f6_10;
	m_A50 += m_A18 * f6_10;
	RHS10 += f6_10 * RHS6;
	const double f6_11 = -f6 * m_A52;
	m_A53 += m_A13 * f6_11;
	m_A54 += m_A14 * f6_11;
	m_A55 += m_A15 * f6_11;
	m_A56 += m_A16 * f6_11;
	m_A57 += m_A17 * f6_11;
	m_A58 += m_A18 * f6_11;
	RHS11 += f6_11 * RHS6;
	const double f6_12 = -f6 * m_A60;
	m_A61 += m_A13 * f6_12;
	m_A62 += m_A14 * f6_12;
	m_A63 += m_A15 * f6_12;
	m_A64 += m_A16 * f6_12;
	m_A65 += m_A17 * f6_12;
	m_A66 += m_A18 * f6_12;
	RHS12 += f6_12 * RHS6;
	const double f7 = 1.0 / m_A21;
	const double f7_8 = -f7 * m_A29;
	m_A30 += m_A22 * f7_8;
	m_A31 += m_A23 * f7_8;
	m_A32 += m_A24 * f7_8;
	m_A33 += m_A25 * f7_8;
	m_A34 += m_A26 * f7_8;
	RHS8 += f7_8 * RHS7;
	const double f7_9 = -f7 * m_A37;
	m_A38 += m_A22 * f7_9;
	m_A39 += m_A23 * f7_9;
	m_A40 += m_A24 * f7_9;
	m_A41 += m_A25 * f7_9;
	m_A42 += m_A26 * f7_9;
	RHS9 += f7_9 * RHS7;
	const double f7_10 = -f7 * m_A45;
	m_A46 += m_A22 * f7_10;
	m_A47 += m_A23 * f7_10;
	m_A48 += m_A24 * f7_10;
	m_A49 += m_A25 * f7_10;
	m_A50 += m_A26 * f7_10;
	RHS10 += f7_10 * RHS7;
	const double f7_11 = -f7 * m_A53;
	m_A54 += m_A22 * f7_11;
	m_A55 += m_A23 * f7_11;
	m_A56 += m_A24 * f7_11;
	m_A57 += m_A25 * f7_11;
	m_A58 += m_A26 * f7_11;
	RHS11 += f7_11 * RHS7;
	const double f7_12 = -f7 * m_A61;
	m_A62 += m_A22 * f7_12;
	m_A63 += m_A23 * f7_12;
	m_A64 += m_A24 * f7_12;
	m_A65 += m_A25 * f7_12;
	m_A66 += m_A26 * f7_12;
	RHS12 += f7_12 * RHS7;
	const double f8 = 1.0 / m_A30;
	const double f8_9 = -f8 * m_A38;
	m_A39 += m_A31 * f8_9;
	m_A40 += m_A32 * f8_9;
	m_A41 += m_A33 * f8_9;
	m_A42 += m_A34 * f8_9;
	RHS9 += f8_9 * RHS8;
	const double f8_10 = -f8 * m_A46;
	m_A47 += m_A31 * f8_10;
	m_A48 += m_A32 * f8_10;
	m_A49 += m_A33 * f8_10;
	m_A50 += m_A34 * f8_10;
	RHS10 += f8_10 * RHS8;
	const double f8_11 = -f8 * m_A54;
	m_A55 += m_A31 * f8_11;
	m_A56 += m_A32 * f8_11;
	m_A57 += m_A33 * f8_11;
	m_A58 += m_A34 * f8_11;
	RHS11 += f8_11 * RHS8;
	const double f8_12 = -f8 * m_A62;
	m_A63 += m_A31 * f8_12;
	m_A64 += m_A32 * f8_12;
	m_A65 += m_A33 * f8_12;
	m_A66 += m_A34 * f8_12;
	RHS12 += f8_12 * RHS8;
	const double f9 = 1.0 / m_A39;
	const double f9_10 = -f9 * m_A47;
	m_A48 += m_A40 * f9_10;
	m_A49 += m_A41 * f9_10;
	m_A50 += m_A42 * f9_10;
	RHS10 += f9_10 * RHS9;
	const double f9_11 = -f9 * m_A55;
	m_A56 += m_A40 * f9_11;
	m_A57 += m_A41 * f9_11;
	m_A58 += m_A42 * f9_11;
	RHS11 += f9_11 * RHS9;
	const double f9_12 = -f9 * m_A63;
	m_A64 += m_A40 * f9_12;
	m_A65 += m_A41 * f9_12;
	m_A66 += m_A42 * f9_12;
	RHS12 += f9_12 * RHS9;
	const double f10 = 1.0 / m_A48;
	const double f10_11 = -f10 * m_A56;
	m_A57 += m_A49 * f10_11;
	m_A58 += m_A50 * f10_11;
	RHS11 += f10_11 * RHS10;
	const double f10_12 = -f10 * m_A64;
	m_A65 += m_A49 * f10_12;
	m_A66 += m_A50 * f10_12;
	RHS12 += f10_12 * RHS10;
	const double f11 = 1.0 / m_A57;
	const double f11_12 = -f11 * m_A65;
	m_A66 += m_A58 * f11_12;
	RHS12 += f11_12 * RHS11;
	V[12] = RHS12 / m_A66;
	double tmp11 = 0.0;
	tmp11 += m_A58 * V[12];
	V[11] = (RHS11 - tmp11) / m_A57;
	double tmp10 = 0.0;
	tmp10 += m_A49 * V[11];
	tmp10 += m_A50 * V[12];
	V[10] = (RHS10 - tmp10) / m_A48;
	double tmp9 = 0.0;
	tmp9 += m_A40 * V[10];
	tmp9 += m_A41 * V[11];
	tmp9 += m_A42 * V[12];
	V[9] = (RHS9 - tmp9) / m_A39;
	double tmp8 = 0.0;
	tmp8 += m_A31 * V[9];
	tmp8 += m_A32 * V[10];
	tmp8 += m_A33 * V[11];
	tmp8 += m_A34 * V[12];
	V[8] = (RHS8 - tmp8) / m_A30;
	double tmp7 = 0.0;
	tmp7 += m_A22 * V[8];
	tmp7 += m_A23 * V[9];
	tmp7 += m_A24 * V[10];
	tmp7 += m_A25 * V[11];
	tmp7 += m_A26 * V[12];
	V[7] = (RHS7 - tmp7) / m_A21;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[7];
	tmp6 += m_A14 * V[8];
	tmp6 += m_A15 * V[9];
	tmp6 += m_A16 * V[10];
	tmp6 += m_A17 * V[11];
	tmp6 += m_A18 * V[12];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[8];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[9];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[11];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[12];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[10];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[7];
	V[0] = (RHS0 - tmp0) / m_A0;
}

// 280zzzap
static void nl_gcr_fc9971724787b82b_149_double_double(double * __restrict V, const double * __restrict go, const double * __restrict gt, const double * __restrict Idr, const double * const * __restrict cnV)

{

	plib::unused_var(cnV);
	double m_A0(0.0);
	double m_A1(0.0);
	double m_A2(0.0);
	double m_A3(0.0);
	double m_A4(0.0);
	double m_A5(0.0);
	double m_A6(0.0);
	double m_A7(0.0);
	double m_A8(0.0);
	double m_A9(0.0);
	double m_A10(0.0);
	double m_A11(0.0);
	double m_A12(0.0);
	double m_A13(0.0);
	double m_A14(0.0);
	double m_A15(0.0);
	double m_A16(0.0);
	double m_A17(0.0);
	double m_A18(0.0);
	double m_A19(0.0);
	double m_A20(0.0);
	double m_A21(0.0);
	double m_A22(0.0);
	double m_A23(0.0);
	double m_A24(0.0);
	double m_A25(0.0);
	double m_A26(0.0);
	double m_A27(0.0);
	double m_A28(0.0);
	double m_A29(0.0);
	double m_A30(0.0);
	double m_A31(0.0);
	double m_A32(0.0);
	double m_A33(0.0);
	double m_A34(0.0);
	double m_A35(0.0);
	double m_A36(0.0);
	double m_A37(0.0);
	double m_A38(0.0);
	double m_A39(0.0);
	double m_A40(0.0);
	double m_A41(0.0);
	double m_A42(0.0);
	double m_A43(0.0);
	double m_A44(0.0);
	double m_A45(0.0);
	double m_A46(0.0);
	double m_A47(0.0);
	double m_A48(0.0);
	double m_A49(0.0);
	double m_A50(0.0);
	double m_A51(0.0);
	double m_A52(0.0);
	double m_A53(0.0);
	double m_A54(0.0);
	double m_A55(0.0);
	double m_A56(0.0);
	double m_A57(0.0);
	double m_A58(0.0);
	double m_A59(0.0);
	double m_A60(0.0);
	double m_A61(0.0);
	double m_A62(0.0);
	double m_A63(0.0);
	double m_A64(0.0);
	double m_A65(0.0);
	double m_A66(0.0);
	double m_A67(0.0);
	double m_A68(0.0);
	double m_A69(0.0);
	double m_A70(0.0);
	double m_A71(0.0);
	double m_A72(0.0);
	double m_A73(0.0);
	double m_A74(0.0);
	double m_A75(0.0);
	double m_A76(0.0);
	double m_A77(0.0);
	double m_A78(0.0);
	double m_A79(0.0);
	double m_A80(0.0);
	double m_A81(0.0);
	double m_A82(0.0);
	double m_A83(0.0);
	double m_A84(0.0);
	double m_A85(0.0);
	double m_A86(0.0);
	double m_A87(0.0);
	double m_A88(0.0);
	double m_A89(0.0);
	double m_A90(0.0);
	double m_A91(0.0);
	double m_A92(0.0);
	double m_A93(0.0);
	double m_A94(0.0);
	double m_A95(0.0);
	double m_A96(0.0);
	double m_A97(0.0);
	double m_A98(0.0);
	double m_A99(0.0);
	double m_A100(0.0);
	double m_A101(0.0);
	double m_A102(0.0);
	double m_A103(0.0);
	double m_A104(0.0);
	double m_A105(0.0);
	double m_A106(0.0);
	double m_A107(0.0);
	double m_A108(0.0);
	double m_A109(0.0);
	double m_A110(0.0);
	double m_A111(0.0);
	double m_A112(0.0);
	double m_A113(0.0);
	double m_A114(0.0);
	double m_A115(0.0);
	double m_A116(0.0);
	double m_A117(0.0);
	double m_A118(0.0);
	double m_A119(0.0);
	double m_A120(0.0);
	double m_A121(0.0);
	double m_A122(0.0);
	double m_A123(0.0);
	double m_A124(0.0);
	double m_A125(0.0);
	double m_A126(0.0);
	double m_A127(0.0);
	double m_A128(0.0);
	double m_A129(0.0);
	double m_A130(0.0);
	double m_A131(0.0);
	double m_A132(0.0);
	double m_A133(0.0);
	double m_A134(0.0);
	double m_A135(0.0);
	double m_A136(0.0);
	double m_A137(0.0);
	double m_A138(0.0);
	double m_A139(0.0);
	double m_A140(0.0);
	double m_A141(0.0);
	double m_A142(0.0);
	double m_A143(0.0);
	double m_A144(0.0);
	double m_A145(0.0);
	double m_A146(0.0);
	double m_A147(0.0);
	double m_A148(0.0);
	m_A0 += gt[0];
	m_A0 += gt[1];
	m_A1 += go[0];
	double RHS0 = Idr[0];
	RHS0 += Idr[1];
	RHS0 -= go[1] * *cnV[1];
	m_A2 += gt[2];
	m_A2 += gt[3];
	m_A2 += gt[4];
	m_A3 += go[2];
	double RHS1 = Idr[2];
	RHS1 += Idr[3];
	RHS1 += Idr[4];
	RHS1 -= go[3] * *cnV[3];
	RHS1 -= go[4] * *cnV[4];
	m_A4 += gt[5];
	m_A4 += gt[6];
	m_A4 += gt[7];
	m_A4 += gt[8];
	m_A4 += gt[9];
	m_A4 += gt[10];
	m_A4 += gt[11];
	m_A5 += go[5];
	double RHS2 = Idr[5];
	RHS2 += Idr[6];
	RHS2 += Idr[7];
	RHS2 += Idr[8];
	RHS2 += Idr[9];
	RHS2 += Idr[10];
	RHS2 += Idr[11];
	RHS2 -= go[6] * *cnV[6];
	RHS2 -= go[7] * *cnV[7];
	RHS2 -= go[8] * *cnV[8];
	RHS2 -= go[9] * *cnV[9];
	RHS2 -= go[10] * *cnV[10];
	RHS2 -= go[11] * *cnV[11];
	m_A6 += gt[12];
	m_A6 += gt[13];
	m_A7 += go[12];
	double RHS3 = Idr[12];
	RHS3 += Idr[13];
	RHS3 -= go[13] * *cnV[13];
	m_A8 += gt[14];
	m_A8 += gt[15];
	m_A9 += go[14];
	double RHS4 = Idr[14];
	RHS4 += Idr[15];
	RHS4 -= go[15] * *cnV[15];
	m_A10 += gt[16];
	m_A10 += gt[17];
	m_A10 += gt[18];
	m_A10 += gt[19];
	m_A10 += gt[20];
	m_A10 += gt[21];
	m_A10 += gt[22];
	m_A11 += go[16];
	double RHS5 = Idr[16];
	RHS5 += Idr[17];
	RHS5 += Idr[18];
	RHS5 += Idr[19];
	RHS5 += Idr[20];
	RHS5 += Idr[21];
	RHS5 += Idr[22];
	RHS5 -= go[17] * *cnV[17];
	RHS5 -= go[18] * *cnV[18];
	RHS5 -= go[19] * *cnV[19];
	RHS5 -= go[20] * *cnV[20];
	RHS5 -= go[21] * *cnV[21];
	RHS5 -= go[22] * *cnV[22];
	m_A12 += gt[23];
	m_A12 += gt[24];
	m_A12 += gt[25];
	m_A13 += go[23];
	double RHS6 = Idr[23];
	RHS6 += Idr[24];
	RHS6 += Idr[25];
	RHS6 -= go[24] * *cnV[24];
	RHS6 -= go[25] * *cnV[25];
	m_A14 += gt[26];
	m_A14 += gt[27];
	m_A16 += go[26];
	m_A15 += go[27];
	double RHS7 = Idr[26];
	RHS7 += Idr[27];
	m_A17 += gt[28];
	m_A17 += gt[29];
	m_A18 += go[28];
	double RHS8 = Idr[28];
	RHS8 += Idr[29];
	RHS8 -= go[29] * *cnV[29];
	m_A19 += gt[30];
	m_A19 += gt[31];
	m_A20 += go[30];
	double RHS9 = Idr[30];
	RHS9 += Idr[31];
	RHS9 -= go[31] * *cnV[31];
	m_A21 += gt[32];
	m_A21 += gt[33];
	m_A22 += go[32];
	double RHS10 = Idr[32];
	RHS10 += Idr[33];
	RHS10 -= go[33] * *cnV[33];
	m_A23 += gt[34];
	m_A23 += gt[35];
	m_A23 += gt[36];
	m_A23 += gt[37];
	m_A23 += gt[38];
	m_A23 += gt[39];
	m_A23 += gt[40];
	m_A24 += go[34];
	double RHS11 = Idr[34];
	RHS11 += Idr[35];
	RHS11 += Idr[36];
	RHS11 += Idr[37];
	RHS11 += Idr[38];
	RHS11 += Idr[39];
	RHS11 += Idr[40];
	RHS11 -= go[35] * *cnV[35];
	RHS11 -= go[36] * *cnV[36];
	RHS11 -= go[37] * *cnV[37];
	RHS11 -= go[38] * *cnV[38];
	RHS11 -= go[39] * *cnV[39];
	RHS11 -= go[40] * *cnV[40];
	m_A25 += gt[41];
	m_A25 += gt[42];
	m_A26 += go[41];
	double RHS12 = Idr[41];
	RHS12 += Idr[42];
	RHS12 -= go[42] * *cnV[42];
	m_A27 += gt[43];
	m_A27 += gt[44];
	m_A27 += gt[45];
	m_A27 += gt[46];
	m_A27 += gt[47];
	m_A27 += gt[48];
	m_A27 += gt[49];
	m_A28 += go[43];
	double RHS13 = Idr[43];
	RHS13 += Idr[44];
	RHS13 += Idr[45];
	RHS13 += Idr[46];
	RHS13 += Idr[47];
	RHS13 += Idr[48];
	RHS13 += Idr[49];
	RHS13 -= go[44] * *cnV[44];
	RHS13 -= go[45] * *cnV[45];
	RHS13 -= go[46] * *cnV[46];
	RHS13 -= go[47] * *cnV[47];
	RHS13 -= go[48] * *cnV[48];
	RHS13 -= go[49] * *cnV[49];
	m_A29 += gt[50];
	m_A29 += gt[51];
	m_A29 += gt[52];
	m_A30 += go[50];
	double RHS14 = Idr[50];
	RHS14 += Idr[51];
	RHS14 += Idr[52];
	RHS14 -= go[51] * *cnV[51];
	RHS14 -= go[52] * *cnV[52];
	m_A31 += gt[53];
	m_A31 += gt[54];
	m_A32 += go[53];
	double RHS15 = Idr[53];
	RHS15 += Idr[54];
	RHS15 -= go[54] * *cnV[54];
	m_A33 += gt[55];
	m_A33 += gt[56];
	m_A33 += gt[57];
	m_A33 += gt[58];
	m_A34 += go[55];
	m_A35 += go[56];
	double RHS16 = Idr[55];
	RHS16 += Idr[56];
	RHS16 += Idr[57];
	RHS16 += Idr[58];
	RHS16 -= go[57] * *cnV[57];
	RHS16 -= go[58] * *cnV[58];
	m_A36 += gt[59];
	m_A36 += gt[60];
	m_A36 += gt[61];
	m_A37 += go[59];
	double RHS17 = Idr[59];
	RHS17 += Idr[60];
	RHS17 += Idr[61];
	RHS17 -= go[60] * *cnV[60];
	RHS17 -= go[61] * *cnV[61];
	m_A38 += gt[62];
	m_A38 += gt[63];
	m_A39 += go[62];
	m_A40 += go[63];
	double RHS18 = Idr[62];
	RHS18 += Idr[63];
	m_A41 += gt[64];
	m_A41 += gt[65];
	m_A42 += go[64];
	m_A43 += go[65];
	double RHS19 = Idr[64];
	RHS19 += Idr[65];
	m_A45 += gt[66];
	m_A45 += gt[67];
	m_A44 += go[66];
	double RHS20 = Idr[66];
	RHS20 += Idr[67];
	RHS20 -= go[67] * *cnV[67];
	m_A47 += gt[68];
	m_A47 += gt[69];
	m_A47 += gt[70];
	m_A47 += gt[71];
	m_A46 += go[68];
	m_A48 += go[69];
	double RHS21 = Idr[68];
	RHS21 += Idr[69];
	RHS21 += Idr[70];
	RHS21 += Idr[71];
	RHS21 -= go[70] * *cnV[70];
	RHS21 -= go[71] * *cnV[71];
	m_A51 += gt[72];
	m_A51 += gt[73];
	m_A51 += gt[74];
	m_A51 += gt[75];
	m_A51 += gt[76];
	m_A51 += gt[77];
	m_A49 += go[72];
	m_A53 += go[73];
	m_A54 += go[74];
	m_A52 += go[75];
	double RHS22 = Idr[72];
	RHS22 += Idr[73];
	RHS22 += Idr[74];
	RHS22 += Idr[75];
	RHS22 += Idr[76];
	RHS22 += Idr[77];
	RHS22 -= go[76] * *cnV[76];
	RHS22 -= go[77] * *cnV[77];
	m_A56 += gt[78];
	m_A56 += gt[79];
	m_A55 += go[78];
	double RHS23 = Idr[78];
	RHS23 += Idr[79];
	RHS23 -= go[79] * *cnV[79];
	m_A58 += gt[80];
	m_A58 += gt[81];
	m_A58 += gt[82];
	m_A58 += gt[83];
	m_A57 += go[80];
	m_A59 += go[81];
	double RHS24 = Idr[80];
	RHS24 += Idr[81];
	RHS24 += Idr[82];
	RHS24 += Idr[83];
	RHS24 -= go[82] * *cnV[82];
	RHS24 -= go[83] * *cnV[83];
	m_A63 += gt[84];
	m_A63 += gt[85];
	m_A63 += gt[86];
	m_A63 += gt[87];
	m_A63 += gt[88];
	m_A63 += gt[89];
	m_A60 += go[84];
	m_A61 += go[85];
	m_A65 += go[86];
	m_A66 += go[87];
	double RHS25 = Idr[84];
	RHS25 += Idr[85];
	RHS25 += Idr[86];
	RHS25 += Idr[87];
	RHS25 += Idr[88];
	RHS25 += Idr[89];
	RHS25 -= go[88] * *cnV[88];
	RHS25 -= go[89] * *cnV[89];
	m_A69 += gt[90];
	m_A69 += gt[91];
	m_A68 += go[90];
	m_A67 += go[91];
	double RHS26 = Idr[90];
	RHS26 += Idr[91];
	m_A72 += gt[92];
	m_A72 += gt[93];
	m_A71 += go[92];
	m_A73 += go[93];
	double RHS27 = Idr[92];
	RHS27 += Idr[93];
	m_A78 += gt[94];
	m_A78 += gt[95];
	m_A78 += gt[96];
	m_A78 += gt[97];
	m_A76 += go[94];
	m_A75 += go[95];
	m_A81 += go[96];
	m_A74 += go[97];
	double RHS28 = Idr[94];
	RHS28 += Idr[95];
	RHS28 += Idr[96];
	RHS28 += Idr[97];
	m_A85 += gt[98];
	m_A85 += gt[99];
	m_A83 += go[98];
	m_A82 += go[99];
	double RHS29 = Idr[98];
	RHS29 += Idr[99];
	m_A87 += gt[100];
	m_A87 += gt[101];
	m_A87 += gt[102];
	m_A87 += gt[103];
	m_A86 += go[100];
	m_A89 += go[101];
	double RHS30 = Idr[100];
	RHS30 += Idr[101];
	RHS30 += Idr[102];
	RHS30 += Idr[103];
	RHS30 -= go[102] * *cnV[102];
	RHS30 -= go[103] * *cnV[103];
	m_A91 += gt[104];
	m_A91 += gt[105];
	m_A91 += gt[106];
	m_A91 += gt[107];
	m_A90 += go[104];
	m_A92 += go[105];
	double RHS31 = Idr[104];
	RHS31 += Idr[105];
	RHS31 += Idr[106];
	RHS31 += Idr[107];
	RHS31 -= go[106] * *cnV[106];
	RHS31 -= go[107] * *cnV[107];
	m_A97 += gt[108];
	m_A97 += gt[109];
	m_A97 += gt[110];
	m_A97 += gt[111];
	m_A97 += gt[112];
	m_A96 += go[108];
	m_A95 += go[109];
	m_A99 += go[110];
	m_A94 += go[111];
	m_A93 += go[112];
	double RHS32 = Idr[108];
	RHS32 += Idr[109];
	RHS32 += Idr[110];
	RHS32 += Idr[111];
	RHS32 += Idr[112];
	m_A107 += gt[113];
	m_A107 += gt[114];
	m_A107 += gt[115];
	m_A107 += gt[116];
	m_A107 += gt[117];
	m_A104 += go[113];
	m_A103 += go[114];
	m_A101 += go[115];
	m_A100 += go[116];
	m_A102 += go[117];
	double RHS33 = Idr[113];
	RHS33 += Idr[114];
	RHS33 += Idr[115];
	RHS33 += Idr[116];
	RHS33 += Idr[117];
	m_A111 += gt[118];
	m_A111 += gt[119];
	m_A111 += gt[120];
	m_A111 += gt[121];
	m_A110 += go[118];
	m_A112 += go[119];
	double RHS34 = Idr[118];
	RHS34 += Idr[119];
	RHS34 += Idr[120];
	RHS34 += Idr[121];
	RHS34 -= go[120] * *cnV[120];
	RHS34 -= go[121] * *cnV[121];
	m_A117 += gt[122];
	m_A117 += gt[123];
	m_A117 += gt[124];
	m_A117 += gt[125];
	m_A117 += gt[126];
	m_A117 += gt[127];
	m_A113 += go[122];
	m_A115 += go[123];
	m_A114 += go[124];
	m_A119 += go[125];
	double RHS35 = Idr[122];
	RHS35 += Idr[123];
	RHS35 += Idr[124];
	RHS35 += Idr[125];
	RHS35 += Idr[126];
	RHS35 += Idr[127];
	RHS35 -= go[126] * *cnV[126];
	RHS35 -= go[127] * *cnV[127];
	m_A128 += gt[128];
	m_A128 += gt[129];
	m_A128 += gt[130];
	m_A128 += gt[131];
	m_A128 += gt[132];
	m_A125 += go[128];
	m_A122 += go[129];
	m_A123 += go[130];
	m_A121 += go[131];
	m_A120 += go[132];
	double RHS36 = Idr[128];
	RHS36 += Idr[129];
	RHS36 += Idr[130];
	RHS36 += Idr[131];
	RHS36 += Idr[132];
	m_A136 += gt[133];
	m_A136 += gt[134];
	m_A136 += gt[135];
	m_A136 += gt[136];
	m_A136 += gt[137];
	m_A130 += go[133];
	m_A132 += go[134];
	m_A131 += go[135];
	m_A134 += go[136];
	double RHS37 = Idr[133];
	RHS37 += Idr[134];
	RHS37 += Idr[135];
	RHS37 += Idr[136];
	RHS37 += Idr[137];
	RHS37 -= go[137] * *cnV[137];
	m_A148 += gt[138];
	m_A148 += gt[139];
	m_A148 += gt[140];
	m_A148 += gt[141];
	m_A148 += gt[142];
	m_A148 += gt[143];
	m_A148 += gt[144];
	m_A145 += go[138];
	m_A140 += go[139];
	m_A143 += go[140];
	m_A139 += go[141];
	m_A138 += go[142];
	m_A141 += go[143];
	m_A142 += go[144];
	double RHS38 = Idr[138];
	RHS38 += Idr[139];
	RHS38 += Idr[140];
	RHS38 += Idr[141];
	RHS38 += Idr[142];
	RHS38 += Idr[143];
	RHS38 += Idr[144];
	const double f0 = 1.0 / m_A0;
	const double f0_20 = -f0 * m_A44;
	m_A45 += m_A1 * f0_20;
	RHS20 += f0_20 * RHS0;
	const double f0_32 = -f0 * m_A93;
	m_A95 += m_A1 * f0_32;
	RHS32 += f0_32 * RHS0;
	const double f1 = 1.0 / m_A2;
	const double f1_21 = -f1 * m_A46;
	m_A48 += m_A3 * f1_21;
	RHS21 += f1_21 * RHS1;
	const double f1_32 = -f1 * m_A94;
	m_A97 += m_A3 * f1_32;
	RHS32 += f1_32 * RHS1;
	const double f2 = 1.0 / m_A4;
	const double f2_22 = -f2 * m_A49;
	m_A50 += m_A5 * f2_22;
	RHS22 += f2_22 * RHS2;
	const double f3 = 1.0 / m_A6;
	const double f3_37 = -f3 * m_A130;
	m_A136 += m_A7 * f3_37;
	RHS37 += f3_37 * RHS3;
	const double f4 = 1.0 / m_A8;
	const double f4_23 = -f4 * m_A55;
	m_A56 += m_A9 * f4_23;
	RHS23 += f4_23 * RHS4;
	const double f4_33 = -f4 * m_A100;
	m_A103 += m_A9 * f4_33;
	RHS33 += f4_33 * RHS4;
	const double f5 = 1.0 / m_A10;
	const double f5_25 = -f5 * m_A60;
	m_A62 += m_A11 * f5_25;
	RHS25 += f5_25 * RHS5;
	const double f6 = 1.0 / m_A12;
	const double f6_24 = -f6 * m_A57;
	m_A59 += m_A13 * f6_24;
	RHS24 += f6_24 * RHS6;
	const double f6_33 = -f6 * m_A101;
	m_A107 += m_A13 * f6_33;
	RHS33 += f6_33 * RHS6;
	const double f7 = 1.0 / m_A14;
	const double f7_25 = -f7 * m_A61;
	m_A63 += m_A15 * f7_25;
	m_A64 += m_A16 * f7_25;
	RHS25 += f7_25 * RHS7;
	const double f7_28 = -f7 * m_A74;
	m_A77 += m_A15 * f7_28;
	m_A78 += m_A16 * f7_28;
	RHS28 += f7_28 * RHS7;
	const double f8 = 1.0 / m_A17;
	const double f8_28 = -f8 * m_A75;
	m_A78 += m_A18 * f8_28;
	RHS28 += f8_28 * RHS8;
	const double f9 = 1.0 / m_A19;
	const double f9_27 = -f9 * m_A71;
	m_A72 += m_A20 * f9_27;
	RHS27 += f9_27 * RHS9;
	const double f10 = 1.0 / m_A21;
	const double f10_28 = -f10 * m_A76;
	m_A78 += m_A22 * f10_28;
	RHS28 += f10_28 * RHS10;
	const double f11 = 1.0 / m_A23;
	const double f11_35 = -f11 * m_A113;
	m_A116 += m_A24 * f11_35;
	RHS35 += f11_35 * RHS11;
	const double f12 = 1.0 / m_A25;
	const double f12_29 = -f12 * m_A82;
	m_A85 += m_A26 * f12_29;
	RHS29 += f12_29 * RHS12;
	const double f12_38 = -f12 * m_A138;
	m_A143 += m_A26 * f12_38;
	RHS38 += f12_38 * RHS12;
	const double f13 = 1.0 / m_A27;
	const double f13_30 = -f13 * m_A86;
	m_A88 += m_A28 * f13_30;
	RHS30 += f13_30 * RHS13;
	const double f14 = 1.0 / m_A29;
	const double f14_34 = -f14 * m_A110;
	m_A112 += m_A30 * f14_34;
	RHS34 += f14_34 * RHS14;
	const double f14_38 = -f14 * m_A139;
	m_A148 += m_A30 * f14_38;
	RHS38 += f14_38 * RHS14;
	const double f15 = 1.0 / m_A31;
	const double f15_26 = -f15 * m_A67;
	m_A69 += m_A32 * f15_26;
	RHS26 += f15_26 * RHS15;
	const double f15_36 = -f15 * m_A120;
	m_A123 += m_A32 * f15_36;
	RHS36 += f15_36 * RHS15;
	const double f16 = 1.0 / m_A33;
	const double f16_26 = -f16 * m_A68;
	m_A69 += m_A34 * f16_26;
	m_A70 += m_A35 * f16_26;
	RHS26 += f16_26 * RHS16;
	const double f16_29 = -f16 * m_A83;
	m_A84 += m_A34 * f16_29;
	m_A85 += m_A35 * f16_29;
	RHS29 += f16_29 * RHS16;
	const double f17 = 1.0 / m_A36;
	const double f17_31 = -f17 * m_A90;
	m_A92 += m_A37 * f17_31;
	RHS31 += f17_31 * RHS17;
	const double f17_36 = -f17 * m_A121;
	m_A128 += m_A37 * f17_36;
	RHS36 += f17_36 * RHS17;
	const double f18 = 1.0 / m_A38;
	const double f18_35 = -f18 * m_A114;
	m_A117 += m_A39 * f18_35;
	m_A119 += m_A40 * f18_35;
	RHS35 += f18_35 * RHS18;
	const double f18_38 = -f18 * m_A140;
	m_A145 += m_A39 * f18_38;
	m_A148 += m_A40 * f18_38;
	RHS38 += f18_38 * RHS18;
	const double f19 = 1.0 / m_A41;
	const double f19_35 = -f19 * m_A115;
	m_A117 += m_A42 * f19_35;
	m_A118 += m_A43 * f19_35;
	RHS35 += f19_35 * RHS19;
	const double f19_36 = -f19 * m_A122;
	m_A127 += m_A42 * f19_36;
	m_A128 += m_A43 * f19_36;
	RHS36 += f19_36 * RHS19;
	const double f20 = 1.0 / m_A45;
	const double f20_32 = -f20 * m_A95;
	RHS32 += f20_32 * RHS20;
	const double f21 = 1.0 / m_A47;
	const double f21_22 = -f21 * m_A50;
	m_A52 += m_A48 * f21_22;
	RHS22 += f21_22 * RHS21;
	const double f22 = 1.0 / m_A51;
	const double f22_32 = -f22 * m_A96;
	m_A97 += m_A52 * f22_32;
	m_A98 += m_A53 * f22_32;
	m_A99 += m_A54 * f22_32;
	RHS32 += f22_32 * RHS22;
	const double f22_33 = -f22 * m_A102;
	m_A106 += m_A52 * f22_33;
	m_A107 += m_A53 * f22_33;
	m_A108 += m_A54 * f22_33;
	RHS33 += f22_33 * RHS22;
	const double f22_37 = -f22 * m_A131;
	m_A134 += m_A52 * f22_37;
	m_A135 += m_A53 * f22_37;
	m_A136 += m_A54 * f22_37;
	RHS37 += f22_37 * RHS22;
	const double f23 = 1.0 / m_A56;
	const double f23_33 = -f23 * m_A103;
	RHS33 += f23_33 * RHS23;
	const double f24 = 1.0 / m_A58;
	const double f24_25 = -f24 * m_A62;
	m_A65 += m_A59 * f24_25;
	RHS25 += f24_25 * RHS24;
	const double f25 = 1.0 / m_A63;
	const double f25_28 = -f25 * m_A77;
	m_A78 += m_A64 * f25_28;
	m_A79 += m_A65 * f25_28;
	m_A80 += m_A66 * f25_28;
	RHS28 += f25_28 * RHS25;
	const double f25_33 = -f25 * m_A104;
	m_A105 += m_A64 * f25_33;
	m_A107 += m_A65 * f25_33;
	m_A108 += m_A66 * f25_33;
	RHS33 += f25_33 * RHS25;
	const double f25_37 = -f25 * m_A132;
	m_A133 += m_A64 * f25_37;
	m_A135 += m_A65 * f25_37;
	m_A136 += m_A66 * f25_37;
	RHS37 += f25_37 * RHS25;
	const double f26 = 1.0 / m_A69;
	const double f26_29 = -f26 * m_A84;
	m_A85 += m_A70 * f26_29;
	RHS29 += f26_29 * RHS26;
	const double f26_36 = -f26 * m_A123;
	m_A124 += m_A70 * f26_36;
	RHS36 += f26_36 * RHS26;
	const double f27 = 1.0 / m_A72;
	const double f27_38 = -f27 * m_A141;
	m_A148 += m_A73 * f27_38;
	RHS38 += f27_38 * RHS27;
	const double f28 = 1.0 / m_A78;
	const double f28_33 = -f28 * m_A105;
	m_A107 += m_A79 * f28_33;
	m_A108 += m_A80 * f28_33;
	m_A109 += m_A81 * f28_33;
	RHS33 += f28_33 * RHS28;
	const double f28_37 = -f28 * m_A133;
	m_A135 += m_A79 * f28_37;
	m_A136 += m_A80 * f28_37;
	m_A137 += m_A81 * f28_37;
	RHS37 += f28_37 * RHS28;
	const double f28_38 = -f28 * m_A142;
	m_A144 += m_A79 * f28_38;
	m_A147 += m_A80 * f28_38;
	m_A148 += m_A81 * f28_38;
	RHS38 += f28_38 * RHS28;
	const double f29 = 1.0 / m_A85;
	const double f29_36 = -f29 * m_A124;
	RHS36 += f29_36 * RHS29;
	const double f29_38 = -f29 * m_A143;
	RHS38 += f29_38 * RHS29;
	const double f30 = 1.0 / m_A87;
	const double f30_36 = -f30 * m_A125;
	m_A126 += m_A88 * f30_36;
	m_A128 += m_A89 * f30_36;
	RHS36 += f30_36 * RHS30;
	const double f31 = 1.0 / m_A91;
	const double f31_36 = -f31 * m_A126;
	m_A128 += m_A92 * f31_36;
	RHS36 += f31_36 * RHS31;
	const double f32 = 1.0 / m_A97;
	const double f32_33 = -f32 * m_A106;
	m_A107 += m_A98 * f32_33;
	m_A108 += m_A99 * f32_33;
	RHS33 += f32_33 * RHS32;
	const double f32_37 = -f32 * m_A134;
	m_A135 += m_A98 * f32_37;
	m_A136 += m_A99 * f32_37;
	RHS37 += f32_37 * RHS32;
	const double f33 = 1.0 / m_A107;
	const double f33_37 = -f33 * m_A135;
	m_A136 += m_A108 * f33_37;
	m_A137 += m_A109 * f33_37;
	RHS37 += f33_37 * RHS33;
	const double f33_38 = -f33 * m_A144;
	m_A147 += m_A108 * f33_38;
	m_A148 += m_A109 * f33_38;
	RHS38 += f33_38 * RHS33;
	const double f34 = 1.0 / m_A111;
	const double f34_35 = -f34 * m_A116;
	m_A119 += m_A112 * f34_35;
	RHS35 += f34_35 * RHS34;
	const double f35 = 1.0 / m_A117;
	const double f35_36 = -f35 * m_A127;
	m_A128 += m_A118 * f35_36;
	m_A129 += m_A119 * f35_36;
	RHS36 += f35_36 * RHS35;
	const double f35_38 = -f35 * m_A145;
	m_A146 += m_A118 * f35_38;
	m_A148 += m_A119 * f35_38;
	RHS38 += f35_38 * RHS35;
	const double f36 = 1.0 / m_A128;
	const double f36_38 = -f36 * m_A146;
	m_A148 += m_A129 * f36_38;
	RHS38 += f36_38 * RHS36;
	const double f37 = 1.0 / m_A136;
	const double f37_38 = -f37 * m_A147;
	m_A148 += m_A137 * f37_38;
	RHS38 += f37_38 * RHS37;
	V[38] = RHS38 / m_A148;
	double tmp37 = 0.0;
	tmp37 += m_A137 * V[38];
	V[37] = (RHS37 - tmp37) / m_A136;
	double tmp36 = 0.0;
	tmp36 += m_A129 * V[38];
	V[36] = (RHS36 - tmp36) / m_A128;
	double tmp35 = 0.0;
	tmp35 += m_A118 * V[36];
	tmp35 += m_A119 * V[38];
	V[35] = (RHS35 - tmp35) / m_A117;
	double tmp34 = 0.0;
	tmp34 += m_A112 * V[38];
	V[34] = (RHS34 - tmp34) / m_A111;
	double tmp33 = 0.0;
	tmp33 += m_A108 * V[37];
	tmp33 += m_A109 * V[38];
	V[33] = (RHS33 - tmp33) / m_A107;
	double tmp32 = 0.0;
	tmp32 += m_A98 * V[33];
	tmp32 += m_A99 * V[37];
	V[32] = (RHS32 - tmp32) / m_A97;
	double tmp31 = 0.0;
	tmp31 += m_A92 * V[36];
	V[31] = (RHS31 - tmp31) / m_A91;
	double tmp30 = 0.0;
	tmp30 += m_A88 * V[31];
	tmp30 += m_A89 * V[36];
	V[30] = (RHS30 - tmp30) / m_A87;
	double tmp29 = 0.0;
	V[29] = (RHS29 - tmp29) / m_A85;
	double tmp28 = 0.0;
	tmp28 += m_A79 * V[33];
	tmp28 += m_A80 * V[37];
	tmp28 += m_A81 * V[38];
	V[28] = (RHS28 - tmp28) / m_A78;
	double tmp27 = 0.0;
	tmp27 += m_A73 * V[38];
	V[27] = (RHS27 - tmp27) / m_A72;
	double tmp26 = 0.0;
	tmp26 += m_A70 * V[29];
	V[26] = (RHS26 - tmp26) / m_A69;
	double tmp25 = 0.0;
	tmp25 += m_A64 * V[28];
	tmp25 += m_A65 * V[33];
	tmp25 += m_A66 * V[37];
	V[25] = (RHS25 - tmp25) / m_A63;
	double tmp24 = 0.0;
	tmp24 += m_A59 * V[33];
	V[24] = (RHS24 - tmp24) / m_A58;
	double tmp23 = 0.0;
	V[23] = (RHS23 - tmp23) / m_A56;
	double tmp22 = 0.0;
	tmp22 += m_A52 * V[32];
	tmp22 += m_A53 * V[33];
	tmp22 += m_A54 * V[37];
	V[22] = (RHS22 - tmp22) / m_A51;
	double tmp21 = 0.0;
	tmp21 += m_A48 * V[32];
	V[21] = (RHS21 - tmp21) / m_A47;
	double tmp20 = 0.0;
	V[20] = (RHS20 - tmp20) / m_A45;
	double tmp19 = 0.0;
	tmp19 += m_A42 * V[35];
	tmp19 += m_A43 * V[36];
	V[19] = (RHS19 - tmp19) / m_A41;
	double tmp18 = 0.0;
	tmp18 += m_A39 * V[35];
	tmp18 += m_A40 * V[38];
	V[18] = (RHS18 - tmp18) / m_A38;
	double tmp17 = 0.0;
	tmp17 += m_A37 * V[36];
	V[17] = (RHS17 - tmp17) / m_A36;
	double tmp16 = 0.0;
	tmp16 += m_A34 * V[26];
	tmp16 += m_A35 * V[29];
	V[16] = (RHS16 - tmp16) / m_A33;
	double tmp15 = 0.0;
	tmp15 += m_A32 * V[26];
	V[15] = (RHS15 - tmp15) / m_A31;
	double tmp14 = 0.0;
	tmp14 += m_A30 * V[38];
	V[14] = (RHS14 - tmp14) / m_A29;
	double tmp13 = 0.0;
	tmp13 += m_A28 * V[31];
	V[13] = (RHS13 - tmp13) / m_A27;
	double tmp12 = 0.0;
	tmp12 += m_A26 * V[29];
	V[12] = (RHS12 - tmp12) / m_A25;
	double tmp11 = 0.0;
	tmp11 += m_A24 * V[34];
	V[11] = (RHS11 - tmp11) / m_A23;
	double tmp10 = 0.0;
	tmp10 += m_A22 * V[28];
	V[10] = (RHS10 - tmp10) / m_A21;
	double tmp9 = 0.0;
	tmp9 += m_A20 * V[27];
	V[9] = (RHS9 - tmp9) / m_A19;
	double tmp8 = 0.0;
	tmp8 += m_A18 * V[28];
	V[8] = (RHS8 - tmp8) / m_A17;
	double tmp7 = 0.0;
	tmp7 += m_A15 * V[25];
	tmp7 += m_A16 * V[28];
	V[7] = (RHS7 - tmp7) / m_A14;
	double tmp6 = 0.0;
	tmp6 += m_A13 * V[33];
	V[6] = (RHS6 - tmp6) / m_A12;
	double tmp5 = 0.0;
	tmp5 += m_A11 * V[24];
	V[5] = (RHS5 - tmp5) / m_A10;
	double tmp4 = 0.0;
	tmp4 += m_A9 * V[23];
	V[4] = (RHS4 - tmp4) / m_A8;
	double tmp3 = 0.0;
	tmp3 += m_A7 * V[37];
	V[3] = (RHS3 - tmp3) / m_A6;
	double tmp2 = 0.0;
	tmp2 += m_A5 * V[21];
	V[2] = (RHS2 - tmp2) / m_A4;
	double tmp1 = 0.0;
	tmp1 += m_A3 * V[32];
	V[1] = (RHS1 - tmp1) / m_A2;
	double tmp0 = 0.0;
	tmp0 += m_A1 * V[20];
	V[0] = (RHS0 - tmp0) / m_A0;
}

extern const plib::dynlib_static_sym nl_static_solver_syms[];
const plib::dynlib_static_sym nl_static_solver_syms[] = {
// armora
	{"nl_gcr_1250f340dea396ae_22_double_double", reinterpret_cast<void *>(&nl_gcr_1250f340dea396ae_22_double_double)},
// pongf
	{"nl_gcr_13e7b5ac1a260dbf_10_double_double", reinterpret_cast<void *>(&nl_gcr_13e7b5ac1a260dbf_10_double_double)},
// tailg
	{"nl_gcr_144ed14e6bafdb_119_double_double", reinterpret_cast<void *>(&nl_gcr_144ed14e6bafdb_119_double_double)},
// spacewar
	{"nl_gcr_15e8f6fb021de0f9_28_double_double", reinterpret_cast<void *>(&nl_gcr_15e8f6fb021de0f9_28_double_double)},
// armora
	{"nl_gcr_1692de755a535408_9_double_double", reinterpret_cast<void *>(&nl_gcr_1692de755a535408_9_double_double)},
// dpatrol
	{"nl_gcr_18f4d9160b51d613_20_double_double", reinterpret_cast<void *>(&nl_gcr_18f4d9160b51d613_20_double_double)},
// starhawk
	{"nl_gcr_1f1086787c94f97c_40_double_double", reinterpret_cast<void *>(&nl_gcr_1f1086787c94f97c_40_double_double)},
// zac1b11142
	{"nl_gcr_1fad5cda2646cf42_30_double_double", reinterpret_cast<void *>(&nl_gcr_1fad5cda2646cf42_30_double_double)},
// 280zzzap
	{"nl_gcr_24643c159711f292_95_double_double", reinterpret_cast<void *>(&nl_gcr_24643c159711f292_95_double_double)},
// zac1b11142
	{"nl_gcr_287a160e7c36b5b0_96_double_double", reinterpret_cast<void *>(&nl_gcr_287a160e7c36b5b0_96_double_double)},
// kidniki
	{"nl_gcr_294dde1e0ecca6d0_37_double_double", reinterpret_cast<void *>(&nl_gcr_294dde1e0ecca6d0_37_double_double)},
// ripoff
	{"nl_gcr_295cf2e2f3d489bf_12_double_double", reinterpret_cast<void *>(&nl_gcr_295cf2e2f3d489bf_12_double_double)},
// boxingb
	{"nl_gcr_2f84bc98d737730b_22_double_double", reinterpret_cast<void *>(&nl_gcr_2f84bc98d737730b_22_double_double)},
// solarq
	{"nl_gcr_34e910fc1896999f_76_double_double", reinterpret_cast<void *>(&nl_gcr_34e910fc1896999f_76_double_double)},
// warrior
	{"nl_gcr_42a31ce5c187b308_12_double_double", reinterpret_cast<void *>(&nl_gcr_42a31ce5c187b308_12_double_double)},
// 280zzzap
	{"nl_gcr_42c57d523cac30d0_122_double_double", reinterpret_cast<void *>(&nl_gcr_42c57d523cac30d0_122_double_double)},
// ripoff
	{"nl_gcr_43188bf576854ae0_10_double_double", reinterpret_cast<void *>(&nl_gcr_43188bf576854ae0_10_double_double)},
// kidniki
	{"nl_gcr_43f7ff9bc651cc7a_198_double_double", reinterpret_cast<void *>(&nl_gcr_43f7ff9bc651cc7a_198_double_double)},
// gamemachine
	{"nl_gcr_491f95430bfdfd05_19_double_double", reinterpret_cast<void *>(&nl_gcr_491f95430bfdfd05_19_double_double)},
// ripoff
	{"nl_gcr_4b5ecfbb8f9fa97b_29_double_double", reinterpret_cast<void *>(&nl_gcr_4b5ecfbb8f9fa97b_29_double_double)},
// gtrak10
	{"nl_gcr_4c46fdf7c0037727_43_double_double", reinterpret_cast<void *>(&nl_gcr_4c46fdf7c0037727_43_double_double)},
// solarq
	{"nl_gcr_4cb524006206eb1a_25_double_double", reinterpret_cast<void *>(&nl_gcr_4cb524006206eb1a_25_double_double)},
// solarq
	{"nl_gcr_4e4931ccbfb7a3c_70_double_double", reinterpret_cast<void *>(&nl_gcr_4e4931ccbfb7a3c_70_double_double)},
// boxingb
	{"nl_gcr_50f5194a994d56ec_16_double_double", reinterpret_cast<void *>(&nl_gcr_50f5194a994d56ec_16_double_double)},
// starhawk
	{"nl_gcr_528a27fe9ed07d67_45_double_double", reinterpret_cast<void *>(&nl_gcr_528a27fe9ed07d67_45_double_double)},
// boxingb
	{"nl_gcr_53e1117fdb16f546_23_double_double", reinterpret_cast<void *>(&nl_gcr_53e1117fdb16f546_23_double_double)},
// cheekyms
	{"nl_gcr_546396f65ce48700_12_double_double", reinterpret_cast<void *>(&nl_gcr_546396f65ce48700_12_double_double)},
// dpatrol
	{"nl_gcr_59cb6bf7cb9d17dc_7_double_double", reinterpret_cast<void *>(&nl_gcr_59cb6bf7cb9d17dc_7_double_double)},
// breakout
	{"nl_gcr_5a3419e2809520de_13_double_double", reinterpret_cast<void *>(&nl_gcr_5a3419e2809520de_13_double_double)},
// tailg
	{"nl_gcr_5ccf7da1202da2e5_31_double_double", reinterpret_cast<void *>(&nl_gcr_5ccf7da1202da2e5_31_double_double)},
// starcas
	{"nl_gcr_5d550fc7441617a2_109_double_double", reinterpret_cast<void *>(&nl_gcr_5d550fc7441617a2_109_double_double)},
// zac1b11142
	{"nl_gcr_6041272373b8603c_178_double_double", reinterpret_cast<void *>(&nl_gcr_6041272373b8603c_178_double_double)},
// solarq
	{"nl_gcr_62612f71055b8fd4_303_double_double", reinterpret_cast<void *>(&nl_gcr_62612f71055b8fd4_303_double_double)},
// konami1x
	{"nl_gcr_62b99b9904a8c804_49_double_double", reinterpret_cast<void *>(&nl_gcr_62b99b9904a8c804_49_double_double)},
// armora
	{"nl_gcr_64e460d8f716cd89_58_double_double", reinterpret_cast<void *>(&nl_gcr_64e460d8f716cd89_58_double_double)},
// solarq
	{"nl_gcr_66496d6073aca98e_20_double_double", reinterpret_cast<void *>(&nl_gcr_66496d6073aca98e_20_double_double)},
// starhawk
	{"nl_gcr_67838e11f714c455_12_double_double", reinterpret_cast<void *>(&nl_gcr_67838e11f714c455_12_double_double)},
// ripoff
	{"nl_gcr_698d5dd47fb16d5_16_double_double", reinterpret_cast<void *>(&nl_gcr_698d5dd47fb16d5_16_double_double)},
// barrier
	{"nl_gcr_6ef39a62161d596c_47_double_double", reinterpret_cast<void *>(&nl_gcr_6ef39a62161d596c_47_double_double)},
// starhawk
	{"nl_gcr_723fa454468a93d_7_double_double", reinterpret_cast<void *>(&nl_gcr_723fa454468a93d_7_double_double)},
// cheekyms
	{"nl_gcr_733c72a820fdbd1f_7_double_double", reinterpret_cast<void *>(&nl_gcr_733c72a820fdbd1f_7_double_double)},
// tailg
	{"nl_gcr_7388106355fb27c3_12_double_double", reinterpret_cast<void *>(&nl_gcr_7388106355fb27c3_12_double_double)},
// tp1985
	{"nl_gcr_73f2ba8ad4a45b26_10_double_double", reinterpret_cast<void *>(&nl_gcr_73f2ba8ad4a45b26_10_double_double)},
// zac1b11142
	{"nl_gcr_7425594cec8024ad_30_double_double", reinterpret_cast<void *>(&nl_gcr_7425594cec8024ad_30_double_double)},
// tp1985
	{"nl_gcr_74349e9889a2630b_7_double_double", reinterpret_cast<void *>(&nl_gcr_74349e9889a2630b_7_double_double)},
// gunfight
	{"nl_gcr_743595e64cee0a5e_112_double_double", reinterpret_cast<void *>(&nl_gcr_743595e64cee0a5e_112_double_double)},
// ripoff
	{"nl_gcr_76c9e236353caed1_35_double_double", reinterpret_cast<void *>(&nl_gcr_76c9e236353caed1_35_double_double)},
// gamemachine
	{"nl_gcr_782d79b5cbe953b1_7_double_double", reinterpret_cast<void *>(&nl_gcr_782d79b5cbe953b1_7_double_double)},
// barrier
	{"nl_gcr_79e756c5892cf87d_31_double_double", reinterpret_cast<void *>(&nl_gcr_79e756c5892cf87d_31_double_double)},
// breakout
	{"nl_gcr_7a42b97d838ca073_7_double_double", reinterpret_cast<void *>(&nl_gcr_7a42b97d838ca073_7_double_double)},
// 280zzzap
	{"nl_gcr_7afaac594132b463_104_double_double", reinterpret_cast<void *>(&nl_gcr_7afaac594132b463_104_double_double)},
// cheekyms
	{"nl_gcr_7c86a9bc1c6aef4c_7_double_double", reinterpret_cast<void *>(&nl_gcr_7c86a9bc1c6aef4c_7_double_double)},
// solarq
	{"nl_gcr_7caaa135bff3d9f3_15_double_double", reinterpret_cast<void *>(&nl_gcr_7caaa135bff3d9f3_15_double_double)},
// warrior
	{"nl_gcr_8003d4625273fa4d_10_double_double", reinterpret_cast<void *>(&nl_gcr_8003d4625273fa4d_10_double_double)},
// kidniki
	{"nl_gcr_8046625a0fe0959_21_double_double", reinterpret_cast<void *>(&nl_gcr_8046625a0fe0959_21_double_double)},
// mario
	{"nl_gcr_80b4b1e5cc58d303_29_double_double", reinterpret_cast<void *>(&nl_gcr_80b4b1e5cc58d303_29_double_double)},
// sundance
	{"nl_gcr_8446e63d7842f6a6_70_double_double", reinterpret_cast<void *>(&nl_gcr_8446e63d7842f6a6_70_double_double)},
// dpatrol
	{"nl_gcr_85652d3e3ada285a_10_double_double", reinterpret_cast<void *>(&nl_gcr_85652d3e3ada285a_10_double_double)},
// zac1b11142
	{"nl_gcr_861d39f81d29d51_12_double_double", reinterpret_cast<void *>(&nl_gcr_861d39f81d29d51_12_double_double)},
// 280zzzap
	{"nl_gcr_864a61c57bac9c38_123_double_double", reinterpret_cast<void *>(&nl_gcr_864a61c57bac9c38_123_double_double)},
// zac1b11142
	{"nl_gcr_87cb2c78a2628efd_7_double_double", reinterpret_cast<void *>(&nl_gcr_87cb2c78a2628efd_7_double_double)},
// starcas
	{"nl_gcr_88a8ef5f6bd43d48_12_double_double", reinterpret_cast<void *>(&nl_gcr_88a8ef5f6bd43d48_12_double_double)},
// breakout
	{"nl_gcr_8a1565d1413f42f7_31_double_double", reinterpret_cast<void *>(&nl_gcr_8a1565d1413f42f7_31_double_double)},
// starhawk
	{"nl_gcr_8b1ac1e181eec3fc_40_double_double", reinterpret_cast<void *>(&nl_gcr_8b1ac1e181eec3fc_40_double_double)},
// rebound
	{"nl_gcr_8bec817b324dcc3_28_double_double", reinterpret_cast<void *>(&nl_gcr_8bec817b324dcc3_28_double_double)},
// cocoloco
	{"nl_gcr_8c0f7f2284333de5_16_double_double", reinterpret_cast<void *>(&nl_gcr_8c0f7f2284333de5_16_double_double)},
// gamemachine
	{"nl_gcr_934712b55bb3b2b2_10_double_double", reinterpret_cast<void *>(&nl_gcr_934712b55bb3b2b2_10_double_double)},
// kidniki
	{"nl_gcr_9a5874c8e2da79d2_37_double_double", reinterpret_cast<void *>(&nl_gcr_9a5874c8e2da79d2_37_double_double)},
// warrior
	{"nl_gcr_9c975530a1a529d6_7_double_double", reinterpret_cast<void *>(&nl_gcr_9c975530a1a529d6_7_double_double)},
// kidniki
	{"nl_gcr_9f141889c2091efc_24_double_double", reinterpret_cast<void *>(&nl_gcr_9f141889c2091efc_24_double_double)},
// segas16b_audio
	{"nl_gcr_9f7104c5e25c87dd_111_double_double", reinterpret_cast<void *>(&nl_gcr_9f7104c5e25c87dd_111_double_double)},
// boxingb
	{"nl_gcr_a0bf548977306172_25_double_double", reinterpret_cast<void *>(&nl_gcr_a0bf548977306172_25_double_double)},
// boxingb
	{"nl_gcr_a1132c8737d5d463_96_double_double", reinterpret_cast<void *>(&nl_gcr_a1132c8737d5d463_96_double_double)},
// rebound
	{"nl_gcr_a41a44bd5c424f88_13_double_double", reinterpret_cast<void *>(&nl_gcr_a41a44bd5c424f88_13_double_double)},
// tp1985
	{"nl_gcr_a4540ffea06b4346_26_double_double", reinterpret_cast<void *>(&nl_gcr_a4540ffea06b4346_26_double_double)},
// tailg
	{"nl_gcr_a46301cd3479b8db_15_double_double", reinterpret_cast<void *>(&nl_gcr_a46301cd3479b8db_15_double_double)},
// barrier
	{"nl_gcr_a50a4b733e95414a_10_double_double", reinterpret_cast<void *>(&nl_gcr_a50a4b733e95414a_10_double_double)},
// starcas
	{"nl_gcr_a582a424cb61c678_62_double_double", reinterpret_cast<void *>(&nl_gcr_a582a424cb61c678_62_double_double)},
// boxingb
	{"nl_gcr_a6b734322b3ea924_22_double_double", reinterpret_cast<void *>(&nl_gcr_a6b734322b3ea924_22_double_double)},
// armora
	{"nl_gcr_a6cfda6668b153c2_22_double_double", reinterpret_cast<void *>(&nl_gcr_a6cfda6668b153c2_22_double_double)},
// boxingb
	{"nl_gcr_a6f74be7f61e6db2_29_double_double", reinterpret_cast<void *>(&nl_gcr_a6f74be7f61e6db2_29_double_double)},
// breakout
	{"nl_gcr_a971eeb2ef76f75f_13_double_double", reinterpret_cast<void *>(&nl_gcr_a971eeb2ef76f75f_13_double_double)},
// ripoff
	{"nl_gcr_aa07266ef5d420d1_11_double_double", reinterpret_cast<void *>(&nl_gcr_aa07266ef5d420d1_11_double_double)},
// sundance
	{"nl_gcr_ad6dba01ff2425c3_12_double_double", reinterpret_cast<void *>(&nl_gcr_ad6dba01ff2425c3_12_double_double)},
// rebound
	{"nl_gcr_ae15f7f8a55fc96_7_double_double", reinterpret_cast<void *>(&nl_gcr_ae15f7f8a55fc96_7_double_double)},
// armora
	{"nl_gcr_afcde432efdafb81_56_double_double", reinterpret_cast<void *>(&nl_gcr_afcde432efdafb81_56_double_double)},
// mario
	{"nl_gcr_afce66fb47d3c5f3_62_double_double", reinterpret_cast<void *>(&nl_gcr_afce66fb47d3c5f3_62_double_double)},
// spacewar
	{"nl_gcr_b09deef9a25aecaf_24_double_double", reinterpret_cast<void *>(&nl_gcr_b09deef9a25aecaf_24_double_double)},
// breakout
	{"nl_gcr_b66ff415b228d5f8_10_double_double", reinterpret_cast<void *>(&nl_gcr_b66ff415b228d5f8_10_double_double)},
// starcas
	{"nl_gcr_b7344e05aac90017_65_double_double", reinterpret_cast<void *>(&nl_gcr_b7344e05aac90017_65_double_double)},
// boxingb
	{"nl_gcr_b8d6d148a50bdb8f_55_double_double", reinterpret_cast<void *>(&nl_gcr_b8d6d148a50bdb8f_55_double_double)},
// 280zzzap
	{"nl_gcr_bb501e6a23177009_57_double_double", reinterpret_cast<void *>(&nl_gcr_bb501e6a23177009_57_double_double)},
// ripoff
	{"nl_gcr_be7c805100c522fd_59_double_double", reinterpret_cast<void *>(&nl_gcr_be7c805100c522fd_59_double_double)},
// warrior
	{"nl_gcr_bff07f8d339f7cc4_89_double_double", reinterpret_cast<void *>(&nl_gcr_bff07f8d339f7cc4_89_double_double)},
// tailg
	{"nl_gcr_c4cec7aed23b7b94_23_double_double", reinterpret_cast<void *>(&nl_gcr_c4cec7aed23b7b94_23_double_double)},
// popeye
	{"nl_gcr_c6f25bb06e161d1c_50_double_double", reinterpret_cast<void *>(&nl_gcr_c6f25bb06e161d1c_50_double_double)},
// stuntcyc
	{"nl_gcr_c924fe5960b1479e_20_double_double", reinterpret_cast<void *>(&nl_gcr_c924fe5960b1479e_20_double_double)},
// dpatrol
	{"nl_gcr_ca68d70bd8f2f62e_22_double_double", reinterpret_cast<void *>(&nl_gcr_ca68d70bd8f2f62e_22_double_double)},
// breakout
	{"nl_gcr_cb2aae3366e0ac1c_7_double_double", reinterpret_cast<void *>(&nl_gcr_cb2aae3366e0ac1c_7_double_double)},
// barrier
	{"nl_gcr_cc913f9c3f9293e7_19_double_double", reinterpret_cast<void *>(&nl_gcr_cc913f9c3f9293e7_19_double_double)},
// 1942
	{"nl_gcr_ce766957cb26ff3e_90_double_double", reinterpret_cast<void *>(&nl_gcr_ce766957cb26ff3e_90_double_double)},
// zac1b11142
	{"nl_gcr_cfd3bbf5fbba4765_71_double_double", reinterpret_cast<void *>(&nl_gcr_cfd3bbf5fbba4765_71_double_double)},
// gunfight
	{"nl_gcr_d05b3dbe370c7904_14_double_double", reinterpret_cast<void *>(&nl_gcr_d05b3dbe370c7904_14_double_double)},
// barrier
	{"nl_gcr_d06bd7ddbfd17b5e_15_double_double", reinterpret_cast<void *>(&nl_gcr_d06bd7ddbfd17b5e_15_double_double)},
// armora
	{"nl_gcr_d27a39bc93616187_45_double_double", reinterpret_cast<void *>(&nl_gcr_d27a39bc93616187_45_double_double)},
// boxingb
	{"nl_gcr_d7d45dc58b08cab9_10_double_double", reinterpret_cast<void *>(&nl_gcr_d7d45dc58b08cab9_10_double_double)},
// kidniki
	{"nl_gcr_d8c511d38cef5f6f_34_double_double", reinterpret_cast<void *>(&nl_gcr_d8c511d38cef5f6f_34_double_double)},
// warrior
	{"nl_gcr_da598f43329e823_27_double_double", reinterpret_cast<void *>(&nl_gcr_da598f43329e823_27_double_double)},
// pongf
	{"nl_gcr_dbafc5ddaf7a08f8_35_double_double", reinterpret_cast<void *>(&nl_gcr_dbafc5ddaf7a08f8_35_double_double)},
// sundance
	{"nl_gcr_e02a162cb515a958_100_double_double", reinterpret_cast<void *>(&nl_gcr_e02a162cb515a958_100_double_double)},
// speedfrk
	{"nl_gcr_e07b5b086812756c_7_double_double", reinterpret_cast<void *>(&nl_gcr_e07b5b086812756c_7_double_double)},
// solarq
	{"nl_gcr_e081f90c2e0313f6_45_double_double", reinterpret_cast<void *>(&nl_gcr_e081f90c2e0313f6_45_double_double)},
// spacewar
	{"nl_gcr_e0b492db40bba291_20_double_double", reinterpret_cast<void *>(&nl_gcr_e0b492db40bba291_20_double_double)},
// speedfrk
	{"nl_gcr_e4f2ffbf201a3d0c_37_double_double", reinterpret_cast<void *>(&nl_gcr_e4f2ffbf201a3d0c_37_double_double)},
// pongf
	{"nl_gcr_e51b463cd890ef6d_7_double_double", reinterpret_cast<void *>(&nl_gcr_e51b463cd890ef6d_7_double_double)},
// sundance
	{"nl_gcr_e5b7711fac1ea80c_8_double_double", reinterpret_cast<void *>(&nl_gcr_e5b7711fac1ea80c_8_double_double)},
// ripoff
	{"nl_gcr_e60314070a75e121_20_double_double", reinterpret_cast<void *>(&nl_gcr_e60314070a75e121_20_double_double)},
// cheekyms
	{"nl_gcr_e75302e17c866419_150_double_double", reinterpret_cast<void *>(&nl_gcr_e75302e17c866419_150_double_double)},
// spacewar
	{"nl_gcr_e9e8211f43d8f4b3_22_double_double", reinterpret_cast<void *>(&nl_gcr_e9e8211f43d8f4b3_22_double_double)},
// boxingb
	{"nl_gcr_ea2b6e3a05e6ef0b_23_double_double", reinterpret_cast<void *>(&nl_gcr_ea2b6e3a05e6ef0b_23_double_double)},
// starcas
	{"nl_gcr_ec4f6d2dad5961b9_64_double_double", reinterpret_cast<void *>(&nl_gcr_ec4f6d2dad5961b9_64_double_double)},
// barrier
	{"nl_gcr_ecf17036ce1c07cf_10_double_double", reinterpret_cast<void *>(&nl_gcr_ecf17036ce1c07cf_10_double_double)},
// armora
	{"nl_gcr_ee2cacaa15d32491_67_double_double", reinterpret_cast<void *>(&nl_gcr_ee2cacaa15d32491_67_double_double)},
// barrier
	{"nl_gcr_f425d4008ae1d2c6_13_double_double", reinterpret_cast<void *>(&nl_gcr_f425d4008ae1d2c6_13_double_double)},
// boxingb
	{"nl_gcr_f43cf2a28a5a5561_23_double_double", reinterpret_cast<void *>(&nl_gcr_f43cf2a28a5a5561_23_double_double)},
// konami2x
	{"nl_gcr_f6900d3f36a91049_85_double_double", reinterpret_cast<void *>(&nl_gcr_f6900d3f36a91049_85_double_double)},
// breakout
	{"nl_gcr_f7dc4f87b5a8ba93_7_double_double", reinterpret_cast<void *>(&nl_gcr_f7dc4f87b5a8ba93_7_double_double)},
// kidniki
	{"nl_gcr_fc02559fdbfb0e10_67_double_double", reinterpret_cast<void *>(&nl_gcr_fc02559fdbfb0e10_67_double_double)},
// 280zzzap
	{"nl_gcr_fc9971724787b82b_149_double_double", reinterpret_cast<void *>(&nl_gcr_fc9971724787b82b_149_double_double)},
{"", nullptr}
};
